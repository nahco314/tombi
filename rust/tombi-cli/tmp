[1;34m  Debug[0m: "tombi.toml" found at "/home/nahco314/RustroverProjects/tombi/tombi.toml"
    [90mat[0m [36mrust/serde_tombi/src/config.rs:135[0m
[1;34m  Debug[0m: load config schema from: file:///home/nahco314/RustroverProjects/tombi/tombi.schema.json
    [90mat[0m [36mcrates/tombi-schema-store/src/store.rs:107[0m
[1;34m  Debug[0m: load config schema from: file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json
    [90mat[0m [36mcrates/tombi-schema-store/src/store.rs:107[0m
[1;34m  Debug[0m: load config schema from: file:///home/nahco314/RustroverProjects/tombi/schemas/pyproject.schema.json
    [90mat[0m [36mcrates/tombi-schema-store/src/store.rs:107[0m
[1;34m  Debug[0m: load config schema from: file:///home/nahco314/RustroverProjects/tombi/schemas/type-test.schema.json
    [90mat[0m [36mcrates/tombi-schema-store/src/store.rs:107[0m
[1;34m  Debug[0m: load config schema from: file:///home/nahco314/RustroverProjects/tombi/schemas/partial-taskipy.schema.json
    [90mat[0m [36mcrates/tombi-schema-store/src/store.rs:107[0m
[1;34m  Debug[0m: loading schema catalog: https://www.schemastore.org/api/json/catalog.json
    [90mat[0m [36mcrates/tombi-schema-store/src/store.rs:127[0m
[1;35m  Trace[0m: checkout waiting for idle connection: ("https", www.schemastore.org)
    [90mat[0m [36m/home/nahco314/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-util-0.1.11/src/client/legacy/pool.rs:671[0m
[1;34m  Debug[0m: starting new connection: https://www.schemastore.org/    
[1;35m  Trace[0m: Http::connect; scheme=Some("https"), host=Some("www.schemastore.org"), port=None
    [90mat[0m [36m/home/nahco314/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-util-0.1.11/src/client/legacy/connect/http.rs:481[0m
[1;34m  Debug[0m: connecting to 20.42.128.105:443
    [90mat[0m [36m/home/nahco314/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-util-0.1.11/src/client/legacy/connect/http.rs:769[0m
[1;34m  Debug[0m: connected to 20.42.128.105:443
    [90mat[0m [36m/home/nahco314/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-util-0.1.11/src/client/legacy/connect/http.rs:772[0m
[1;35m  Trace[0m: http1 handshake complete, spawning background dispatcher task
    [90mat[0m [36m/home/nahco314/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-util-0.1.11/src/client/legacy/client.rs:581[0m
[1;35m  Trace[0m: checkout dropped for ("https", www.schemastore.org)
    [90mat[0m [36m/home/nahco314/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-util-0.1.11/src/client/legacy/pool.rs:713[0m
[1;35m  Trace[0m: put; add idle connection for ("https", www.schemastore.org)
    [90mat[0m [36m/home/nahco314/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-util-0.1.11/src/client/legacy/pool.rs:349[0m
[1;34m  Debug[0m: pooling idle connection for ("https", www.schemastore.org)
    [90mat[0m [36m/home/nahco314/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-util-0.1.11/src/client/legacy/pool.rs:396[0m
[1;34m  Debug[0m: redirecting 'https://www.schemastore.org/api/json/catalog.json' to 'https://raw.githubusercontent.com/SchemaStore/schemastore/master/src/api/json/catalog.json'    
[1;35m  Trace[0m: checkout waiting for idle connection: ("https", raw.githubusercontent.com)
    [90mat[0m [36m/home/nahco314/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-util-0.1.11/src/client/legacy/pool.rs:671[0m
[1;34m  Debug[0m: starting new connection: https://raw.githubusercontent.com/    
[1;35m  Trace[0m: Http::connect; scheme=Some("https"), host=Some("raw.githubusercontent.com"), port=None
    [90mat[0m [36m/home/nahco314/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-util-0.1.11/src/client/legacy/connect/http.rs:481[0m
[1;34m  Debug[0m: connecting to 185.199.110.133:443
    [90mat[0m [36m/home/nahco314/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-util-0.1.11/src/client/legacy/connect/http.rs:769[0m
[1;35m  Trace[0m: idle interval checking for expired
    [90mat[0m [36m/home/nahco314/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-util-0.1.11/src/client/legacy/pool.rs:808[0m
[1;34m  Debug[0m: connected to 185.199.110.133:443
    [90mat[0m [36m/home/nahco314/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-util-0.1.11/src/client/legacy/connect/http.rs:772[0m
[1;35m  Trace[0m: http1 handshake complete, spawning background dispatcher task
    [90mat[0m [36m/home/nahco314/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-util-0.1.11/src/client/legacy/client.rs:581[0m
[1;35m  Trace[0m: checkout dropped for ("https", raw.githubusercontent.com)
    [90mat[0m [36m/home/nahco314/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-util-0.1.11/src/client/legacy/pool.rs:713[0m
[1;35m  Trace[0m: put; add idle connection for ("https", raw.githubusercontent.com)
    [90mat[0m [36m/home/nahco314/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-util-0.1.11/src/client/legacy/pool.rs:349[0m
[1;34m  Debug[0m: pooling idle connection for ("https", raw.githubusercontent.com)
    [90mat[0m [36m/home/nahco314/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-util-0.1.11/src/client/legacy/pool.rs:396[0m
[1;34m  Debug[0m: Searching for TOML files using user input patterns...
    [90mat[0m [36mrust/tombi-cli/src/app/arg/file.rs:65[0m
[1;34m  Debug[0m: Exclude patterns: ["node_modules/**/*"]
    [90mat[0m [36mrust/tombi-cli/src/app/arg/file.rs:66[0m
[1;34m  Debug[0m: formatting... "./Cargo.toml"
    [90mat[0m [36mrust/tombi-cli/src/app/command/format.rs:141[0m
[1;35m  Trace[0m: TOML AST before editing: Root {
    syntax: ROOT @0..755 @1:1..32:1
      TABLE @0..206 @1:1..10:1
        BRACKET_START @0..1 @1:1..1:2 "["
        KEYS @1..8 @1:2..1:9
          BARE_KEY @1..8 @1:2..1:9
            BARE_KEY @1..8 @1:2..1:9 "package"
        BRACKET_END @8..9 @1:9..1:10 "]"
        LINE_BREAK @9..10 @1:10..2:1 "\n"
        KEY_VALUE @10..28 @2:1..2:19
          KEYS @10..14 @2:1..2:5
            BARE_KEY @10..14 @2:1..2:5
              BARE_KEY @10..14 @2:1..2:5 "name"
          WHITESPACE @14..15 @2:5..2:6 " "
          EQUAL @15..16 @2:6..2:7 "="
          WHITESPACE @16..17 @2:7..2:8 " "
          BASIC_STRING @17..28 @2:8..2:19
            BASIC_STRING @17..28 @2:8..2:19 "\"tombi-cli\""
        LINE_BREAK @28..29 @2:19..3:1 "\n"
        KEY_VALUE @29..53 @3:1..3:25
          KEYS @29..46 @3:1..3:18
            BARE_KEY @29..36 @3:1..3:8
              BARE_KEY @29..36 @3:1..3:8 "version"
            DOT @36..37 @3:8..3:9 "."
            BARE_KEY @37..46 @3:9..3:18
              BARE_KEY @37..46 @3:9..3:18 "workspace"
          WHITESPACE @46..47 @3:18..3:19 " "
          EQUAL @47..48 @3:19..3:20 "="
          WHITESPACE @48..49 @3:20..3:21 " "
          BOOLEAN @49..53 @3:21..3:25
            BOOLEAN @49..53 @3:21..3:25 "true"
        LINE_BREAK @53..54 @3:25..4:1 "\n"
        KEY_VALUE @54..78 @4:1..4:25
          KEYS @54..71 @4:1..4:18
            BARE_KEY @54..61 @4:1..4:8
              BARE_KEY @54..61 @4:1..4:8 "authors"
            DOT @61..62 @4:8..4:9 "."
            BARE_KEY @62..71 @4:9..4:18
              BARE_KEY @62..71 @4:9..4:18 "workspace"
          WHITESPACE @71..72 @4:18..4:19 " "
          EQUAL @72..73 @4:19..4:20 "="
          WHITESPACE @73..74 @4:20..4:21 " "
          BOOLEAN @74..78 @4:21..4:25
            BOOLEAN @74..78 @4:21..4:25 "true"
        LINE_BREAK @78..79 @4:25..5:1 "\n"
        KEY_VALUE @79..103 @5:1..5:25
          KEYS @79..96 @5:1..5:18
            BARE_KEY @79..86 @5:1..5:8
              BARE_KEY @79..86 @5:1..5:8 "edition"
            DOT @86..87 @5:8..5:9 "."
            BARE_KEY @87..96 @5:9..5:18
              BARE_KEY @87..96 @5:9..5:18 "workspace"
          WHITESPACE @96..97 @5:18..5:19 " "
          EQUAL @97..98 @5:19..5:20 "="
          WHITESPACE @98..99 @5:20..5:21 " "
          BOOLEAN @99..103 @5:21..5:25
            BOOLEAN @99..103 @5:21..5:25 "true"
        LINE_BREAK @103..104 @5:25..6:1 "\n"
        KEY_VALUE @104..151 @6:1..6:48
          KEYS @104..115 @6:1..6:12
            BARE_KEY @104..115 @6:1..6:12
              BARE_KEY @104..115 @6:1..6:12 "description"
          WHITESPACE @115..116 @6:12..6:13 " "
          EQUAL @116..117 @6:13..6:14 "="
          WHITESPACE @117..118 @6:14..6:15 " "
          BASIC_STRING @118..151 @6:15..6:48
            BASIC_STRING @118..151 @6:15..6:48 "\"TOML Formatter/Linte ..."
        LINE_BREAK @151..152 @6:48..7:1 "\n"
        KEY_VALUE @152..179 @7:1..7:28
          KEYS @152..172 @7:1..7:21
            BARE_KEY @152..162 @7:1..7:11
              BARE_KEY @152..162 @7:1..7:11 "repository"
            DOT @162..163 @7:11..7:12 "."
            BARE_KEY @163..172 @7:12..7:21
              BARE_KEY @163..172 @7:12..7:21 "workspace"
          WHITESPACE @172..173 @7:21..7:22 " "
          EQUAL @173..174 @7:22..7:23 "="
          WHITESPACE @174..175 @7:23..7:24 " "
          BOOLEAN @175..179 @7:24..7:28
            BOOLEAN @175..179 @7:24..7:28 "true"
        LINE_BREAK @179..180 @7:28..8:1 "\n"
        KEY_VALUE @180..204 @8:1..8:25
          KEYS @180..197 @8:1..8:18
            BARE_KEY @180..187 @8:1..8:8
              BARE_KEY @180..187 @8:1..8:8 "license"
            DOT @187..188 @8:8..8:9 "."
            BARE_KEY @188..197 @8:9..8:18
              BARE_KEY @188..197 @8:9..8:18 "workspace"
          WHITESPACE @197..198 @8:18..8:19 " "
          EQUAL @198..199 @8:19..8:20 "="
          WHITESPACE @199..200 @8:20..8:21 " "
          BOOLEAN @200..204 @8:21..8:25
            BOOLEAN @200..204 @8:21..8:25 "true"
        LINE_BREAK @204..205 @8:25..9:1 "\n"
        LINE_BREAK @205..206 @9:1..10:1 "\n"
      ARRAY_OF_TABLE @206..251 @10:1..14:1
        DOUBLE_BRACKET_START @206..208 @10:1..10:3 "[["
        KEYS @208..211 @10:3..10:6
          BARE_KEY @208..211 @10:3..10:6
            BARE_KEY @208..211 @10:3..10:6 "bin"
        DOUBLE_BRACKET_END @211..213 @10:6..10:8 "]]"
        LINE_BREAK @213..214 @10:8..11:1 "\n"
        KEY_VALUE @214..228 @11:1..11:15
          KEYS @214..218 @11:1..11:5
            BARE_KEY @214..218 @11:1..11:5
              BARE_KEY @214..218 @11:1..11:5 "name"
          WHITESPACE @218..219 @11:5..11:6 " "
          EQUAL @219..220 @11:6..11:7 "="
          WHITESPACE @220..221 @11:7..11:8 " "
          BASIC_STRING @221..228 @11:8..11:15
            BASIC_STRING @221..228 @11:8..11:15 "\"tombi\""
        KEY_VALUE @228..249 @11:15..12:21
          LINE_BREAK @228..229 @11:15..12:1 "\n"
          KEYS @229..233 @12:1..12:5
            BARE_KEY @229..233 @12:1..12:5
              BARE_KEY @229..233 @12:1..12:5 "path"
          WHITESPACE @233..234 @12:5..12:6 " "
          EQUAL @234..235 @12:6..12:7 "="
          WHITESPACE @235..236 @12:7..12:8 " "
          BASIC_STRING @236..249 @12:8..12:21
            BASIC_STRING @236..249 @12:8..12:21 "\"src/main.rs\""
        LINE_BREAK @249..250 @12:21..13:1 "\n"
        LINE_BREAK @250..251 @13:1..14:1 "\n"
      TABLE @251..755 @14:1..32:1
        BRACKET_START @251..252 @14:1..14:2 "["
        KEYS @252..264 @14:2..14:14
          BARE_KEY @252..264 @14:2..14:14
            BARE_KEY @252..264 @14:2..14:14 "dependencies"
        BRACKET_END @264..265 @14:14..14:15 "]"
        LINE_BREAK @265..266 @14:15..15:1 "\n"
        KEY_VALUE @266..287 @15:1..15:22
          KEYS @266..280 @15:1..15:15
            BARE_KEY @266..270 @15:1..15:5
              BARE_KEY @266..270 @15:1..15:5 "clap"
            DOT @270..271 @15:5..15:6 "."
            BARE_KEY @271..280 @15:6..15:15
              BARE_KEY @271..280 @15:6..15:15 "workspace"
          WHITESPACE @280..281 @15:15..15:16 " "
          EQUAL @281..282 @15:16..15:17 "="
          WHITESPACE @282..283 @15:17..15:18 " "
          BOOLEAN @283..287 @15:18..15:22
            BOOLEAN @283..287 @15:18..15:22 "true"
        LINE_BREAK @287..288 @15:22..16:1 "\n"
        KEY_VALUE @288..324 @16:1..16:37
          KEYS @288..317 @16:1..16:30
            BARE_KEY @288..307 @16:1..16:20
              BARE_KEY @288..307 @16:1..16:20 "clap-verbosity-flag"
            DOT @307..308 @16:20..16:21 "."
            BARE_KEY @308..317 @16:21..16:30
              BARE_KEY @308..317 @16:21..16:30 "workspace"
          WHITESPACE @317..318 @16:30..16:31 " "
          EQUAL @318..319 @16:31..16:32 "="
          WHITESPACE @319..320 @16:32..16:33 " "
          BOOLEAN @320..324 @16:33..16:37
            BOOLEAN @320..324 @16:33..16:37 "true"
        LINE_BREAK @324..325 @16:37..17:1 "\n"
        KEY_VALUE @325..346 @17:1..17:22
          KEYS @325..339 @17:1..17:15
            BARE_KEY @325..329 @17:1..17:5
              BARE_KEY @325..329 @17:1..17:5 "glob"
            DOT @329..330 @17:5..17:6 "."
            BARE_KEY @330..339 @17:6..17:15
              BARE_KEY @330..339 @17:6..17:15 "workspace"
          WHITESPACE @339..340 @17:15..17:16 " "
          EQUAL @340..341 @17:16..17:17 "="
          WHITESPACE @341..342 @17:17..17:18 " "
          BOOLEAN @342..346 @17:18..17:22
            BOOLEAN @342..346 @17:18..17:22 "true"
        LINE_BREAK @346..347 @17:22..18:1 "\n"
        KEY_VALUE @347..373 @18:1..18:27
          KEYS @347..366 @18:1..18:20
            BARE_KEY @347..356 @18:1..18:10
              BARE_KEY @347..356 @18:1..18:10 "itertools"
            DOT @356..357 @18:10..18:11 "."
            BARE_KEY @357..366 @18:11..18:20
              BARE_KEY @357..366 @18:11..18:20 "workspace"
          WHITESPACE @366..367 @18:20..18:21 " "
          EQUAL @367..368 @18:21..18:22 "="
          WHITESPACE @368..369 @18:22..18:23 " "
          BOOLEAN @369..373 @18:23..18:27
            BOOLEAN @369..373 @18:23..18:27 "true"
        LINE_BREAK @373..374 @18:27..19:1 "\n"
        KEY_VALUE @374..403 @19:1..19:30
          KEYS @374..396 @19:1..19:23
            BARE_KEY @374..386 @19:1..19:13
              BARE_KEY @374..386 @19:1..19:13 "nu-ansi-term"
            DOT @386..387 @19:13..19:14 "."
            BARE_KEY @387..396 @19:14..19:23
              BARE_KEY @387..396 @19:14..19:23 "workspace"
          WHITESPACE @396..397 @19:23..19:24 " "
          EQUAL @397..398 @19:24..19:25 "="
          WHITESPACE @398..399 @19:25..19:26 " "
          BOOLEAN @399..403 @19:26..19:30
            BOOLEAN @399..403 @19:26..19:30 "true"
        LINE_BREAK @403..404 @19:30..20:1 "\n"
        KEY_VALUE @404..432 @20:1..20:29
          KEYS @404..425 @20:1..20:22
            BARE_KEY @404..415 @20:1..20:12
              BARE_KEY @404..415 @20:1..20:12 "serde_tombi"
            DOT @415..416 @20:12..20:13 "."
            BARE_KEY @416..425 @20:13..20:22
              BARE_KEY @416..425 @20:13..20:22 "workspace"
          WHITESPACE @425..426 @20:22..20:23 " "
          EQUAL @426..427 @20:23..20:24 "="
          WHITESPACE @427..428 @20:24..20:25 " "
          BOOLEAN @428..432 @20:25..20:29
            BOOLEAN @428..432 @20:25..20:29 "true"
        LINE_BREAK @432..433 @20:29..21:1 "\n"
        KEY_VALUE @433..459 @21:1..21:27
          KEYS @433..452 @21:1..21:20
            BARE_KEY @433..442 @21:1..21:10
              BARE_KEY @433..442 @21:1..21:10 "thiserror"
            DOT @442..443 @21:10..21:11 "."
            BARE_KEY @443..452 @21:11..21:20
              BARE_KEY @443..452 @21:11..21:20 "workspace"
          WHITESPACE @452..453 @21:20..21:21 " "
          EQUAL @453..454 @21:21..21:22 "="
          WHITESPACE @454..455 @21:22..21:23 " "
          BOOLEAN @455..459 @21:23..21:27
            BOOLEAN @455..459 @21:23..21:27 "true"
        LINE_BREAK @459..460 @21:27..22:1 "\n"
        KEY_VALUE @460..482 @22:1..22:23
          KEYS @460..475 @22:1..22:16
            BARE_KEY @460..465 @22:1..22:6
              BARE_KEY @460..465 @22:1..22:6 "tokio"
            DOT @465..466 @22:6..22:7 "."
            BARE_KEY @466..475 @22:7..22:16
              BARE_KEY @466..475 @22:7..22:16 "workspace"
          WHITESPACE @475..476 @22:16..22:17 " "
          EQUAL @476..477 @22:17..22:18 "="
          WHITESPACE @477..478 @22:18..22:19 " "
          BOOLEAN @478..482 @22:19..22:23
            BOOLEAN @478..482 @22:19..22:23 "true"
        LINE_BREAK @482..483 @22:23..23:1 "\n"
        KEY_VALUE @483..512 @23:1..23:30
          KEYS @483..505 @23:1..23:23
            BARE_KEY @483..495 @23:1..23:13
              BARE_KEY @483..495 @23:1..23:13 "tombi-config"
            DOT @495..496 @23:13..23:14 "."
            BARE_KEY @496..505 @23:14..23:23
              BARE_KEY @496..505 @23:14..23:23 "workspace"
          WHITESPACE @505..506 @23:23..23:24 " "
          EQUAL @506..507 @23:24..23:25 "="
          WHITESPACE @507..508 @23:25..23:26 " "
          BOOLEAN @508..512 @23:26..23:30
            BOOLEAN @508..512 @23:26..23:30 "true"
        LINE_BREAK @512..513 @23:30..24:1 "\n"
        KEY_VALUE @513..546 @24:1..24:34
          KEYS @513..539 @24:1..24:27
            BARE_KEY @513..529 @24:1..24:17
              BARE_KEY @513..529 @24:1..24:17 "tombi-diagnostic"
            DOT @529..530 @24:17..24:18 "."
            BARE_KEY @530..539 @24:18..24:27
              BARE_KEY @530..539 @24:18..24:27 "workspace"
          WHITESPACE @539..540 @24:27..24:28 " "
          EQUAL @540..541 @24:28..24:29 "="
          WHITESPACE @541..542 @24:29..24:30 " "
          BOOLEAN @542..546 @24:30..24:34
            BOOLEAN @542..546 @24:30..24:34 "true"
        LINE_BREAK @546..547 @24:34..25:1 "\n"
        KEY_VALUE @547..579 @25:1..25:33
          KEYS @547..572 @25:1..25:26
            BARE_KEY @547..562 @25:1..25:16
              BARE_KEY @547..562 @25:1..25:16 "tombi-formatter"
            DOT @562..563 @25:16..25:17 "."
            BARE_KEY @563..572 @25:17..25:26
              BARE_KEY @563..572 @25:17..25:26 "workspace"
          WHITESPACE @572..573 @25:26..25:27 " "
          EQUAL @573..574 @25:27..25:28 "="
          WHITESPACE @574..575 @25:28..25:29 " "
          BOOLEAN @575..579 @25:29..25:33
            BOOLEAN @575..579 @25:29..25:33 "true"
        LINE_BREAK @579..580 @25:33..26:1 "\n"
        KEY_VALUE @580..609 @26:1..26:30
          KEYS @580..602 @26:1..26:23
            BARE_KEY @580..592 @26:1..26:13
              BARE_KEY @580..592 @26:1..26:13 "tombi-linter"
            DOT @592..593 @26:13..26:14 "."
            BARE_KEY @593..602 @26:14..26:23
              BARE_KEY @593..602 @26:14..26:23 "workspace"
          WHITESPACE @602..603 @26:23..26:24 " "
          EQUAL @603..604 @26:24..26:25 "="
          WHITESPACE @604..605 @26:25..26:26 " "
          BOOLEAN @605..609 @26:26..26:30
            BOOLEAN @605..609 @26:26..26:30 "true"
        LINE_BREAK @609..610 @26:30..27:1 "\n"
        KEY_VALUE @610..636 @27:1..27:27
          KEYS @610..629 @27:1..27:20
            BARE_KEY @610..619 @27:1..27:10
              BARE_KEY @610..619 @27:1..27:10 "tombi-lsp"
            DOT @619..620 @27:10..27:11 "."
            BARE_KEY @620..629 @27:11..27:20
              BARE_KEY @620..629 @27:11..27:20 "workspace"
          WHITESPACE @629..630 @27:20..27:21 " "
          EQUAL @630..631 @27:21..27:22 "="
          WHITESPACE @631..632 @27:22..27:23 " "
          BOOLEAN @632..636 @27:23..27:27
            BOOLEAN @632..636 @27:23..27:27 "true"
        LINE_BREAK @636..637 @27:27..28:1 "\n"
        KEY_VALUE @637..672 @28:1..28:36
          KEYS @637..665 @28:1..28:29
            BARE_KEY @637..655 @28:1..28:19
              BARE_KEY @637..655 @28:1..28:19 "tombi-schema-store"
            DOT @655..656 @28:19..28:20 "."
            BARE_KEY @656..665 @28:20..28:29
              BARE_KEY @656..665 @28:20..28:29 "workspace"
          WHITESPACE @665..666 @28:29..28:30 " "
          EQUAL @666..667 @28:30..28:31 "="
          WHITESPACE @667..668 @28:31..28:32 " "
          BOOLEAN @668..672 @28:32..28:36
            BOOLEAN @668..672 @28:32..28:36 "true"
        LINE_BREAK @672..673 @28:36..29:1 "\n"
        KEY_VALUE @673..697 @29:1..29:25
          KEYS @673..690 @29:1..29:18
            BARE_KEY @673..680 @29:1..29:8
              BARE_KEY @673..680 @29:1..29:8 "tracing"
            DOT @680..681 @29:8..29:9 "."
            BARE_KEY @681..690 @29:9..29:18
              BARE_KEY @681..690 @29:9..29:18 "workspace"
          WHITESPACE @690..691 @29:18..29:19 " "
          EQUAL @691..692 @29:19..29:20 "="
          WHITESPACE @692..693 @29:20..29:21 " "
          BOOLEAN @693..697 @29:21..29:25
            BOOLEAN @693..697 @29:21..29:25 "true"
        LINE_BREAK @697..698 @29:25..30:1 "\n"
        KEY_VALUE @698..733 @30:1..30:36
          KEYS @698..726 @30:1..30:29
            BARE_KEY @698..716 @30:1..30:19
              BARE_KEY @698..716 @30:1..30:19 "tracing-subscriber"
            DOT @716..717 @30:19..30:20 "."
            BARE_KEY @717..726 @30:20..30:29
              BARE_KEY @717..726 @30:20..30:29 "workspace"
          WHITESPACE @726..727 @30:29..30:30 " "
          EQUAL @727..728 @30:30..30:31 "="
          WHITESPACE @728..729 @30:31..30:32 " "
          BOOLEAN @729..733 @30:32..30:36
            BOOLEAN @729..733 @30:32..30:36 "true"
        LINE_BREAK @733..734 @30:36..31:1 "\n"
        KEY_VALUE @734..754 @31:1..31:21
          KEYS @734..747 @31:1..31:14
            BARE_KEY @734..737 @31:1..31:4
              BARE_KEY @734..737 @31:1..31:4 "url"
            DOT @737..738 @31:4..31:5 "."
            BARE_KEY @738..747 @31:5..31:14
              BARE_KEY @738..747 @31:5..31:14 "workspace"
          WHITESPACE @747..748 @31:14..31:15 " "
          EQUAL @748..749 @31:15..31:16 "="
          WHITESPACE @749..750 @31:16..31:17 " "
          BOOLEAN @750..754 @31:17..31:21
            BOOLEAN @750..754 @31:17..31:21 "true"
        LINE_BREAK @754..755 @31:21..32:1 "\n"
    ,
}
    [90mat[0m [36mcrates/tombi-parser/src/lib.rs:55[0m
[1;34m  Debug[0m: fetch schema from url: https://json.schemastore.org/cargo.json
    [90mat[0m [36mcrates/tombi-schema-store/src/store.rs:235[0m
[1;35m  Trace[0m: checkout waiting for idle connection: ("https", json.schemastore.org)
    [90mat[0m [36m/home/nahco314/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-util-0.1.11/src/client/legacy/pool.rs:671[0m
[1;34m  Debug[0m: starting new connection: https://json.schemastore.org/    
[1;35m  Trace[0m: Http::connect; scheme=Some("https"), host=Some("json.schemastore.org"), port=None
    [90mat[0m [36m/home/nahco314/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-util-0.1.11/src/client/legacy/connect/http.rs:481[0m
[1;34m  Debug[0m: connecting to 20.42.128.105:443
    [90mat[0m [36m/home/nahco314/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-util-0.1.11/src/client/legacy/connect/http.rs:769[0m
[1;34m  Debug[0m: connected to 20.42.128.105:443
    [90mat[0m [36m/home/nahco314/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-util-0.1.11/src/client/legacy/connect/http.rs:772[0m
[1;35m  Trace[0m: http1 handshake complete, spawning background dispatcher task
    [90mat[0m [36m/home/nahco314/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-util-0.1.11/src/client/legacy/client.rs:581[0m
[1;35m  Trace[0m: checkout dropped for ("https", json.schemastore.org)
    [90mat[0m [36m/home/nahco314/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-util-0.1.11/src/client/legacy/pool.rs:713[0m
[1;35m  Trace[0m: put; add idle connection for ("https", json.schemastore.org)
    [90mat[0m [36m/home/nahco314/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-util-0.1.11/src/client/legacy/pool.rs:349[0m
[1;34m  Debug[0m: pooling idle connection for ("https", json.schemastore.org)
    [90mat[0m [36m/home/nahco314/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-util-0.1.11/src/client/legacy/pool.rs:396[0m
[1;34m  Debug[0m: find root schema from file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json
    [90mat[0m [36mcrates/tombi-schema-store/src/store.rs:473[0m
[1;34m  Debug[0m: use schema TOML version "v1.0.0" for file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json
    [90mat[0m [36mcrates/tombi-schema-store/src/schema/document_schema.rs:68[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Table(TableSchema { title: Some("Cargo.toml"), description: Some("A schema for Cargo.toml."), range: 0:0..2198:1, properties: RwLock { data: {Key("cargo-features"): PropertySchema { key_range: 1914:4..1914:20, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: None, range: 1914:22..1920:5, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: None, range: 1916:15..1918:7, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("package"): PropertySchema { key_range: 1921:4..1921:13, property_schema: Ref { reference: "#/definitions/Package", title: None, description: None, deprecated: None } }, Key("workspace"): PropertySchema { key_range: 1932:4..1932:15, property_schema: Ref { reference: "#/definitions/Workspace", title: None, description: None, deprecated: None } }, Key("lib"): PropertySchema { key_range: 1935:4..1935:9, property_schema: Ref { reference: "#/definitions/Target", title: None, description: None, deprecated: None } }, Key("bin"): PropertySchema { key_range: 1946:4..1946:9, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("Binary targets are executable programs that can be run after being compiled.\nThe default binary filename is `src/main.rs`, which defaults to the name of\nthe package. Additional binaries are stored in the [`src/bin/`\ndirectory](https://doc.rust-lang.org/cargo/guide/project-layout.html). The settings for each binary can be [customized](https://doc.rust-lang.org/cargo/reference/cargo-targets.html#configuring-a-target) in the `[[bin]]` tables in `Cargo.toml`.\n\nBinaries can use the public API of the package's library. They are also linked\nwith the [`[dependencies]`](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) defined in `Cargo.toml`.\n\nYou can run individual binaries with the [`cargo run`](https://doc.rust-lang.org/cargo/commands/cargo-run.html) command with the `--bin\n<bin-name>` option. [`cargo install`](https://doc.rust-lang.org/cargo/commands/cargo-install.html) can be used to copy the executable to a\ncommon location.\n\n```toml\n# Example of customizing binaries in Cargo.toml.\n[[bin]]\nname = \"cool-tool\"\ntest = false\nbench = false\n\n[[bin]]\nname = \"frobnicator\"\nrequired-features = [\"frobnicate\"]\n```"), range: 1946:11..1964:5, items: Some(RwLock { data: Ref { reference: "#/definitions/Target", title: None, description: Some("Binary targets are executable programs that can be run after being compiled.\nThe default binary filename is `src/main.rs`, which defaults to the name of\nthe package. Additional binaries are stored in the [`src/bin/`\ndirectory](https://doc.rust-lang.org/cargo/guide/project-layout.html). The settings for each binary can be [customized](https://doc.rust-lang.org/cargo/reference/cargo-targets.html#configuring-a-target) in the `[[bin]]` tables in `Cargo.toml`.\n\nBinaries can use the public API of the package's library. They are also linked\nwith the [`[dependencies]`](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) defined in `Cargo.toml`.\n\nYou can run individual binaries with the [`cargo run`](https://doc.rust-lang.org/cargo/commands/cargo-run.html) command with the `--bin\n<bin-name>` option. [`cargo install`](https://doc.rust-lang.org/cargo/commands/cargo-install.html) can be used to copy the executable to a\ncommon location.\n\n```toml\n# Example of customizing binaries in Cargo.toml.\n[[bin]]\nname = \"cool-tool\"\ntest = false\nbench = false\n\n[[bin]]\nname = \"frobnicator\"\nrequired-features = [\"frobnicate\"]\n```"), deprecated: None } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("example"): PropertySchema { key_range: 1965:4..1965:13, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("Files located under the [examples directory](https://doc.rust-lang.org/cargo/guide/project-layout.html) are example uses of the functionality provided by the library. When compiled, they are placed in the[ target/debug/examples directory](https://doc.rust-lang.org/cargo/guide/build-cache.html).\n\nExamples can use the public API of the package's library. They are also linked with the [dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) and [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) defined in Cargo.toml.\n\nBy default, examples are executable binaries (with a `main()` function). You\ncan specify the [`crate-type` field](https://doc.rust-lang.org/cargo/reference/cargo-targets.html#the-crate-type-field) to make an example\nbe compiled as a library:\n\n```toml\n[[example]]\nname = \"foo\"\ncrate-type = [\"staticlib\"]\n```\n\nYou can run individual executable examples with the [`cargo run`](https://doc.rust-lang.org/cargo/commands/cargo-run.html) command with\nthe `--example <example-name>` option. Library examples can be built with\n[`cargo build`](https://doc.rust-lang.org/cargo/commands/cargo-build.html) with the `--example <example-name>` option. [`cargo install`](https://doc.rust-lang.org/cargo/commands/cargo-install.html)\nwith the `--example <example-name>` option can be used to copy executable\nbinaries to a common location. Examples are compiled by [`cargo test`](https://doc.rust-lang.org/cargo/commands/cargo-test.html) by\ndefault to protect them from bit-rotting. Set [the `test`\nfield](https://doc.rust-lang.org/cargo/reference/cargo-targets.html#the-test-field) to `true` if you have `#[test]` functions in the\nexample that you want to run with [`cargo test`](https://doc.rust-lang.org/cargo/commands/cargo-test.html).\n"), range: 1965:15..1983:5, items: Some(RwLock { data: Ref { reference: "#/definitions/Target", title: None, description: Some("Files located under the [examples directory](https://doc.rust-lang.org/cargo/guide/project-layout.html) are example uses of the functionality provided by the library. When compiled, they are placed in the[ target/debug/examples directory](https://doc.rust-lang.org/cargo/guide/build-cache.html).\n\nExamples can use the public API of the package's library. They are also linked with the [dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) and [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) defined in Cargo.toml.\n\nBy default, examples are executable binaries (with a `main()` function). You\ncan specify the [`crate-type` field](https://doc.rust-lang.org/cargo/reference/cargo-targets.html#the-crate-type-field) to make an example\nbe compiled as a library:\n\n```toml\n[[example]]\nname = \"foo\"\ncrate-type = [\"staticlib\"]\n```\n\nYou can run individual executable examples with the [`cargo run`](https://doc.rust-lang.org/cargo/commands/cargo-run.html) command with\nthe `--example <example-name>` option. Library examples can be built with\n[`cargo build`](https://doc.rust-lang.org/cargo/commands/cargo-build.html) with the `--example <example-name>` option. [`cargo install`](https://doc.rust-lang.org/cargo/commands/cargo-install.html)\nwith the `--example <example-name>` option can be used to copy executable\nbinaries to a common location. Examples are compiled by [`cargo test`](https://doc.rust-lang.org/cargo/commands/cargo-test.html) by\ndefault to protect them from bit-rotting. Set [the `test`\nfield](https://doc.rust-lang.org/cargo/reference/cargo-targets.html#the-test-field) to `true` if you have `#[test]` functions in the\nexample that you want to run with [`cargo test`](https://doc.rust-lang.org/cargo/commands/cargo-test.html).\n"), deprecated: None } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("test"): PropertySchema { key_range: 1984:4..1984:10, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("Files located under the [`tests` directory](https://doc.rust-lang.org/cargo/guide/project-layout.html) are integration\ntests. When you run [`cargo test`](https://doc.rust-lang.org/cargo/commands/cargo-test.html), Cargo will compile each of these files as\na separate crate, and execute them.\n\nIntegration tests can use the public API of the package's library. They are\nalso linked with the [`[dependencies]`](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) and\n[`[dev-dependencies]`](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) defined in `Cargo.toml`.\n\nIf you want to share code among multiple integration tests, you can place it\nin a separate module such as `tests/common/mod.rs` and then put `mod common;`\nin each test to import it.\n\nEach integration test results in a separate executable binary, and [`cargo\ntest`](https://doc.rust-lang.org/cargo/commands/cargo-test.html) will run them serially. In some cases this can be inefficient, as it\ncan take longer to compile, and may not make full use of multiple CPUs when\nrunning the tests. If you have a lot of integration tests, you may want to\nconsider creating a single integration test, and split the tests into multiple\nmodules. The libtest harness will automatically find all of the `#[test]`\nannotated functions and run them in parallel. You can pass module names to\n[`cargo test`](https://doc.rust-lang.org/cargo/commands/cargo-test.html) to only run the tests within that module.\n\nBinary targets are automatically built if there is an integration test. This\nallows an integration test to execute the binary to exercise and test its\nbehavior. The `CARGO_BIN_EXE_<name>` [environment variable](https://doc.rust-lang.org/cargo/reference/environment-variables.html#environment-variables-cargo-sets-for-crates) is set when the\nintegration test is built so that it can use the [`env` macro](https://doc.rust-lang.org/std/macro.env.html) to locate the\nexecutable."), range: 1984:12..2002:5, items: Some(RwLock { data: Ref { reference: "#/definitions/Target", title: None, description: Some("Files located under the [`tests` directory](https://doc.rust-lang.org/cargo/guide/project-layout.html) are integration\ntests. When you run [`cargo test`](https://doc.rust-lang.org/cargo/commands/cargo-test.html), Cargo will compile each of these files as\na separate crate, and execute them.\n\nIntegration tests can use the public API of the package's library. They are\nalso linked with the [`[dependencies]`](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) and\n[`[dev-dependencies]`](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) defined in `Cargo.toml`.\n\nIf you want to share code among multiple integration tests, you can place it\nin a separate module such as `tests/common/mod.rs` and then put `mod common;`\nin each test to import it.\n\nEach integration test results in a separate executable binary, and [`cargo\ntest`](https://doc.rust-lang.org/cargo/commands/cargo-test.html) will run them serially. In some cases this can be inefficient, as it\ncan take longer to compile, and may not make full use of multiple CPUs when\nrunning the tests. If you have a lot of integration tests, you may want to\nconsider creating a single integration test, and split the tests into multiple\nmodules. The libtest harness will automatically find all of the `#[test]`\nannotated functions and run them in parallel. You can pass module names to\n[`cargo test`](https://doc.rust-lang.org/cargo/commands/cargo-test.html) to only run the tests within that module.\n\nBinary targets are automatically built if there is an integration test. This\nallows an integration test to execute the binary to exercise and test its\nbehavior. The `CARGO_BIN_EXE_<name>` [environment variable](https://doc.rust-lang.org/cargo/reference/environment-variables.html#environment-variables-cargo-sets-for-crates) is set when the\nintegration test is built so that it can use the [`env` macro](https://doc.rust-lang.org/std/macro.env.html) to locate the\nexecutable."), deprecated: None } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("bench"): PropertySchema { key_range: 2003:4..2003:11, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("Benchmarks provide a way to test the performance of your code using the\n[`cargo bench`](https://doc.rust-lang.org/cargo/commands/cargo-bench.html) command. They follow the same structure as [tests](https://doc.rust-lang.org/cargo/reference/cargo-targets.html#tests),\nwith each benchmark function annotated with the `#[bench]` attribute.\nSimilarly to tests:\n\n* Benchmarks are placed in the [`benches` directory](https://doc.rust-lang.org/cargo/guide/project-layout.html).\n* Benchmark functions defined in libraries and binaries have access to the\n  *private* API within the target they are defined in. Benchmarks in the\n  `benches` directory may use the *public* API.\n* [The `bench` field](https://doc.rust-lang.org/cargo/reference/cargo-targets.html#the-bench-field) can be used to define which targets\n  are benchmarked by default.\n* [The `harness` field](https://doc.rust-lang.org/cargo/reference/cargo-targets.html#the-harness-field) can be used to disable the\n  built-in harness.\n\n> **Note**: The [`#[bench]`\n> attribute](https://doc.rust-lang.org/unstable-book/library-features/test.html) is currently\n> unstable and only available on the [nightly channel](https://doc.rust-lang.org/book/appendix-07-nightly-rust.html). There are some\n> packages available on [crates.io](https://crates.io/keywords/benchmark) that\n> may help with running benchmarks on the stable channel, such as\n> [Criterion](https://crates.io/crates/criterion)."), range: 2003:13..2021:5, items: Some(RwLock { data: Ref { reference: "#/definitions/Target", title: None, description: Some("Benchmarks provide a way to test the performance of your code using the\n[`cargo bench`](https://doc.rust-lang.org/cargo/commands/cargo-bench.html) command. They follow the same structure as [tests](https://doc.rust-lang.org/cargo/reference/cargo-targets.html#tests),\nwith each benchmark function annotated with the `#[bench]` attribute.\nSimilarly to tests:\n\n* Benchmarks are placed in the [`benches` directory](https://doc.rust-lang.org/cargo/guide/project-layout.html).\n* Benchmark functions defined in libraries and binaries have access to the\n  *private* API within the target they are defined in. Benchmarks in the\n  `benches` directory may use the *public* API.\n* [The `bench` field](https://doc.rust-lang.org/cargo/reference/cargo-targets.html#the-bench-field) can be used to define which targets\n  are benchmarked by default.\n* [The `harness` field](https://doc.rust-lang.org/cargo/reference/cargo-targets.html#the-harness-field) can be used to disable the\n  built-in harness.\n\n> **Note**: The [`#[bench]`\n> attribute](https://doc.rust-lang.org/unstable-book/library-features/test.html) is currently\n> unstable and only available on the [nightly channel](https://doc.rust-lang.org/book/appendix-07-nightly-rust.html). There are some\n> packages available on [crates.io](https://crates.io/keywords/benchmark) that\n> may help with running benchmarks on the stable channel, such as\n> [Criterion](https://crates.io/crates/criterion)."), deprecated: None } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("dependencies"): PropertySchema { key_range: 2022:4..2022:18, property_schema: Resolved { schema_url: None, value: Table(TableSchema { title: None, description: Some("Cargo is configured to look for dependencies on [crates.io](https://crates.io) by default. Only\nthe name and a version string are required in this case. In [the cargo\nguide](https://doc.rust-lang.org/cargo/guide/index.html), we specified a dependency on the `time` crate:\n\n```toml\n[dependencies]\ntime = \"0.1.12\"\n```\n\nThe string `\"0.1.12\"` is a [semver](https://github.com/steveklabnik/semver#requirements) version requirement. Since this\nstring does not have any operators in it, it is interpreted the same way as\nif we had specified `\"^0.1.12\"`, which is called a caret requirement.\n\nA dependency can also be defined by a table with additional options:\n\n```toml\n[dependencies]\ntime = { path = \"../time\", version = \"0.1.12\" }\n```"), range: 2022:20..2034:5, properties: RwLock { data: {} }, pattern_properties: None, additional_properties: Some(true), additional_property_schema: Some((2025:30..2027:7, RwLock { data: Ref { reference: "#/definitions/Dependency", title: None, description: None, deprecated: None } })), required: None, min_properties: None, max_properties: None, keys_order: Some(Ascending), deprecated: None }) } }, Key("dev-dependencies"): PropertySchema { key_range: 2035:4..2035:22, property_schema: Resolved { schema_url: None, value: Table(TableSchema { title: None, description: Some("The format of `[dev-dependencies]` is equivalent to `[dependencies]`:\n\n```toml\n[dev-dependencies]\ntempdir = \"0.3\"\n```\n\nDev-dependencies are not used when compiling\na package for building, but are used for compiling tests, examples, and\nbenchmarks.\n\nThese dependencies are *not* propagated to other packages which depend on this\npackage.\n\nYou can also have target-specific development dependencies by using\n`dev-dependencies` in the target section header instead of `dependencies`. For\nexample:\n\n```toml\n[target.'cfg(unix)'.dev-dependencies]\nmio = \"0.0.1\"\n```\n\n> **Note**: When a package is published, only dev-dependencies that specify a\n> `version` will be included in the published crate. For most use cases,\n> dev-dependencies are not needed when published, though some users (like OS\n> packagers) may want to run tests within a crate, so providing a `version` if\n> possible can still be beneficial.\n"), range: 2035:24..2051:5, properties: RwLock { data: {} }, pattern_properties: None, additional_properties: Some(true), additional_property_schema: Some((2038:30..2040:7, RwLock { data: Ref { reference: "#/definitions/Dependency", title: None, description: None, deprecated: None } })), required: None, min_properties: None, max_properties: None, keys_order: Some(Ascending), deprecated: None }) } }, Key("build-dependencies"): PropertySchema { key_range: 2064:4..2064:24, property_schema: Resolved { schema_url: None, value: Table(TableSchema { title: None, description: Some("You can depend on other Cargo-based crates for use in your build scripts.\nDependencies are declared through the `build-dependencies` section of the\nmanifest:\n\n```toml\n[build-dependencies]\ncc = \"1.0.3\"\n```\n\nThe build script **does not** have access to the dependencies listed\nin the `dependencies` or `dev-dependencies` section. Build\ndependencies will likewise not be available to the package itself\nunless listed under the `dependencies` section as well. A package\nitself and its build script are built separately, so their\ndependencies need not coincide. Cargo is kept simpler and cleaner by\nusing independent dependencies for independent purposes."), range: 2064:26..2080:5, properties: RwLock { data: {} }, pattern_properties: None, additional_properties: Some(true), additional_property_schema: Some((2067:30..2069:7, RwLock { data: Ref { reference: "#/definitions/Dependency", title: None, description: None, deprecated: None } })), required: None, min_properties: None, max_properties: None, keys_order: Some(Ascending), deprecated: None }) } }, Key("target"): PropertySchema { key_range: 2093:4..2093:12, property_schema: Resolved { schema_url: None, value: Table(TableSchema { title: None, description: None, range: 2093:14..2099:5, properties: RwLock { data: {} }, pattern_properties: None, additional_properties: Some(true), additional_property_schema: Some((2096:30..2098:7, RwLock { data: Ref { reference: "#/definitions/Platform", title: None, description: None, deprecated: None } })), required: None, min_properties: None, max_properties: None, keys_order: Some(Ascending), deprecated: None }) } }, Key("badges"): PropertySchema { key_range: 2100:4..2100:12, property_schema: Resolved { schema_url: None, value: Table(TableSchema { title: None, description: Some("[crates.io](https://crates.io) can display various badges for build status, test coverage, etc. for\neach crate. All badges are optional.\n\n- The badges pertaining to build status that are currently available are\n  Appveyor, CircleCI, Cirrus CI, GitLab, Azure DevOps, Travis CI and Bitbucket\n  Pipelines.\n- Available badges pertaining to code test coverage are Codecov and Coveralls.\n- There are also maintenance-related badges based on isitmaintained.com\n  which state the issue resolution time, percent of open issues, and future\n  maintenance intentions.\n\nMost badge specifications require a `repository` key. It is expected to be in\n`user/repo` format.\n\n```toml\n[badges]\n\n# Appveyor: `repository` is required. `branch` is optional; default is `master`\n# `service` is optional; valid values are `github` (default), `bitbucket`, and\n# `gitlab`; `id` is optional; you can specify the appveyor project id if you\n# want to use that instead. `project_name` is optional; use when the repository\n# name differs from the appveyor project name.\nappveyor = { repository = \"...\", branch = \"master\", service = \"github\" }\n\n# Circle CI: `repository` is required. `branch` is optional; default is `master`\ncircle-ci = { repository = \"...\", branch = \"master\" }\n\n# Cirrus CI: `repository` is required. `branch` is optional; default is `master`\ncirrus-ci = { repository = \"...\", branch = \"master\" }\n\n# GitLab: `repository` is required. `branch` is optional; default is `master`\ngitlab = { repository = \"...\", branch = \"master\" }\n\n# Azure DevOps: `project` is required. `pipeline` is required. `build` is optional; default is `1`\n# Note: project = `organization/project`, pipeline = `name_of_pipeline`, build = `definitionId`\nazure-devops = { project = \"...\", pipeline = \"...\", build=\"2\" }\n\n# Travis CI: `repository` in format \"<user>/<project>\" is required.\n# `branch` is optional; default is `master`\ntravis-ci = { repository = \"...\", branch = \"master\" }\n\n# Bitbucket Pipelines: `repository` is required. `branch` is required\nbitbucket-pipelines = { repository = \"...\", branch = \"master\" }\n\n# Codecov: `repository` is required. `branch` is optional; default is `master`\n# `service` is optional; valid values are `github` (default), `bitbucket`, and\n# `gitlab`.\ncodecov = { repository = \"...\", branch = \"master\", service = \"github\" }\n\n# Coveralls: `repository` is required. `branch` is optional; default is `master`\n# `service` is optional; valid values are `github` (default) and `bitbucket`.\ncoveralls = { repository = \"...\", branch = \"master\", service = \"github\" }\n\n# Is it maintained resolution time: `repository` is required.\nis-it-maintained-issue-resolution = { repository = \"...\" }\n\n# Is it maintained percentage of open issues: `repository` is required.\nis-it-maintained-open-issues = { repository = \"...\" }\n\n# Maintenance: `status` is required. Available options are:\n# - `actively-developed`: New features are being added and bugs are being fixed.\n# - `passively-maintained`: There are no plans for new features, but the maintainer intends to\n#   respond to issues that get filed.\n# - `as-is`: The crate is feature complete, the maintainer does not intend to continue working on\n#   it or providing support, but it works for the purposes it was designed for.\n# - `experimental`: The author wants to share it with the community but is not intending to meet\n#   anyone's particular use case.\n# - `looking-for-maintainer`: The current maintainer would like to transfer the crate to someone\n#   else.\n# - `deprecated`: The maintainer does not recommend using this crate (the description of the crate\n#   can describe why, there could be a better solution available or there could be problems with\n#   the crate that the author does not want to fix).\n# - `none`: Displays no badge on crates.io, since the maintainer has not chosen to specify\n#   their intentions, potential crate users will need to investigate on their own.\nmaintenance = { status = \"...\" }\n```"), range: 2100:14..2116:5, properties: RwLock { data: {} }, pattern_properties: None, additional_properties: Some(true), additional_property_schema: Some((2103:30..2109:7, RwLock { data: Resolved { schema_url: None, value: Table(TableSchema { title: None, description: None, range: 2103:30..2109:7, properties: RwLock { data: {} }, pattern_properties: None, additional_properties: Some(true), additional_property_schema: Some((2105:32..2107:9, RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: None, range: 2105:32..2107:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } })), required: None, min_properties: None, max_properties: None, keys_order: Some(Ascending), deprecated: None }) } })), required: None, min_properties: None, max_properties: None, keys_order: Some(Ascending), deprecated: None }) } }, Key("features"): PropertySchema { key_range: 2117:4..2117:14, property_schema: Resolved { schema_url: None, value: Table(TableSchema { title: None, description: Some("Cargo supports features to allow expression of:\n\n* conditional compilation options (usable through `cfg` attributes);\n* optional dependencies, which enhance a package, but are not required; and\n* clusters of optional dependencies, such as `postgres-all`, that would include the\n  `postgres` package, the `postgres-macros` package, and possibly other packages\n  (such as development-time mocking libraries, debugging tools, etc.).\n\nA feature of a package is either an optional dependency, or a set of other\nfeatures.\n"), range: 2117:16..2133:5, properties: RwLock { data: {} }, pattern_properties: None, additional_properties: Some(true), additional_property_schema: Some((2120:30..2126:7, RwLock { data: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: None, range: 2120:30..2126:7, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: None, range: 2122:17..2124:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } })), required: None, min_properties: None, max_properties: None, keys_order: Some(Ascending), deprecated: None }) } }, Key("lints"): PropertySchema { key_range: 2134:4..2134:11, property_schema: Resolved { schema_url: None, value: AnyOf(AnyOfSchema { title: None, description: Some("Override the default level of lints from different tools by assigning them to a new level in a table."), range: 2134:13..2158:5, schemas: RwLock { data: [Ref { reference: "#/definitions/Lints", title: None, description: None, deprecated: None }, Resolved { schema_url: None, value: Table(TableSchema { title: None, description: None, range: 2140:8..2151:9, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 2143:12..2143:23, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit lints from the workspace manifest."), range: 2143:25..2146:13, default: None, enumerate: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: Some(["workspace"]), min_properties: None, max_properties: None, keys_order: Some(Ascending), deprecated: None }) }] }, default: None, deprecated: None }) } }, Key("patch"): PropertySchema { key_range: 2159:4..2159:11, property_schema: Resolved { schema_url: None, value: Table(TableSchema { title: None, description: Some("The `[patch]` section of `Cargo.toml` can be used to override dependencies\nwith other copies. The syntax is similar to the\n[`[dependencies]`](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) section.\n\n"), range: 2159:13..2175:5, properties: RwLock { data: {} }, pattern_properties: None, additional_properties: Some(true), additional_property_schema: Some((2162:30..2168:7, RwLock { data: Resolved { schema_url: None, value: Table(TableSchema { title: None, description: None, range: 2162:30..2168:7, properties: RwLock { data: {} }, pattern_properties: None, additional_properties: Some(true), additional_property_schema: Some((2164:32..2166:9, RwLock { data: Ref { reference: "#/definitions/Dependency", title: None, description: None, deprecated: None } })), required: None, min_properties: None, max_properties: None, keys_order: Some(Ascending), deprecated: None }) } })), required: None, min_properties: None, max_properties: None, keys_order: Some(Ascending), deprecated: None }) } }, Key("profile"): PropertySchema { key_range: 2186:4..2186:13, property_schema: Ref { reference: "#/definitions/Profiles", title: None, description: None, deprecated: None } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: None, max_properties: None, keys_order: Some(Schema), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-ast-editor/src/edit/table.rs:17[0m
[1;35m  Trace[0m: self = Table(Table { kind: Table, range: 0:0..9:0, symbol_range: 0:0..9:0, key_values: {Key { kind: BareKey, value: "name", range: 1:0..1:4 }: String(String { kind: BasicString(BasicString { syntax: BASIC_STRING @17..28 @2:1..2:12 }), value: "tombi-cli" }), Key { kind: BareKey, value: "version", range: 2:0..2:7 }: Table(Table { kind: KeyValue, range: 2:0..2:24, symbol_range: 2:0..2:24, key_values: {Key { kind: BareKey, value: "workspace", range: 2:0..2:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @49..53 @3:1..3:5 } })} }), Key { kind: BareKey, value: "authors", range: 3:0..3:7 }: Table(Table { kind: KeyValue, range: 3:0..3:24, symbol_range: 3:0..3:24, key_values: {Key { kind: BareKey, value: "workspace", range: 3:0..3:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @74..78 @4:1..4:5 } })} }), Key { kind: BareKey, value: "edition", range: 4:0..4:7 }: Table(Table { kind: KeyValue, range: 4:0..4:24, symbol_range: 4:0..4:24, key_values: {Key { kind: BareKey, value: "workspace", range: 4:0..4:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @99..103 @5:1..5:5 } })} }), Key { kind: BareKey, value: "description", range: 5:0..5:11 }: String(String { kind: BasicString(BasicString { syntax: BASIC_STRING @118..151 @6:1..6:34 }), value: "TOML Formatter/Linter CLI Tool." }), Key { kind: BareKey, value: "repository", range: 6:0..6:10 }: Table(Table { kind: KeyValue, range: 6:0..6:27, symbol_range: 6:0..6:27, key_values: {Key { kind: BareKey, value: "workspace", range: 6:0..6:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @175..179 @7:1..7:5 } })} }), Key { kind: BareKey, value: "license", range: 7:0..7:7 }: Table(Table { kind: KeyValue, range: 7:0..7:24, symbol_range: 7:0..7:24, key_values: {Key { kind: BareKey, value: "workspace", range: 7:0..7:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @200..204 @8:1..8:5 } })} })} })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Table(TableSchema { title: Some("Package"), description: Some("The only field required by Cargo is [`name`](https://doc.rust-lang.org/cargo/reference/manifest.html#the-name-field).\n If publishing to a registry, the registry may\nrequire additional fields. See the notes below and [the publishing chapter](https://doc.rust-lang.org/cargo/reference/publishing.html) for requirements for publishing to [crates.io](https://crates.io/)."), range: 399:15..723:5, properties: RwLock { data: {Key("name"): PropertySchema { key_range: 405:8..405:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("The package name is an identifier used to refer to the package. It is used\nwhen listed as a dependency in another package, and as the default name of\ninferred lib and bin targets.\n\nThe name must use only [alphanumeric](https://doc.rust-lang.org/std/primitive.char.html#method.is_alphanumeric) characters or `-` or `_`, and cannot be empty.\nNote that [`cargo new`](https://doc.rust-lang.org/cargo/commands/cargo-new.html) and [`cargo init`](https://doc.rust-lang.org/cargo/commands/cargo-init.html) impose some additional restrictions on\nthe package name, such as enforcing that it is a valid Rust identifier and not\na keyword. [crates.io](https://crates.io) imposes even more restrictions, such as\nenforcing only ASCII characters, not a reserved name, not a special Windows\nname such as \"nul\", is not too long, etc."), range: 405:16..413:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 414:8..414:17, property_schema: Resolved { schema_url: None, value: AnyOf(AnyOfSchema { title: Some("Semantic Version"), description: Some("Cargo bakes in the concept of [Semantic Versioning](https://semver.org/), so make sure you follow some basic rules:\n\n* Before you reach 1.0.0, anything goes, but if you make breaking changes,\n    increment the minor version. In Rust, breaking changes include adding fields to\n    structs or variants to enums.\n* After 1.0.0, only make breaking changes when you increment the major version.\n    Don't break the build.\n* After 1.0.0, don't add any new public API (no new `pub` anything) in patch-level\n    versions. Always increment the minor version if you add any new `pub` structs,\n    traits, fields, types, functions, methods or anything else.\n* Use version numbers with three numeric parts such as 1.0.0 rather than 1.0."), range: 414:19..425:9, schemas: RwLock { data: [Ref { reference: "#/definitions/SemVer", title: None, description: None, deprecated: None }, Ref { reference: "#/definitions/WorkspaceInheritance", title: None, description: None, deprecated: None }] }, default: None, deprecated: None }) } }, Key("authors"): PropertySchema { key_range: 426:8..426:17, property_schema: Resolved { schema_url: None, value: AnyOf(AnyOfSchema { title: Some("Authors"), description: Some("The `authors` field lists people or organizations that are considered the\n\"authors\" of the package. The exact meaning is open to interpretation — it may\nlist the original or primary authors, current maintainers, or owners of the\npackage. These names will be listed on the crate's page on\n[crates.io](https://crates.io). An optional email address may be included within angled\nbrackets at the end of each author.\n\n> **Note**: [crates.io](https://crates.io) requires at least one author to be listed."), range: 426:19..437:9, schemas: RwLock { data: [Ref { reference: "#/definitions/Authors", title: None, description: None, deprecated: None }, Ref { reference: "#/definitions/WorkspaceInheritance", title: None, description: None, deprecated: None }] }, default: None, deprecated: None }) } }, Key("edition"): PropertySchema { key_range: 438:8..438:17, property_schema: Resolved { schema_url: None, value: AnyOf(AnyOfSchema { title: Some("Edition"), description: Some("The `edition` key affects which edition your package is compiled with. Cargo\nwill always generate packages via [`cargo new`](https://doc.rust-lang.org/cargo/commands/cargo-new.html) with the `edition` key set to the\nlatest edition. Setting the `edition` key in `[package]` will affect all\ntargets/crates in the package, including test suites, benchmarks, binaries,\nexamples, etc."), range: 438:19..449:9, schemas: RwLock { data: [Ref { reference: "#/definitions/Edition", title: None, description: None, deprecated: None }, Ref { reference: "#/definitions/WorkspaceInheritance", title: None, description: None, deprecated: None }] }, default: None, deprecated: None }) } }, Key("rust-version"): PropertySchema { key_range: 450:8..450:22, property_schema: Resolved { schema_url: None, value: AnyOf(AnyOfSchema { title: Some("RustVersion"), description: Some("The `rust-version` field is an optional key that tells cargo what version of the\nRust language and compiler your package can be compiled with. If the currently\nselected version of the Rust compiler is older than the stated version, cargo\nwill exit with an error, telling the user what version is required.\n\nThe first version of Cargo that supports this field was released with Rust 1.56.0.\nIn older releases, the field will be ignored, and Cargo will display a warning.\n\n```toml\n[package]\n# ...\nrust-version = \"1.56\"\n```\n\nThe Rust version must be a bare version number with two or three components; it\ncannot include semver operators or pre-release identifiers. Compiler pre-release\nidentifiers such as -nightly will be ignored while checking the Rust version.\nThe `rust-version` must be equal to or newer than the version that first\nintroduced the configured `edition`.\n\nThe `rust-version` may be ignored using the `--ignore-rust-version` option.\n\nSetting the `rust-version` key in `[package]` will affect all targets/crates in\nthe package, including test suites, benchmarks, binaries, examples, etc."), range: 450:24..461:9, schemas: RwLock { data: [Ref { reference: "#/definitions/RustVersion", title: None, description: None, deprecated: None }, Ref { reference: "#/definitions/WorkspaceInheritance", title: None, description: None, deprecated: None }] }, default: None, deprecated: None }) } }, Key("description"): PropertySchema { key_range: 462:8..462:21, property_schema: Resolved { schema_url: None, value: AnyOf(AnyOfSchema { title: Some("Description"), description: Some("The description is a short blurb about the package. [crates.io](https://crates.io) will display\nthis with your package. This should be plain text (not Markdown).\n\n```toml\n[package]\n# ...\ndescription = \"A short description of my package\"\n```\n\n> **Note**: [crates.io](https://crates.io) requires the `description` to be set."), range: 462:23..473:9, schemas: RwLock { data: [Ref { reference: "#/definitions/Description", title: None, description: None, deprecated: None }, Ref { reference: "#/definitions/WorkspaceInheritance", title: None, description: None, deprecated: None }] }, default: None, deprecated: None }) } }, Key("documentation"): PropertySchema { key_range: 474:8..474:23, property_schema: Resolved { schema_url: None, value: AnyOf(AnyOfSchema { title: Some("Documentation"), description: Some("\nThe `documentation` field specifies a URL to a website hosting the crate's\ndocumentation. If no URL is specified in the manifest file, [crates.io](https://crates.io) will\nautomatically link your crate to the corresponding [docs.rs](https://docs.rs) page.\n\n```toml\n[package]\n# ...\ndocumentation = \"https://docs.rs/bitflags\"\n```\n"), range: 474:25..485:9, schemas: RwLock { data: [Ref { reference: "#/definitions/Documentation", title: None, description: None, deprecated: None }, Ref { reference: "#/definitions/WorkspaceInheritance", title: None, description: None, deprecated: None }] }, default: None, deprecated: None }) } }, Key("readme"): PropertySchema { key_range: 486:8..486:16, property_schema: Resolved { schema_url: None, value: AnyOf(AnyOfSchema { title: Some("Readme"), description: Some("The `readme` field should be the path to a file in the package root (relative\nto this `Cargo.toml`) that contains general information about the package.\nThis file will be transferred to the registry when you publish. [crates.io](https://crates.io)\nwill interpret it as Markdown and render it on the crate's page.\n\n```toml\n[package]\n# ...\nreadme = \"README.md\"\n```\n\nIf no value is specified for this field, and a file named `README.md`,\n`README.txt` or `README` exists in the package root, then the name of that\nfile will be used. You can suppress this behavior by setting this field to\n`false`. If the field is set to `true`, a default value of `README.md` will\nbe assumed.\n"), range: 486:18..497:9, schemas: RwLock { data: [Ref { reference: "#/definitions/Readme", title: None, description: None, deprecated: None }, Ref { reference: "#/definitions/WorkspaceInheritance", title: None, description: None, deprecated: None }] }, default: None, deprecated: None }) } }, Key("homepage"): PropertySchema { key_range: 498:8..498:18, property_schema: Resolved { schema_url: None, value: AnyOf(AnyOfSchema { title: Some("Homepage"), description: Some("The `homepage` field should be a URL to a site that is the home page for your\npackage.\n\n```toml\n[package]\n# ...\nhomepage = \"https://serde.rs/\"\n```"), range: 498:20..509:9, schemas: RwLock { data: [Ref { reference: "#/definitions/Homepage", title: None, description: None, deprecated: None }, Ref { reference: "#/definitions/WorkspaceInheritance", title: None, description: None, deprecated: None }] }, default: None, deprecated: None }) } }, Key("repository"): PropertySchema { key_range: 510:8..510:20, property_schema: Resolved { schema_url: None, value: AnyOf(AnyOfSchema { title: Some("Repository"), description: Some("The `repository` field should be a URL to the source repository for your\npackage.\n\n```toml\n[package]\n# ...\nrepository = \"https://github.com/rust-lang/cargo/\"\n```"), range: 510:22..521:9, schemas: RwLock { data: [Ref { reference: "#/definitions/Repository", title: None, description: None, deprecated: None }, Ref { reference: "#/definitions/WorkspaceInheritance", title: None, description: None, deprecated: None }] }, default: None, deprecated: None }) } }, Key("license"): PropertySchema { key_range: 522:8..522:17, property_schema: Resolved { schema_url: None, value: AnyOf(AnyOfSchema { title: Some("License"), description: Some("The `license` field contains the name of the software license that the package\nis released under.\n\n[crates.io](https://crates.io/) interprets the `license` field as an [SPDX 2.1 license\nexpression](https://spdx.org/spdx-specification-21-web-version#h.jxpfx0ykyb60). The name must be a known license\nfrom the [SPDX license list 3.6](https://github.com/spdx/license-list-data/tree/v3.6). Parentheses are not\ncurrently supported. See the [SPDX site](https://spdx.org/license-list) for more information.\n\nSPDX license expressions support AND and OR operators to combine multiple\nlicenses.\n\n```toml\n[package]\n# ...\nlicense = \"MIT OR Apache-2.0\"\n```\n\nUsing `OR` indicates the user may choose either license. Using `AND` indicates\nthe user must comply with both licenses simultaneously. The `WITH` operator\nindicates a license with a special exception. Some examples:\n\n* `MIT OR Apache-2.0`\n* `LGPL-2.1 AND MIT AND BSD-2-Clause`\n* `GPL-2.0+ WITH Bison-exception-2.2`\n\nIf a package is using a nonstandard license, then the `license-file` field may\nbe specified in lieu of the `license` field."), range: 522:19..533:9, schemas: RwLock { data: [Ref { reference: "#/definitions/License", title: None, description: None, deprecated: None }, Ref { reference: "#/definitions/WorkspaceInheritance", title: None, description: None, deprecated: None }] }, default: None, deprecated: None }) } }, Key("license-file"): PropertySchema { key_range: 534:8..534:22, property_schema: Resolved { schema_url: None, value: AnyOf(AnyOfSchema { title: Some("LicenseFile"), description: Some("The `license-file` field contains the path to a file\ncontaining the text of the license (relative to this `Cargo.toml`).\n\n```toml\n[package]\n# ...\nlicense-file = \"LICENSE.txt\"\n```\n\n> **Note**: [crates.io](https://crates.io) requires either `license` or `license-file` to be set."), range: 534:24..545:9, schemas: RwLock { data: [Ref { reference: "#/definitions/LicenseFile", title: None, description: None, deprecated: None }, Ref { reference: "#/definitions/WorkspaceInheritance", title: None, description: None, deprecated: None }] }, default: None, deprecated: None }) } }, Key("keywords"): PropertySchema { key_range: 546:8..546:18, property_schema: Resolved { schema_url: None, value: AnyOf(AnyOfSchema { title: Some("Keywords"), description: Some("The `keywords` field is an array of strings that describe this package. This\ncan help when searching for the package on a registry, and you may choose any\nwords that would help someone find this crate.\n\n```toml\n[package]\n# ...\nkeywords = [\"gamedev\", \"graphics\"]\n```\n\n> **Note**: [crates.io](https://crates.io) has a maximum of 5 keywords. Each keyword must be\n> ASCII text, start with a letter, and only contain letters, numbers, `_` or\n> `-`, and have at most 20 characters."), range: 546:20..557:9, schemas: RwLock { data: [Ref { reference: "#/definitions/Keywords", title: None, description: None, deprecated: None }, Ref { reference: "#/definitions/WorkspaceInheritance", title: None, description: None, deprecated: None }] }, default: None, deprecated: None }) } }, Key("categories"): PropertySchema { key_range: 558:8..558:20, property_schema: Resolved { schema_url: None, value: AnyOf(AnyOfSchema { title: Some("Categories"), description: Some("The `categories` field is an array of strings of the categories this package\nbelongs to.\n\n```toml\ncategories = [\"command-line-utilities\", \"development-tools::cargo-plugins\"]\n```\n\n> **Note**: [crates.io](https://crates.io) has a maximum of 5 categories. Each category should\n> match one of the strings available at https://crates.io/category_slugs, and\n> must match exactly."), range: 558:22..569:9, schemas: RwLock { data: [Ref { reference: "#/definitions/Categories", title: None, description: None, deprecated: None }, Ref { reference: "#/definitions/WorkspaceInheritance", title: None, description: None, deprecated: None }] }, default: None, deprecated: None }) } }, Key("workspace"): PropertySchema { key_range: 570:8..570:19, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("The `workspace` field can be used to configure the workspace that this package\nwill be a member of. If not specified this will be inferred as the first\nCargo.toml with `[workspace]` upwards in the filesystem. Setting this is\nuseful if the member is not inside a subdirectory of the workspace root.\n\n```toml\n[package]\n# ...\nworkspace = \"path/to/workspace/root\"\n```\n\nThis field cannot be specified if the manifest already has a `[workspace]`\ntable defined. That is, a crate cannot both be a root crate in a workspace\n(contain `[workspace]`) and also be a member crate of another workspace\n(contain `package.workspace`).\n\nFor more information, see the [workspaces chapter](https://doc.rust-lang.org/cargo/reference/workspaces.html)."), range: 570:21..578:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("build"): PropertySchema { key_range: 579:8..579:15, property_schema: Ref { reference: "#/definitions/Build", title: None, description: None, deprecated: None } }, Key("links"): PropertySchema { key_range: 582:8..582:15, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("The `links` field specifies the name of a native library that is being linked\nto. More information can be found in the [`links`](https://doc.rust-lang.org/cargo/reference/build-scripts.html#the-links-manifest-key) section of the build\nscript guide.\n\n```toml\n[package]\n# ...\nlinks = \"foo\"\n```"), range: 582:17..590:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("exclude"): PropertySchema { key_range: 591:8..591:17, property_schema: Resolved { schema_url: None, value: AnyOf(AnyOfSchema { title: Some("Exclude"), description: Some("You can explicitly specify that a set of file patterns should be ignored or\nincluded for the purposes of packaging. The patterns specified in the\n`exclude` field identify a set of files that are not included, and the\npatterns in `include` specify files that are explicitly included.\n\nThe patterns should be [gitignore](https://git-scm.com/docs/gitignore)-style patterns. Briefly:\n\n- `foo` matches any file or directory with the name `foo` anywhere in the\n  package. This is equivalent to the pattern `**/foo`.\n- `/foo` matches any file or directory with the name `foo` only in the root of\n  the package.\n- `foo/` matches any *directory* with the name `foo` anywhere in the package.\n- Common glob patterns like `*`, `?`, and `[]` are supported:\n  - `*` matches zero or more characters except `/`.  For example, `*.html`\n    matches any file or directory with the `.html` extension anywhere in the\n    package.\n  - `?` matches any character except `/`. For example, `foo?` matches `food`,\n    but not `foo`.\n  - `[]` allows for matching a range of characters. For example, `[ab]`\n    matches either `a` or `b`. `[a-z]` matches letters a through z.\n- `**/` prefix matches in any directory. For example, `**/foo/bar` matches the\n  file or directory `bar` anywhere that is directly under directory `foo`.\n- `/**` suffix matches everything inside. For example, `foo/**` matches all\n  files inside directory `foo`, including all files in subdirectories below\n  `foo`.\n- `/**/` matches zero or more directories. For example, `a/**/b` matches\n  `a/b`, `a/x/b`, `a/x/y/b`, and so on.\n- `!` prefix negates a pattern. For example, a pattern of `src/**.rs` and\n  `!foo.rs` would match all files with the `.rs` extension inside the `src`\n  directory, except for any file named `foo.rs`.\n\nIf git is being used for a package, the `exclude` field will be seeded with\nthe `gitignore` settings from the repository.\n\n```toml\n[package]\n# ...\nexclude = [\"build/**/*.o\", \"doc/**/*.html\"]\n```\n\n```toml\n[package]\n# ...\ninclude = [\"src/**/*\", \"Cargo.toml\"]\n```\n\nThe options are mutually exclusive: setting `include` will override an\n`exclude`. Note that `include` must be an exhaustive list of files as otherwise\nnecessary source files may not be included. The package's `Cargo.toml` is\nautomatically included.\n\nThe include/exclude list is also used for change tracking in some situations.\nFor targets built with `rustdoc`, it is used to determine the list of files to\ntrack to determine if the target should be rebuilt. If the package has a\n[build script](https://doc.rust-lang.org/cargo/reference/build-scripts.html) that does not emit any `rerun-if-*` directives, then the\ninclude/exclude list is used for tracking if the build script should be re-run\nif any of those files change."), range: 591:19..602:9, schemas: RwLock { data: [Ref { reference: "#/definitions/Exclude", title: None, description: None, deprecated: None }, Ref { reference: "#/definitions/WorkspaceInheritance", title: None, description: None, deprecated: None }] }, default: None, deprecated: None }) } }, Key("include"): PropertySchema { key_range: 603:8..603:17, property_schema: Resolved { schema_url: None, value: AnyOf(AnyOfSchema { title: None, description: Some("You can explicitly specify that a set of file patterns should be ignored or\nincluded for the purposes of packaging. The patterns specified in the\n`exclude` field identify a set of files that are not included, and the\npatterns in `include` specify files that are explicitly included.\n\nThe patterns should be [gitignore](https://git-scm.com/docs/gitignore)-style patterns. Briefly:\n\n- `foo` matches any file or directory with the name `foo` anywhere in the\n  package. This is equivalent to the pattern `**/foo`.\n- `/foo` matches any file or directory with the name `foo` only in the root of\n  the package.\n- `foo/` matches any *directory* with the name `foo` anywhere in the package.\n- Common glob patterns like `*`, `?`, and `[]` are supported:\n  - `*` matches zero or more characters except `/`.  For example, `*.html`\n    matches any file or directory with the `.html` extension anywhere in the\n    package.\n  - `?` matches any character except `/`. For example, `foo?` matches `food`,\n    but not `foo`.\n  - `[]` allows for matching a range of characters. For example, `[ab]`\n    matches either `a` or `b`. `[a-z]` matches letters a through z.\n- `**/` prefix matches in any directory. For example, `**/foo/bar` matches the\n  file or directory `bar` anywhere that is directly under directory `foo`.\n- `/**` suffix matches everything inside. For example, `foo/**` matches all\n  files inside directory `foo`, including all files in subdirectories below\n  `foo`.\n- `/**/` matches zero or more directories. For example, `a/**/b` matches\n  `a/b`, `a/x/b`, `a/x/y/b`, and so on.\n- `!` prefix negates a pattern. For example, a pattern of `src/**.rs` and\n  `!foo.rs` would match all files with the `.rs` extension inside the `src`\n  directory, except for any file named `foo.rs`.\n\nIf git is being used for a package, the `exclude` field will be seeded with\nthe `gitignore` settings from the repository.\n\n```toml\n[package]\n# ...\nexclude = [\"build/**/*.o\", \"doc/**/*.html\"]\n```\n\n```toml\n[package]\n# ...\ninclude = [\"src/**/*\", \"Cargo.toml\"]\n```\n\nThe options are mutually exclusive: setting `include` will override an\n`exclude`. Note that `include` must be an exhaustive list of files as otherwise\nnecessary source files may not be included. The package's `Cargo.toml` is\nautomatically included.\n\nThe include/exclude list is also used for change tracking in some situations.\nFor targets built with `rustdoc`, it is used to determine the list of files to\ntrack to determine if the target should be rebuilt. If the package has a\n[build script](https://doc.rust-lang.org/cargo/reference/build-scripts.html) that does not emit any `rerun-if-*` directives, then the\ninclude/exclude list is used for tracking if the build script should be re-run\nif any of those files change."), range: 603:19..613:9, schemas: RwLock { data: [Ref { reference: "#/definitions/Include", title: None, description: None, deprecated: None }, Ref { reference: "#/definitions/WorkspaceInheritance", title: None, description: None, deprecated: None }] }, default: None, deprecated: None }) } }, Key("publish"): PropertySchema { key_range: 614:8..614:17, property_schema: Resolved { schema_url: None, value: AnyOf(AnyOfSchema { title: Some("Publish"), description: Some("The `publish` field can be used to prevent a package from being published to a package registry (like *crates.io*) by mistake, for instance to keep a package\nprivate in a company.\n\n```toml\n[package]\n# ...\npublish = false\n```\n\nThe value may also be an array of strings which are registry names that are\nallowed to be published to.\n\n```toml\n[package]\n# ...\npublish = [\"some-registry-name\"]\n```"), range: 614:19..625:9, schemas: RwLock { data: [Ref { reference: "#/definitions/Publish", title: None, description: None, deprecated: None }, Ref { reference: "#/definitions/WorkspaceInheritance", title: None, description: None, deprecated: None }] }, default: None, deprecated: None }) } }, Key("metadata"): PropertySchema { key_range: 626:8..626:18, property_schema: Resolved { schema_url: None, value: Table(TableSchema { title: None, description: Some("Cargo by default will warn about unused keys in `Cargo.toml` to assist in\ndetecting typos and such. The `package.metadata` table, however, is completely\nignored by Cargo and will not be warned about. This section can be used for\ntools which would like to store package configuration in `Cargo.toml`. For\nexample:\n\n```toml\n[package]\nname = \"...\"\n# ...\n\n# Metadata used when generating an Android APK, for example.\n[package.metadata.android]\npackage-name = \"my-awesome-android-app\"\nassets = \"path/to/static\"\n```\n"), range: 626:20..641:9, properties: RwLock { data: {Key("playdate"): PropertySchema { key_range: 631:12..631:22, property_schema: Ref { reference: "#/definitions/PlaydateMetadata", title: None, description: None, deprecated: None } }} }, pattern_properties: None, additional_properties: Some(true), additional_property_schema: None, required: None, min_properties: None, max_properties: None, keys_order: Some(Schema), deprecated: None }) } }, Key("default-run"): PropertySchema { key_range: 642:8..642:21, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("The `default-run` field in the `[package]` section of the manifest can be used\nto specify a default binary picked by [`cargo run`](https://doc.rust-lang.org/cargo/commands/cargo-run.html). For example, when there is\nboth `src/bin/a.rs` and `src/bin/b.rs`:\n\n```toml\n[package]\ndefault-run = \"a\"\n```"), range: 642:23..650:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("autobins"): PropertySchema { key_range: 651:8..651:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Disable automatic discovery of `bin` targets.\n\nDisabling automatic discovery should only be needed for specialized\nsituations. For example, if you have a library where you want a *module* named\n`bin`, this would present a problem because Cargo would usually attempt to\ncompile anything in the `bin` directory as an executable. Here is a sample\nlayout of this scenario:\n\n```\n├── Cargo.toml\n└── src\n    ├── lib.rs\n    └── bin\n        └── mod.rs\n```\n\nTo prevent Cargo from inferring `src/bin/mod.rs` as an executable, set\nthis to `false` to disable auto-discovery."), range: 651:20..659:9, default: None, enumerate: None, deprecated: None }) } }, Key("autoexamples"): PropertySchema { key_range: 660:8..660:22, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Disable automatic discovery of `example` targets.\n\nDisabling automatic discovery should only be needed for specialized\nsituations. For example, if you have a library where you want a *module* named\n`bin`, this would present a problem because Cargo would usually attempt to\ncompile anything in the `bin` directory as an executable. Here is a sample\nlayout of this scenario:\n\n```\n├── Cargo.toml\n└── src\n    ├── lib.rs\n    └── bin\n        └── mod.rs\n```\n"), range: 660:24..668:9, default: None, enumerate: None, deprecated: None }) } }, Key("autotests"): PropertySchema { key_range: 669:8..669:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Disable automatic discovery of `test` targets.\n\nDisabling automatic discovery should only be needed for specialized\nsituations. For example, if you have a library where you want a *module* named\n`bin`, this would present a problem because Cargo would usually attempt to\ncompile anything in the `bin` directory as an executable. Here is a sample\nlayout of this scenario:\n\n```\n├── Cargo.toml\n└── src\n    ├── lib.rs\n    └── bin\n        └── mod.rs\n```\n"), range: 669:21..677:9, default: None, enumerate: None, deprecated: None }) } }, Key("autobenches"): PropertySchema { key_range: 678:8..678:21, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Disable automatic discovery of `bench` targets.\n\nDisabling automatic discovery should only be needed for specialized\nsituations. For example, if you have a library where you want a *module* named\n`bin`, this would present a problem because Cargo would usually attempt to\ncompile anything in the `bin` directory as an executable. Here is a sample\nlayout of this scenario:\n\n```\n├── Cargo.toml\n└── src\n    ├── lib.rs\n    └── bin\n        └── mod.rs\n```\n"), range: 678:23..686:9, default: None, enumerate: None, deprecated: None }) } }, Key("resolver"): PropertySchema { key_range: 687:8..687:18, property_schema: Ref { reference: "#/definitions/Resolver", title: None, description: None, deprecated: None } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: Some(["name"]), min_properties: None, max_properties: None, keys_order: Some(Schema), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table { kind: Table, range: 0:0..9:0, symbol_range: 0:0..9:0, key_values: {Key { kind: BareKey, value: "name", range: 1:0..1:4 }: String(String { kind: BasicString(BasicString { syntax: BASIC_STRING @17..28 @2:1..2:12 }), value: "tombi-cli" }), Key { kind: BareKey, value: "version", range: 2:0..2:7 }: Table(Table { kind: KeyValue, range: 2:0..2:24, symbol_range: 2:0..2:24, key_values: {Key { kind: BareKey, value: "workspace", range: 2:0..2:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @49..53 @3:1..3:5 } })} }), Key { kind: BareKey, value: "authors", range: 3:0..3:7 }: Table(Table { kind: KeyValue, range: 3:0..3:24, symbol_range: 3:0..3:24, key_values: {Key { kind: BareKey, value: "workspace", range: 3:0..3:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @74..78 @4:1..4:5 } })} }), Key { kind: BareKey, value: "edition", range: 4:0..4:7 }: Table(Table { kind: KeyValue, range: 4:0..4:24, symbol_range: 4:0..4:24, key_values: {Key { kind: BareKey, value: "workspace", range: 4:0..4:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @99..103 @5:1..5:5 } })} }), Key { kind: BareKey, value: "description", range: 5:0..5:11 }: String(String { kind: BasicString(BasicString { syntax: BASIC_STRING @118..151 @6:1..6:34 }), value: "TOML Formatter/Linter CLI Tool." }), Key { kind: BareKey, value: "repository", range: 6:0..6:10 }: Table(Table { kind: KeyValue, range: 6:0..6:27, symbol_range: 6:0..6:27, key_values: {Key { kind: BareKey, value: "workspace", range: 6:0..6:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @175..179 @7:1..7:5 } })} }), Key { kind: BareKey, value: "license", range: 7:0..7:7 }: Table(Table { kind: KeyValue, range: 7:0..7:24, symbol_range: 7:0..7:24, key_values: {Key { kind: BareKey, value: "workspace", range: 7:0..7:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @200..204 @8:1..8:5 } })} })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("package")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Table(TableSchema { title: Some("Package"), description: Some("The only field required by Cargo is [`name`](https://doc.rust-lang.org/cargo/reference/manifest.html#the-name-field).\n If publishing to a registry, the registry may\nrequire additional fields. See the notes below and [the publishing chapter](https://doc.rust-lang.org/cargo/reference/publishing.html) for requirements for publishing to [crates.io](https://crates.io/)."), range: 399:15..723:5, properties: RwLock { data: {Key("name"): PropertySchema { key_range: 405:8..405:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("The package name is an identifier used to refer to the package. It is used\nwhen listed as a dependency in another package, and as the default name of\ninferred lib and bin targets.\n\nThe name must use only [alphanumeric](https://doc.rust-lang.org/std/primitive.char.html#method.is_alphanumeric) characters or `-` or `_`, and cannot be empty.\nNote that [`cargo new`](https://doc.rust-lang.org/cargo/commands/cargo-new.html) and [`cargo init`](https://doc.rust-lang.org/cargo/commands/cargo-init.html) impose some additional restrictions on\nthe package name, such as enforcing that it is a valid Rust identifier and not\na keyword. [crates.io](https://crates.io) imposes even more restrictions, such as\nenforcing only ASCII characters, not a reserved name, not a special Windows\nname such as \"nul\", is not too long, etc."), range: 405:16..413:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 414:8..414:17, property_schema: Resolved { schema_url: None, value: AnyOf(AnyOfSchema { title: Some("Semantic Version"), description: Some("Cargo bakes in the concept of [Semantic Versioning](https://semver.org/), so make sure you follow some basic rules:\n\n* Before you reach 1.0.0, anything goes, but if you make breaking changes,\n    increment the minor version. In Rust, breaking changes include adding fields to\n    structs or variants to enums.\n* After 1.0.0, only make breaking changes when you increment the major version.\n    Don't break the build.\n* After 1.0.0, don't add any new public API (no new `pub` anything) in patch-level\n    versions. Always increment the minor version if you add any new `pub` structs,\n    traits, fields, types, functions, methods or anything else.\n* Use version numbers with three numeric parts such as 1.0.0 rather than 1.0."), range: 414:19..425:9, schemas: RwLock { data: [Ref { reference: "#/definitions/SemVer", title: None, description: None, deprecated: None }, Ref { reference: "#/definitions/WorkspaceInheritance", title: None, description: None, deprecated: None }] }, default: None, deprecated: None }) } }, Key("authors"): PropertySchema { key_range: 426:8..426:17, property_schema: Resolved { schema_url: None, value: AnyOf(AnyOfSchema { title: Some("Authors"), description: Some("The `authors` field lists people or organizations that are considered the\n\"authors\" of the package. The exact meaning is open to interpretation — it may\nlist the original or primary authors, current maintainers, or owners of the\npackage. These names will be listed on the crate's page on\n[crates.io](https://crates.io). An optional email address may be included within angled\nbrackets at the end of each author.\n\n> **Note**: [crates.io](https://crates.io) requires at least one author to be listed."), range: 426:19..437:9, schemas: RwLock { data: [Ref { reference: "#/definitions/Authors", title: None, description: None, deprecated: None }, Ref { reference: "#/definitions/WorkspaceInheritance", title: None, description: None, deprecated: None }] }, default: None, deprecated: None }) } }, Key("edition"): PropertySchema { key_range: 438:8..438:17, property_schema: Resolved { schema_url: None, value: AnyOf(AnyOfSchema { title: Some("Edition"), description: Some("The `edition` key affects which edition your package is compiled with. Cargo\nwill always generate packages via [`cargo new`](https://doc.rust-lang.org/cargo/commands/cargo-new.html) with the `edition` key set to the\nlatest edition. Setting the `edition` key in `[package]` will affect all\ntargets/crates in the package, including test suites, benchmarks, binaries,\nexamples, etc."), range: 438:19..449:9, schemas: RwLock { data: [Ref { reference: "#/definitions/Edition", title: None, description: None, deprecated: None }, Ref { reference: "#/definitions/WorkspaceInheritance", title: None, description: None, deprecated: None }] }, default: None, deprecated: None }) } }, Key("rust-version"): PropertySchema { key_range: 450:8..450:22, property_schema: Resolved { schema_url: None, value: AnyOf(AnyOfSchema { title: Some("RustVersion"), description: Some("The `rust-version` field is an optional key that tells cargo what version of the\nRust language and compiler your package can be compiled with. If the currently\nselected version of the Rust compiler is older than the stated version, cargo\nwill exit with an error, telling the user what version is required.\n\nThe first version of Cargo that supports this field was released with Rust 1.56.0.\nIn older releases, the field will be ignored, and Cargo will display a warning.\n\n```toml\n[package]\n# ...\nrust-version = \"1.56\"\n```\n\nThe Rust version must be a bare version number with two or three components; it\ncannot include semver operators or pre-release identifiers. Compiler pre-release\nidentifiers such as -nightly will be ignored while checking the Rust version.\nThe `rust-version` must be equal to or newer than the version that first\nintroduced the configured `edition`.\n\nThe `rust-version` may be ignored using the `--ignore-rust-version` option.\n\nSetting the `rust-version` key in `[package]` will affect all targets/crates in\nthe package, including test suites, benchmarks, binaries, examples, etc."), range: 450:24..461:9, schemas: RwLock { data: [Ref { reference: "#/definitions/RustVersion", title: None, description: None, deprecated: None }, Ref { reference: "#/definitions/WorkspaceInheritance", title: None, description: None, deprecated: None }] }, default: None, deprecated: None }) } }, Key("description"): PropertySchema { key_range: 462:8..462:21, property_schema: Resolved { schema_url: None, value: AnyOf(AnyOfSchema { title: Some("Description"), description: Some("The description is a short blurb about the package. [crates.io](https://crates.io) will display\nthis with your package. This should be plain text (not Markdown).\n\n```toml\n[package]\n# ...\ndescription = \"A short description of my package\"\n```\n\n> **Note**: [crates.io](https://crates.io) requires the `description` to be set."), range: 462:23..473:9, schemas: RwLock { data: [Ref { reference: "#/definitions/Description", title: None, description: None, deprecated: None }, Ref { reference: "#/definitions/WorkspaceInheritance", title: None, description: None, deprecated: None }] }, default: None, deprecated: None }) } }, Key("documentation"): PropertySchema { key_range: 474:8..474:23, property_schema: Resolved { schema_url: None, value: AnyOf(AnyOfSchema { title: Some("Documentation"), description: Some("\nThe `documentation` field specifies a URL to a website hosting the crate's\ndocumentation. If no URL is specified in the manifest file, [crates.io](https://crates.io) will\nautomatically link your crate to the corresponding [docs.rs](https://docs.rs) page.\n\n```toml\n[package]\n# ...\ndocumentation = \"https://docs.rs/bitflags\"\n```\n"), range: 474:25..485:9, schemas: RwLock { data: [Ref { reference: "#/definitions/Documentation", title: None, description: None, deprecated: None }, Ref { reference: "#/definitions/WorkspaceInheritance", title: None, description: None, deprecated: None }] }, default: None, deprecated: None }) } }, Key("readme"): PropertySchema { key_range: 486:8..486:16, property_schema: Resolved { schema_url: None, value: AnyOf(AnyOfSchema { title: Some("Readme"), description: Some("The `readme` field should be the path to a file in the package root (relative\nto this `Cargo.toml`) that contains general information about the package.\nThis file will be transferred to the registry when you publish. [crates.io](https://crates.io)\nwill interpret it as Markdown and render it on the crate's page.\n\n```toml\n[package]\n# ...\nreadme = \"README.md\"\n```\n\nIf no value is specified for this field, and a file named `README.md`,\n`README.txt` or `README` exists in the package root, then the name of that\nfile will be used. You can suppress this behavior by setting this field to\n`false`. If the field is set to `true`, a default value of `README.md` will\nbe assumed.\n"), range: 486:18..497:9, schemas: RwLock { data: [Ref { reference: "#/definitions/Readme", title: None, description: None, deprecated: None }, Ref { reference: "#/definitions/WorkspaceInheritance", title: None, description: None, deprecated: None }] }, default: None, deprecated: None }) } }, Key("homepage"): PropertySchema { key_range: 498:8..498:18, property_schema: Resolved { schema_url: None, value: AnyOf(AnyOfSchema { title: Some("Homepage"), description: Some("The `homepage` field should be a URL to a site that is the home page for your\npackage.\n\n```toml\n[package]\n# ...\nhomepage = \"https://serde.rs/\"\n```"), range: 498:20..509:9, schemas: RwLock { data: [Ref { reference: "#/definitions/Homepage", title: None, description: None, deprecated: None }, Ref { reference: "#/definitions/WorkspaceInheritance", title: None, description: None, deprecated: None }] }, default: None, deprecated: None }) } }, Key("repository"): PropertySchema { key_range: 510:8..510:20, property_schema: Resolved { schema_url: None, value: AnyOf(AnyOfSchema { title: Some("Repository"), description: Some("The `repository` field should be a URL to the source repository for your\npackage.\n\n```toml\n[package]\n# ...\nrepository = \"https://github.com/rust-lang/cargo/\"\n```"), range: 510:22..521:9, schemas: RwLock { data: [Ref { reference: "#/definitions/Repository", title: None, description: None, deprecated: None }, Ref { reference: "#/definitions/WorkspaceInheritance", title: None, description: None, deprecated: None }] }, default: None, deprecated: None }) } }, Key("license"): PropertySchema { key_range: 522:8..522:17, property_schema: Resolved { schema_url: None, value: AnyOf(AnyOfSchema { title: Some("License"), description: Some("The `license` field contains the name of the software license that the package\nis released under.\n\n[crates.io](https://crates.io/) interprets the `license` field as an [SPDX 2.1 license\nexpression](https://spdx.org/spdx-specification-21-web-version#h.jxpfx0ykyb60). The name must be a known license\nfrom the [SPDX license list 3.6](https://github.com/spdx/license-list-data/tree/v3.6). Parentheses are not\ncurrently supported. See the [SPDX site](https://spdx.org/license-list) for more information.\n\nSPDX license expressions support AND and OR operators to combine multiple\nlicenses.\n\n```toml\n[package]\n# ...\nlicense = \"MIT OR Apache-2.0\"\n```\n\nUsing `OR` indicates the user may choose either license. Using `AND` indicates\nthe user must comply with both licenses simultaneously. The `WITH` operator\nindicates a license with a special exception. Some examples:\n\n* `MIT OR Apache-2.0`\n* `LGPL-2.1 AND MIT AND BSD-2-Clause`\n* `GPL-2.0+ WITH Bison-exception-2.2`\n\nIf a package is using a nonstandard license, then the `license-file` field may\nbe specified in lieu of the `license` field."), range: 522:19..533:9, schemas: RwLock { data: [Ref { reference: "#/definitions/License", title: None, description: None, deprecated: None }, Ref { reference: "#/definitions/WorkspaceInheritance", title: None, description: None, deprecated: None }] }, default: None, deprecated: None }) } }, Key("license-file"): PropertySchema { key_range: 534:8..534:22, property_schema: Resolved { schema_url: None, value: AnyOf(AnyOfSchema { title: Some("LicenseFile"), description: Some("The `license-file` field contains the path to a file\ncontaining the text of the license (relative to this `Cargo.toml`).\n\n```toml\n[package]\n# ...\nlicense-file = \"LICENSE.txt\"\n```\n\n> **Note**: [crates.io](https://crates.io) requires either `license` or `license-file` to be set."), range: 534:24..545:9, schemas: RwLock { data: [Ref { reference: "#/definitions/LicenseFile", title: None, description: None, deprecated: None }, Ref { reference: "#/definitions/WorkspaceInheritance", title: None, description: None, deprecated: None }] }, default: None, deprecated: None }) } }, Key("keywords"): PropertySchema { key_range: 546:8..546:18, property_schema: Resolved { schema_url: None, value: AnyOf(AnyOfSchema { title: Some("Keywords"), description: Some("The `keywords` field is an array of strings that describe this package. This\ncan help when searching for the package on a registry, and you may choose any\nwords that would help someone find this crate.\n\n```toml\n[package]\n# ...\nkeywords = [\"gamedev\", \"graphics\"]\n```\n\n> **Note**: [crates.io](https://crates.io) has a maximum of 5 keywords. Each keyword must be\n> ASCII text, start with a letter, and only contain letters, numbers, `_` or\n> `-`, and have at most 20 characters."), range: 546:20..557:9, schemas: RwLock { data: [Ref { reference: "#/definitions/Keywords", title: None, description: None, deprecated: None }, Ref { reference: "#/definitions/WorkspaceInheritance", title: None, description: None, deprecated: None }] }, default: None, deprecated: None }) } }, Key("categories"): PropertySchema { key_range: 558:8..558:20, property_schema: Resolved { schema_url: None, value: AnyOf(AnyOfSchema { title: Some("Categories"), description: Some("The `categories` field is an array of strings of the categories this package\nbelongs to.\n\n```toml\ncategories = [\"command-line-utilities\", \"development-tools::cargo-plugins\"]\n```\n\n> **Note**: [crates.io](https://crates.io) has a maximum of 5 categories. Each category should\n> match one of the strings available at https://crates.io/category_slugs, and\n> must match exactly."), range: 558:22..569:9, schemas: RwLock { data: [Ref { reference: "#/definitions/Categories", title: None, description: None, deprecated: None }, Ref { reference: "#/definitions/WorkspaceInheritance", title: None, description: None, deprecated: None }] }, default: None, deprecated: None }) } }, Key("workspace"): PropertySchema { key_range: 570:8..570:19, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("The `workspace` field can be used to configure the workspace that this package\nwill be a member of. If not specified this will be inferred as the first\nCargo.toml with `[workspace]` upwards in the filesystem. Setting this is\nuseful if the member is not inside a subdirectory of the workspace root.\n\n```toml\n[package]\n# ...\nworkspace = \"path/to/workspace/root\"\n```\n\nThis field cannot be specified if the manifest already has a `[workspace]`\ntable defined. That is, a crate cannot both be a root crate in a workspace\n(contain `[workspace]`) and also be a member crate of another workspace\n(contain `package.workspace`).\n\nFor more information, see the [workspaces chapter](https://doc.rust-lang.org/cargo/reference/workspaces.html)."), range: 570:21..578:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("build"): PropertySchema { key_range: 579:8..579:15, property_schema: Ref { reference: "#/definitions/Build", title: None, description: None, deprecated: None } }, Key("links"): PropertySchema { key_range: 582:8..582:15, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("The `links` field specifies the name of a native library that is being linked\nto. More information can be found in the [`links`](https://doc.rust-lang.org/cargo/reference/build-scripts.html#the-links-manifest-key) section of the build\nscript guide.\n\n```toml\n[package]\n# ...\nlinks = \"foo\"\n```"), range: 582:17..590:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("exclude"): PropertySchema { key_range: 591:8..591:17, property_schema: Resolved { schema_url: None, value: AnyOf(AnyOfSchema { title: Some("Exclude"), description: Some("You can explicitly specify that a set of file patterns should be ignored or\nincluded for the purposes of packaging. The patterns specified in the\n`exclude` field identify a set of files that are not included, and the\npatterns in `include` specify files that are explicitly included.\n\nThe patterns should be [gitignore](https://git-scm.com/docs/gitignore)-style patterns. Briefly:\n\n- `foo` matches any file or directory with the name `foo` anywhere in the\n  package. This is equivalent to the pattern `**/foo`.\n- `/foo` matches any file or directory with the name `foo` only in the root of\n  the package.\n- `foo/` matches any *directory* with the name `foo` anywhere in the package.\n- Common glob patterns like `*`, `?`, and `[]` are supported:\n  - `*` matches zero or more characters except `/`.  For example, `*.html`\n    matches any file or directory with the `.html` extension anywhere in the\n    package.\n  - `?` matches any character except `/`. For example, `foo?` matches `food`,\n    but not `foo`.\n  - `[]` allows for matching a range of characters. For example, `[ab]`\n    matches either `a` or `b`. `[a-z]` matches letters a through z.\n- `**/` prefix matches in any directory. For example, `**/foo/bar` matches the\n  file or directory `bar` anywhere that is directly under directory `foo`.\n- `/**` suffix matches everything inside. For example, `foo/**` matches all\n  files inside directory `foo`, including all files in subdirectories below\n  `foo`.\n- `/**/` matches zero or more directories. For example, `a/**/b` matches\n  `a/b`, `a/x/b`, `a/x/y/b`, and so on.\n- `!` prefix negates a pattern. For example, a pattern of `src/**.rs` and\n  `!foo.rs` would match all files with the `.rs` extension inside the `src`\n  directory, except for any file named `foo.rs`.\n\nIf git is being used for a package, the `exclude` field will be seeded with\nthe `gitignore` settings from the repository.\n\n```toml\n[package]\n# ...\nexclude = [\"build/**/*.o\", \"doc/**/*.html\"]\n```\n\n```toml\n[package]\n# ...\ninclude = [\"src/**/*\", \"Cargo.toml\"]\n```\n\nThe options are mutually exclusive: setting `include` will override an\n`exclude`. Note that `include` must be an exhaustive list of files as otherwise\nnecessary source files may not be included. The package's `Cargo.toml` is\nautomatically included.\n\nThe include/exclude list is also used for change tracking in some situations.\nFor targets built with `rustdoc`, it is used to determine the list of files to\ntrack to determine if the target should be rebuilt. If the package has a\n[build script](https://doc.rust-lang.org/cargo/reference/build-scripts.html) that does not emit any `rerun-if-*` directives, then the\ninclude/exclude list is used for tracking if the build script should be re-run\nif any of those files change."), range: 591:19..602:9, schemas: RwLock { data: [Ref { reference: "#/definitions/Exclude", title: None, description: None, deprecated: None }, Ref { reference: "#/definitions/WorkspaceInheritance", title: None, description: None, deprecated: None }] }, default: None, deprecated: None }) } }, Key("include"): PropertySchema { key_range: 603:8..603:17, property_schema: Resolved { schema_url: None, value: AnyOf(AnyOfSchema { title: None, description: Some("You can explicitly specify that a set of file patterns should be ignored or\nincluded for the purposes of packaging. The patterns specified in the\n`exclude` field identify a set of files that are not included, and the\npatterns in `include` specify files that are explicitly included.\n\nThe patterns should be [gitignore](https://git-scm.com/docs/gitignore)-style patterns. Briefly:\n\n- `foo` matches any file or directory with the name `foo` anywhere in the\n  package. This is equivalent to the pattern `**/foo`.\n- `/foo` matches any file or directory with the name `foo` only in the root of\n  the package.\n- `foo/` matches any *directory* with the name `foo` anywhere in the package.\n- Common glob patterns like `*`, `?`, and `[]` are supported:\n  - `*` matches zero or more characters except `/`.  For example, `*.html`\n    matches any file or directory with the `.html` extension anywhere in the\n    package.\n  - `?` matches any character except `/`. For example, `foo?` matches `food`,\n    but not `foo`.\n  - `[]` allows for matching a range of characters. For example, `[ab]`\n    matches either `a` or `b`. `[a-z]` matches letters a through z.\n- `**/` prefix matches in any directory. For example, `**/foo/bar` matches the\n  file or directory `bar` anywhere that is directly under directory `foo`.\n- `/**` suffix matches everything inside. For example, `foo/**` matches all\n  files inside directory `foo`, including all files in subdirectories below\n  `foo`.\n- `/**/` matches zero or more directories. For example, `a/**/b` matches\n  `a/b`, `a/x/b`, `a/x/y/b`, and so on.\n- `!` prefix negates a pattern. For example, a pattern of `src/**.rs` and\n  `!foo.rs` would match all files with the `.rs` extension inside the `src`\n  directory, except for any file named `foo.rs`.\n\nIf git is being used for a package, the `exclude` field will be seeded with\nthe `gitignore` settings from the repository.\n\n```toml\n[package]\n# ...\nexclude = [\"build/**/*.o\", \"doc/**/*.html\"]\n```\n\n```toml\n[package]\n# ...\ninclude = [\"src/**/*\", \"Cargo.toml\"]\n```\n\nThe options are mutually exclusive: setting `include` will override an\n`exclude`. Note that `include` must be an exhaustive list of files as otherwise\nnecessary source files may not be included. The package's `Cargo.toml` is\nautomatically included.\n\nThe include/exclude list is also used for change tracking in some situations.\nFor targets built with `rustdoc`, it is used to determine the list of files to\ntrack to determine if the target should be rebuilt. If the package has a\n[build script](https://doc.rust-lang.org/cargo/reference/build-scripts.html) that does not emit any `rerun-if-*` directives, then the\ninclude/exclude list is used for tracking if the build script should be re-run\nif any of those files change."), range: 603:19..613:9, schemas: RwLock { data: [Ref { reference: "#/definitions/Include", title: None, description: None, deprecated: None }, Ref { reference: "#/definitions/WorkspaceInheritance", title: None, description: None, deprecated: None }] }, default: None, deprecated: None }) } }, Key("publish"): PropertySchema { key_range: 614:8..614:17, property_schema: Resolved { schema_url: None, value: AnyOf(AnyOfSchema { title: Some("Publish"), description: Some("The `publish` field can be used to prevent a package from being published to a package registry (like *crates.io*) by mistake, for instance to keep a package\nprivate in a company.\n\n```toml\n[package]\n# ...\npublish = false\n```\n\nThe value may also be an array of strings which are registry names that are\nallowed to be published to.\n\n```toml\n[package]\n# ...\npublish = [\"some-registry-name\"]\n```"), range: 614:19..625:9, schemas: RwLock { data: [Ref { reference: "#/definitions/Publish", title: None, description: None, deprecated: None }, Ref { reference: "#/definitions/WorkspaceInheritance", title: None, description: None, deprecated: None }] }, default: None, deprecated: None }) } }, Key("metadata"): PropertySchema { key_range: 626:8..626:18, property_schema: Resolved { schema_url: None, value: Table(TableSchema { title: None, description: Some("Cargo by default will warn about unused keys in `Cargo.toml` to assist in\ndetecting typos and such. The `package.metadata` table, however, is completely\nignored by Cargo and will not be warned about. This section can be used for\ntools which would like to store package configuration in `Cargo.toml`. For\nexample:\n\n```toml\n[package]\nname = \"...\"\n# ...\n\n# Metadata used when generating an Android APK, for example.\n[package.metadata.android]\npackage-name = \"my-awesome-android-app\"\nassets = \"path/to/static\"\n```\n"), range: 626:20..641:9, properties: RwLock { data: {Key("playdate"): PropertySchema { key_range: 631:12..631:22, property_schema: Ref { reference: "#/definitions/PlaydateMetadata", title: None, description: None, deprecated: None } }} }, pattern_properties: None, additional_properties: Some(true), additional_property_schema: None, required: None, min_properties: None, max_properties: None, keys_order: Some(Schema), deprecated: None }) } }, Key("default-run"): PropertySchema { key_range: 642:8..642:21, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("The `default-run` field in the `[package]` section of the manifest can be used\nto specify a default binary picked by [`cargo run`](https://doc.rust-lang.org/cargo/commands/cargo-run.html). For example, when there is\nboth `src/bin/a.rs` and `src/bin/b.rs`:\n\n```toml\n[package]\ndefault-run = \"a\"\n```"), range: 642:23..650:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("autobins"): PropertySchema { key_range: 651:8..651:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Disable automatic discovery of `bin` targets.\n\nDisabling automatic discovery should only be needed for specialized\nsituations. For example, if you have a library where you want a *module* named\n`bin`, this would present a problem because Cargo would usually attempt to\ncompile anything in the `bin` directory as an executable. Here is a sample\nlayout of this scenario:\n\n```\n├── Cargo.toml\n└── src\n    ├── lib.rs\n    └── bin\n        └── mod.rs\n```\n\nTo prevent Cargo from inferring `src/bin/mod.rs` as an executable, set\nthis to `false` to disable auto-discovery."), range: 651:20..659:9, default: None, enumerate: None, deprecated: None }) } }, Key("autoexamples"): PropertySchema { key_range: 660:8..660:22, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Disable automatic discovery of `example` targets.\n\nDisabling automatic discovery should only be needed for specialized\nsituations. For example, if you have a library where you want a *module* named\n`bin`, this would present a problem because Cargo would usually attempt to\ncompile anything in the `bin` directory as an executable. Here is a sample\nlayout of this scenario:\n\n```\n├── Cargo.toml\n└── src\n    ├── lib.rs\n    └── bin\n        └── mod.rs\n```\n"), range: 660:24..668:9, default: None, enumerate: None, deprecated: None }) } }, Key("autotests"): PropertySchema { key_range: 669:8..669:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Disable automatic discovery of `test` targets.\n\nDisabling automatic discovery should only be needed for specialized\nsituations. For example, if you have a library where you want a *module* named\n`bin`, this would present a problem because Cargo would usually attempt to\ncompile anything in the `bin` directory as an executable. Here is a sample\nlayout of this scenario:\n\n```\n├── Cargo.toml\n└── src\n    ├── lib.rs\n    └── bin\n        └── mod.rs\n```\n"), range: 669:21..677:9, default: None, enumerate: None, deprecated: None }) } }, Key("autobenches"): PropertySchema { key_range: 678:8..678:21, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Disable automatic discovery of `bench` targets.\n\nDisabling automatic discovery should only be needed for specialized\nsituations. For example, if you have a library where you want a *module* named\n`bin`, this would present a problem because Cargo would usually attempt to\ncompile anything in the `bin` directory as an executable. Here is a sample\nlayout of this scenario:\n\n```\n├── Cargo.toml\n└── src\n    ├── lib.rs\n    └── bin\n        └── mod.rs\n```\n"), range: 678:23..686:9, default: None, enumerate: None, deprecated: None }) } }, Key("resolver"): PropertySchema { key_range: 687:8..687:18, property_schema: Ref { reference: "#/definitions/Resolver", title: None, description: None, deprecated: None } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: Some(["name"]), min_properties: None, max_properties: None, keys_order: Some(Schema), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: property_schema = Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("The package name is an identifier used to refer to the package. It is used\nwhen listed as a dependency in another package, and as the default name of\ninferred lib and bin targets.\n\nThe name must use only [alphanumeric](https://doc.rust-lang.org/std/primitive.char.html#method.is_alphanumeric) characters or `-` or `_`, and cannot be empty.\nNote that [`cargo new`](https://doc.rust-lang.org/cargo/commands/cargo-new.html) and [`cargo init`](https://doc.rust-lang.org/cargo/commands/cargo-init.html) impose some additional restrictions on\nthe package name, such as enforcing that it is a valid Rust identifier and not\na keyword. [crates.io](https://crates.io) imposes even more restrictions, such as\nenforcing only ASCII characters, not a reserved name, not a special Windows\nname such as \"nul\", is not too long, etc."), range: 405:16..413:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:133[0m
[1;35m  Trace[0m: self = String(String { kind: BasicString(BasicString { syntax: BASIC_STRING @17..28 @2:1..2:12 }), value: "tombi-cli" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: String(StringSchema { title: None, description: Some("The package name is an identifier used to refer to the package. It is used\nwhen listed as a dependency in another package, and as the default name of\ninferred lib and bin targets.\n\nThe name must use only [alphanumeric](https://doc.rust-lang.org/std/primitive.char.html#method.is_alphanumeric) characters or `-` or `_`, and cannot be empty.\nNote that [`cargo new`](https://doc.rust-lang.org/cargo/commands/cargo-new.html) and [`cargo init`](https://doc.rust-lang.org/cargo/commands/cargo-init.html) impose some additional restrictions on\nthe package name, such as enforcing that it is a valid Rust identifier and not\na keyword. [crates.io](https://crates.io) imposes even more restrictions, such as\nenforcing only ASCII characters, not a reserved name, not a special Windows\nname such as \"nul\", is not too long, etc."), range: 405:16..413:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: property_schema = Resolved { schema_url: None, value: AnyOf(AnyOfSchema { title: Some("Semantic Version"), description: Some("Cargo bakes in the concept of [Semantic Versioning](https://semver.org/), so make sure you follow some basic rules:\n\n* Before you reach 1.0.0, anything goes, but if you make breaking changes,\n    increment the minor version. In Rust, breaking changes include adding fields to\n    structs or variants to enums.\n* After 1.0.0, only make breaking changes when you increment the major version.\n    Don't break the build.\n* After 1.0.0, don't add any new public API (no new `pub` anything) in patch-level\n    versions. Always increment the minor version if you add any new `pub` structs,\n    traits, fields, types, functions, methods or anything else.\n* Use version numbers with three numeric parts such as 1.0.0 rather than 1.0."), range: 414:19..425:9, schemas: RwLock { data: [Ref { reference: "#/definitions/SemVer", title: None, description: None, deprecated: None }, Ref { reference: "#/definitions/WorkspaceInheritance", title: None, description: None, deprecated: None }] }, default: None, deprecated: None }) }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:133[0m
[1;35m  Trace[0m: self = Table(Table { kind: KeyValue, range: 2:0..2:24, symbol_range: 2:0..2:24, key_values: {Key { kind: BareKey, value: "workspace", range: 2:0..2:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @49..53 @3:1..3:5 } })} })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: AnyOf(AnyOfSchema { title: Some("Semantic Version"), description: Some("Cargo bakes in the concept of [Semantic Versioning](https://semver.org/), so make sure you follow some basic rules:\n\n* Before you reach 1.0.0, anything goes, but if you make breaking changes,\n    increment the minor version. In Rust, breaking changes include adding fields to\n    structs or variants to enums.\n* After 1.0.0, only make breaking changes when you increment the major version.\n    Don't break the build.\n* After 1.0.0, don't add any new public API (no new `pub` anything) in patch-level\n    versions. Always increment the minor version if you add any new `pub` structs,\n    traits, fields, types, functions, methods or anything else.\n* Use version numbers with three numeric parts such as 1.0.0 rather than 1.0."), range: 414:19..425:9, schemas: RwLock { data: [Resolved { schema_url: None, value: String(StringSchema { title: Some("Semantic Version"), description: Some("Cargo bakes in the concept of [Semantic Versioning](https://semver.org/), so make sure you follow some basic rules:\n\n* Before you reach 1.0.0, anything goes, but if you make breaking changes,\n    increment the minor version. In Rust, breaking changes include adding fields to\n    structs or variants to enums.\n* After 1.0.0, only make breaking changes when you increment the major version.\n    Don't break the build.\n* After 1.0.0, don't add any new public API (no new `pub` anything) in patch-level\n    versions. Always increment the minor version if you add any new `pub` structs,\n    traits, fields, types, functions, methods or anything else.\n* Use version numbers with three numeric parts such as 1.0.0 rather than 1.0."), range: 1133:14..1144:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("0.1.0"), deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: None, description: None, range: 1662:28..1675:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 1665:8..1665:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: Some("Workspace"), description: Some("The `workspace` field allow keys to be inherited by defining them in the member package with `{key}.workspace = true`"), range: 1665:21..1670:9, default: None, enumerate: Some([true]), deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: Some(["workspace"]), min_properties: None, max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 2:0..2:24, symbol_range: 2:0..2:24, key_values: {Key { kind: BareKey, value: "workspace", range: 2:0..2:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @49..53 @3:1..3:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("package"), Key("version")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: AnyOf(AnyOfSchema { title: Some("Semantic Version"), description: Some("Cargo bakes in the concept of [Semantic Versioning](https://semver.org/), so make sure you follow some basic rules:\n\n* Before you reach 1.0.0, anything goes, but if you make breaking changes,\n    increment the minor version. In Rust, breaking changes include adding fields to\n    structs or variants to enums.\n* After 1.0.0, only make breaking changes when you increment the major version.\n    Don't break the build.\n* After 1.0.0, don't add any new public API (no new `pub` anything) in patch-level\n    versions. Always increment the minor version if you add any new `pub` structs,\n    traits, fields, types, functions, methods or anything else.\n* Use version numbers with three numeric parts such as 1.0.0 rather than 1.0."), range: 414:19..425:9, schemas: RwLock { data: [Resolved { schema_url: None, value: String(StringSchema { title: Some("Semantic Version"), description: Some("Cargo bakes in the concept of [Semantic Versioning](https://semver.org/), so make sure you follow some basic rules:\n\n* Before you reach 1.0.0, anything goes, but if you make breaking changes,\n    increment the minor version. In Rust, breaking changes include adding fields to\n    structs or variants to enums.\n* After 1.0.0, only make breaking changes when you increment the major version.\n    Don't break the build.\n* After 1.0.0, don't add any new public API (no new `pub` anything) in patch-level\n    versions. Always increment the minor version if you add any new `pub` structs,\n    traits, fields, types, functions, methods or anything else.\n* Use version numbers with three numeric parts such as 1.0.0 rather than 1.0."), range: 1133:14..1144:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("0.1.0"), deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: None, description: None, range: 1662:28..1675:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 1665:8..1665:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: Some("Workspace"), description: Some("The `workspace` field allow keys to be inherited by defining them in the member package with `{key}.workspace = true`"), range: 1665:21..1670:9, default: None, enumerate: Some([true]), deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: Some(["workspace"]), min_properties: None, max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: value = Table { kind: KeyValue, range: 2:0..2:24, symbol_range: 2:0..2:24, key_values: {Key { kind: BareKey, value: "workspace", range: 2:0..2:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @49..53 @3:1..3:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/any_of.rs:21[0m
[1;35m  Trace[0m: any_of_schema = AnyOfSchema { title: Some("Semantic Version"), description: Some("Cargo bakes in the concept of [Semantic Versioning](https://semver.org/), so make sure you follow some basic rules:\n\n* Before you reach 1.0.0, anything goes, but if you make breaking changes,\n    increment the minor version. In Rust, breaking changes include adding fields to\n    structs or variants to enums.\n* After 1.0.0, only make breaking changes when you increment the major version.\n    Don't break the build.\n* After 1.0.0, don't add any new public API (no new `pub` anything) in patch-level\n    versions. Always increment the minor version if you add any new `pub` structs,\n    traits, fields, types, functions, methods or anything else.\n* Use version numbers with three numeric parts such as 1.0.0 rather than 1.0."), range: 414:19..425:9, schemas: RwLock { data: [Resolved { schema_url: None, value: String(StringSchema { title: Some("Semantic Version"), description: Some("Cargo bakes in the concept of [Semantic Versioning](https://semver.org/), so make sure you follow some basic rules:\n\n* Before you reach 1.0.0, anything goes, but if you make breaking changes,\n    increment the minor version. In Rust, breaking changes include adding fields to\n    structs or variants to enums.\n* After 1.0.0, only make breaking changes when you increment the major version.\n    Don't break the build.\n* After 1.0.0, don't add any new public API (no new `pub` anything) in patch-level\n    versions. Always increment the minor version if you add any new `pub` structs,\n    traits, fields, types, functions, methods or anything else.\n* Use version numbers with three numeric parts such as 1.0.0 rather than 1.0."), range: 1133:14..1144:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("0.1.0"), deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: None, description: None, range: 1662:28..1675:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 1665:8..1665:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: Some("Workspace"), description: Some("The `workspace` field allow keys to be inherited by defining them in the member package with `{key}.workspace = true`"), range: 1665:21..1670:9, default: None, enumerate: Some([true]), deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: Some(["workspace"]), min_properties: None, max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }
    [90mat[0m [36mcrates/tombi-validator/src/validate/any_of.rs:22[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 2:0..2:24, symbol_range: 2:0..2:24, key_values: {Key { kind: BareKey, value: "workspace", range: 2:0..2:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @49..53 @3:1..3:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("package"), Key("version")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Table(TableSchema { title: None, description: None, range: 1662:28..1675:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 1665:8..1665:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: Some("Workspace"), description: Some("The `workspace` field allow keys to be inherited by defining them in the member package with `{key}.workspace = true`"), range: 1665:21..1670:9, default: None, enumerate: Some([true]), deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: Some(["workspace"]), min_properties: None, max_properties: None, keys_order: Some(Schema), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: property_schema = Resolved { schema_url: None, value: Boolean(BooleanSchema { title: Some("Workspace"), description: Some("The `workspace` field allow keys to be inherited by defining them in the member package with `{key}.workspace = true`"), range: 1665:21..1670:9, default: None, enumerate: Some([true]), deprecated: None }) }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:133[0m
[1;35m  Trace[0m: self = Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @49..53 @3:1..3:5 } })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Boolean(BooleanSchema { title: Some("Workspace"), description: Some("The `workspace` field allow keys to be inherited by defining them in the member package with `{key}.workspace = true`"), range: 1665:21..1670:9, default: None, enumerate: Some([true]), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: property_schema = Resolved { schema_url: None, value: AnyOf(AnyOfSchema { title: Some("Authors"), description: Some("The `authors` field lists people or organizations that are considered the\n\"authors\" of the package. The exact meaning is open to interpretation — it may\nlist the original or primary authors, current maintainers, or owners of the\npackage. These names will be listed on the crate's page on\n[crates.io](https://crates.io). An optional email address may be included within angled\nbrackets at the end of each author.\n\n> **Note**: [crates.io](https://crates.io) requires at least one author to be listed."), range: 426:19..437:9, schemas: RwLock { data: [Ref { reference: "#/definitions/Authors", title: None, description: None, deprecated: None }, Ref { reference: "#/definitions/WorkspaceInheritance", title: None, description: None, deprecated: None }] }, default: None, deprecated: None }) }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:133[0m
[1;35m  Trace[0m: self = Table(Table { kind: KeyValue, range: 3:0..3:24, symbol_range: 3:0..3:24, key_values: {Key { kind: BareKey, value: "workspace", range: 3:0..3:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @74..78 @4:1..4:5 } })} })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: AnyOf(AnyOfSchema { title: Some("Authors"), description: Some("The `authors` field lists people or organizations that are considered the\n\"authors\" of the package. The exact meaning is open to interpretation — it may\nlist the original or primary authors, current maintainers, or owners of the\npackage. These names will be listed on the crate's page on\n[crates.io](https://crates.io). An optional email address may be included within angled\nbrackets at the end of each author.\n\n> **Note**: [crates.io](https://crates.io) requires at least one author to be listed."), range: 426:19..437:9, schemas: RwLock { data: [Resolved { schema_url: None, value: Array(ArraySchema { title: Some("Authors"), description: Some("The `authors` field lists people or organizations that are considered the\n\"authors\" of the package. The exact meaning is open to interpretation — it may\nlist the original or primary authors, current maintainers, or owners of the\npackage. These names will be listed on the crate's page on\n[crates.io](https://crates.io). An optional email address may be included within angled\nbrackets at the end of each author.\n\n> **Note**: [crates.io](https://crates.io) requires at least one author to be listed."), range: 1493:15..1512:5, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("The `authors` field lists people or organizations that are considered the\n\"authors\" of the package. The exact meaning is open to interpretation — it may\nlist the original or primary authors, current maintainers, or owners of the\npackage. These names will be listed on the crate's page on\n[crates.io](https://crates.io). An optional email address may be included within angled\nbrackets at the end of each author.\n\n> **Note**: [crates.io](https://crates.io) requires at least one author to be listed."), range: 1497:15..1505:7, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: None, description: None, range: 1662:28..1675:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 1665:8..1665:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: Some("Workspace"), description: Some("The `workspace` field allow keys to be inherited by defining them in the member package with `{key}.workspace = true`"), range: 1665:21..1670:9, default: None, enumerate: Some([true]), deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: Some(["workspace"]), min_properties: None, max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 3:0..3:24, symbol_range: 3:0..3:24, key_values: {Key { kind: BareKey, value: "workspace", range: 3:0..3:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @74..78 @4:1..4:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("package"), Key("authors")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: AnyOf(AnyOfSchema { title: Some("Authors"), description: Some("The `authors` field lists people or organizations that are considered the\n\"authors\" of the package. The exact meaning is open to interpretation — it may\nlist the original or primary authors, current maintainers, or owners of the\npackage. These names will be listed on the crate's page on\n[crates.io](https://crates.io). An optional email address may be included within angled\nbrackets at the end of each author.\n\n> **Note**: [crates.io](https://crates.io) requires at least one author to be listed."), range: 426:19..437:9, schemas: RwLock { data: [Resolved { schema_url: None, value: Array(ArraySchema { title: Some("Authors"), description: Some("The `authors` field lists people or organizations that are considered the\n\"authors\" of the package. The exact meaning is open to interpretation — it may\nlist the original or primary authors, current maintainers, or owners of the\npackage. These names will be listed on the crate's page on\n[crates.io](https://crates.io). An optional email address may be included within angled\nbrackets at the end of each author.\n\n> **Note**: [crates.io](https://crates.io) requires at least one author to be listed."), range: 1493:15..1512:5, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("The `authors` field lists people or organizations that are considered the\n\"authors\" of the package. The exact meaning is open to interpretation — it may\nlist the original or primary authors, current maintainers, or owners of the\npackage. These names will be listed on the crate's page on\n[crates.io](https://crates.io). An optional email address may be included within angled\nbrackets at the end of each author.\n\n> **Note**: [crates.io](https://crates.io) requires at least one author to be listed."), range: 1497:15..1505:7, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: None, description: None, range: 1662:28..1675:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 1665:8..1665:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: Some("Workspace"), description: Some("The `workspace` field allow keys to be inherited by defining them in the member package with `{key}.workspace = true`"), range: 1665:21..1670:9, default: None, enumerate: Some([true]), deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: Some(["workspace"]), min_properties: None, max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: value = Table { kind: KeyValue, range: 3:0..3:24, symbol_range: 3:0..3:24, key_values: {Key { kind: BareKey, value: "workspace", range: 3:0..3:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @74..78 @4:1..4:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/any_of.rs:21[0m
[1;35m  Trace[0m: any_of_schema = AnyOfSchema { title: Some("Authors"), description: Some("The `authors` field lists people or organizations that are considered the\n\"authors\" of the package. The exact meaning is open to interpretation — it may\nlist the original or primary authors, current maintainers, or owners of the\npackage. These names will be listed on the crate's page on\n[crates.io](https://crates.io). An optional email address may be included within angled\nbrackets at the end of each author.\n\n> **Note**: [crates.io](https://crates.io) requires at least one author to be listed."), range: 426:19..437:9, schemas: RwLock { data: [Resolved { schema_url: None, value: Array(ArraySchema { title: Some("Authors"), description: Some("The `authors` field lists people or organizations that are considered the\n\"authors\" of the package. The exact meaning is open to interpretation — it may\nlist the original or primary authors, current maintainers, or owners of the\npackage. These names will be listed on the crate's page on\n[crates.io](https://crates.io). An optional email address may be included within angled\nbrackets at the end of each author.\n\n> **Note**: [crates.io](https://crates.io) requires at least one author to be listed."), range: 1493:15..1512:5, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("The `authors` field lists people or organizations that are considered the\n\"authors\" of the package. The exact meaning is open to interpretation — it may\nlist the original or primary authors, current maintainers, or owners of the\npackage. These names will be listed on the crate's page on\n[crates.io](https://crates.io). An optional email address may be included within angled\nbrackets at the end of each author.\n\n> **Note**: [crates.io](https://crates.io) requires at least one author to be listed."), range: 1497:15..1505:7, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: None, description: None, range: 1662:28..1675:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 1665:8..1665:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: Some("Workspace"), description: Some("The `workspace` field allow keys to be inherited by defining them in the member package with `{key}.workspace = true`"), range: 1665:21..1670:9, default: None, enumerate: Some([true]), deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: Some(["workspace"]), min_properties: None, max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }
    [90mat[0m [36mcrates/tombi-validator/src/validate/any_of.rs:22[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 3:0..3:24, symbol_range: 3:0..3:24, key_values: {Key { kind: BareKey, value: "workspace", range: 3:0..3:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @74..78 @4:1..4:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("package"), Key("authors")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Table(TableSchema { title: None, description: None, range: 1662:28..1675:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 1665:8..1665:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: Some("Workspace"), description: Some("The `workspace` field allow keys to be inherited by defining them in the member package with `{key}.workspace = true`"), range: 1665:21..1670:9, default: None, enumerate: Some([true]), deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: Some(["workspace"]), min_properties: None, max_properties: None, keys_order: Some(Schema), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: property_schema = Resolved { schema_url: None, value: Boolean(BooleanSchema { title: Some("Workspace"), description: Some("The `workspace` field allow keys to be inherited by defining them in the member package with `{key}.workspace = true`"), range: 1665:21..1670:9, default: None, enumerate: Some([true]), deprecated: None }) }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:133[0m
[1;35m  Trace[0m: self = Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @74..78 @4:1..4:5 } })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Boolean(BooleanSchema { title: Some("Workspace"), description: Some("The `workspace` field allow keys to be inherited by defining them in the member package with `{key}.workspace = true`"), range: 1665:21..1670:9, default: None, enumerate: Some([true]), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: property_schema = Resolved { schema_url: None, value: AnyOf(AnyOfSchema { title: Some("Edition"), description: Some("The `edition` key affects which edition your package is compiled with. Cargo\nwill always generate packages via [`cargo new`](https://doc.rust-lang.org/cargo/commands/cargo-new.html) with the `edition` key set to the\nlatest edition. Setting the `edition` key in `[package]` will affect all\ntargets/crates in the package, including test suites, benchmarks, binaries,\nexamples, etc."), range: 438:19..449:9, schemas: RwLock { data: [Ref { reference: "#/definitions/Edition", title: None, description: None, deprecated: None }, Ref { reference: "#/definitions/WorkspaceInheritance", title: None, description: None, deprecated: None }] }, default: None, deprecated: None }) }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:133[0m
[1;35m  Trace[0m: self = Table(Table { kind: KeyValue, range: 4:0..4:24, symbol_range: 4:0..4:24, key_values: {Key { kind: BareKey, value: "workspace", range: 4:0..4:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @99..103 @5:1..5:5 } })} })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: AnyOf(AnyOfSchema { title: Some("Edition"), description: Some("The `edition` key affects which edition your package is compiled with. Cargo\nwill always generate packages via [`cargo new`](https://doc.rust-lang.org/cargo/commands/cargo-new.html) with the `edition` key set to the\nlatest edition. Setting the `edition` key in `[package]` will affect all\ntargets/crates in the package, including test suites, benchmarks, binaries,\nexamples, etc."), range: 438:19..449:9, schemas: RwLock { data: [Resolved { schema_url: None, value: String(StringSchema { title: Some("Edition"), description: Some("The `edition` key affects which edition your package is compiled with. Cargo\nwill always generate packages via [`cargo new`](https://doc.rust-lang.org/cargo/commands/cargo-new.html) with the `edition` key set to the\nlatest edition. Setting the `edition` key in `[package]` will affect all\ntargets/crates in the package, including test suites, benchmarks, binaries,\nexamples, etc."), range: 252:15..262:5, min_length: None, max_length: None, pattern: None, enumerate: Some(["2015", "2018", "2021", "2024"]), default: None, deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: None, description: None, range: 1662:28..1675:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 1665:8..1665:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: Some("Workspace"), description: Some("The `workspace` field allow keys to be inherited by defining them in the member package with `{key}.workspace = true`"), range: 1665:21..1670:9, default: None, enumerate: Some([true]), deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: Some(["workspace"]), min_properties: None, max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 4:0..4:24, symbol_range: 4:0..4:24, key_values: {Key { kind: BareKey, value: "workspace", range: 4:0..4:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @99..103 @5:1..5:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("package"), Key("edition")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: AnyOf(AnyOfSchema { title: Some("Edition"), description: Some("The `edition` key affects which edition your package is compiled with. Cargo\nwill always generate packages via [`cargo new`](https://doc.rust-lang.org/cargo/commands/cargo-new.html) with the `edition` key set to the\nlatest edition. Setting the `edition` key in `[package]` will affect all\ntargets/crates in the package, including test suites, benchmarks, binaries,\nexamples, etc."), range: 438:19..449:9, schemas: RwLock { data: [Resolved { schema_url: None, value: String(StringSchema { title: Some("Edition"), description: Some("The `edition` key affects which edition your package is compiled with. Cargo\nwill always generate packages via [`cargo new`](https://doc.rust-lang.org/cargo/commands/cargo-new.html) with the `edition` key set to the\nlatest edition. Setting the `edition` key in `[package]` will affect all\ntargets/crates in the package, including test suites, benchmarks, binaries,\nexamples, etc."), range: 252:15..262:5, min_length: None, max_length: None, pattern: None, enumerate: Some(["2015", "2018", "2021", "2024"]), default: None, deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: None, description: None, range: 1662:28..1675:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 1665:8..1665:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: Some("Workspace"), description: Some("The `workspace` field allow keys to be inherited by defining them in the member package with `{key}.workspace = true`"), range: 1665:21..1670:9, default: None, enumerate: Some([true]), deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: Some(["workspace"]), min_properties: None, max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: value = Table { kind: KeyValue, range: 4:0..4:24, symbol_range: 4:0..4:24, key_values: {Key { kind: BareKey, value: "workspace", range: 4:0..4:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @99..103 @5:1..5:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/any_of.rs:21[0m
[1;35m  Trace[0m: any_of_schema = AnyOfSchema { title: Some("Edition"), description: Some("The `edition` key affects which edition your package is compiled with. Cargo\nwill always generate packages via [`cargo new`](https://doc.rust-lang.org/cargo/commands/cargo-new.html) with the `edition` key set to the\nlatest edition. Setting the `edition` key in `[package]` will affect all\ntargets/crates in the package, including test suites, benchmarks, binaries,\nexamples, etc."), range: 438:19..449:9, schemas: RwLock { data: [Resolved { schema_url: None, value: String(StringSchema { title: Some("Edition"), description: Some("The `edition` key affects which edition your package is compiled with. Cargo\nwill always generate packages via [`cargo new`](https://doc.rust-lang.org/cargo/commands/cargo-new.html) with the `edition` key set to the\nlatest edition. Setting the `edition` key in `[package]` will affect all\ntargets/crates in the package, including test suites, benchmarks, binaries,\nexamples, etc."), range: 252:15..262:5, min_length: None, max_length: None, pattern: None, enumerate: Some(["2015", "2018", "2021", "2024"]), default: None, deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: None, description: None, range: 1662:28..1675:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 1665:8..1665:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: Some("Workspace"), description: Some("The `workspace` field allow keys to be inherited by defining them in the member package with `{key}.workspace = true`"), range: 1665:21..1670:9, default: None, enumerate: Some([true]), deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: Some(["workspace"]), min_properties: None, max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }
    [90mat[0m [36mcrates/tombi-validator/src/validate/any_of.rs:22[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 4:0..4:24, symbol_range: 4:0..4:24, key_values: {Key { kind: BareKey, value: "workspace", range: 4:0..4:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @99..103 @5:1..5:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("package"), Key("edition")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Table(TableSchema { title: None, description: None, range: 1662:28..1675:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 1665:8..1665:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: Some("Workspace"), description: Some("The `workspace` field allow keys to be inherited by defining them in the member package with `{key}.workspace = true`"), range: 1665:21..1670:9, default: None, enumerate: Some([true]), deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: Some(["workspace"]), min_properties: None, max_properties: None, keys_order: Some(Schema), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: property_schema = Resolved { schema_url: None, value: Boolean(BooleanSchema { title: Some("Workspace"), description: Some("The `workspace` field allow keys to be inherited by defining them in the member package with `{key}.workspace = true`"), range: 1665:21..1670:9, default: None, enumerate: Some([true]), deprecated: None }) }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:133[0m
[1;35m  Trace[0m: self = Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @99..103 @5:1..5:5 } })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Boolean(BooleanSchema { title: Some("Workspace"), description: Some("The `workspace` field allow keys to be inherited by defining them in the member package with `{key}.workspace = true`"), range: 1665:21..1670:9, default: None, enumerate: Some([true]), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: property_schema = Resolved { schema_url: None, value: AnyOf(AnyOfSchema { title: Some("Description"), description: Some("The description is a short blurb about the package. [crates.io](https://crates.io) will display\nthis with your package. This should be plain text (not Markdown).\n\n```toml\n[package]\n# ...\ndescription = \"A short description of my package\"\n```\n\n> **Note**: [crates.io](https://crates.io) requires the `description` to be set."), range: 462:23..473:9, schemas: RwLock { data: [Ref { reference: "#/definitions/Description", title: None, description: None, deprecated: None }, Ref { reference: "#/definitions/WorkspaceInheritance", title: None, description: None, deprecated: None }] }, default: None, deprecated: None }) }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:133[0m
[1;35m  Trace[0m: self = String(String { kind: BasicString(BasicString { syntax: BASIC_STRING @118..151 @6:1..6:34 }), value: "TOML Formatter/Linter CLI Tool." })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: AnyOf(AnyOfSchema { title: Some("Description"), description: Some("The description is a short blurb about the package. [crates.io](https://crates.io) will display\nthis with your package. This should be plain text (not Markdown).\n\n```toml\n[package]\n# ...\ndescription = \"A short description of my package\"\n```\n\n> **Note**: [crates.io](https://crates.io) requires the `description` to be set."), range: 462:23..473:9, schemas: RwLock { data: [Resolved { schema_url: None, value: String(StringSchema { title: Some("Description"), description: Some("The description is a short blurb about the package. [crates.io](https://crates.io) will display\nthis with your package. This should be plain text (not Markdown).\n\n```toml\n[package]\n# ...\ndescription = \"A short description of my package\"\n```\n\n> **Note**: [crates.io](https://crates.io) requires the `description` to be set."), range: 1533:19..1542:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: None, description: None, range: 1662:28..1675:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 1665:8..1665:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: Some("Workspace"), description: Some("The `workspace` field allow keys to be inherited by defining them in the member package with `{key}.workspace = true`"), range: 1665:21..1670:9, default: None, enumerate: Some([true]), deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: Some(["workspace"]), min_properties: None, max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: value = String { kind: BasicString(BasicString { syntax: BASIC_STRING @118..151 @6:1..6:34 }), value: "TOML Formatter/Linter CLI Tool." }
    [90mat[0m [36mcrates/tombi-validator/src/validate/any_of.rs:21[0m
[1;35m  Trace[0m: any_of_schema = AnyOfSchema { title: Some("Description"), description: Some("The description is a short blurb about the package. [crates.io](https://crates.io) will display\nthis with your package. This should be plain text (not Markdown).\n\n```toml\n[package]\n# ...\ndescription = \"A short description of my package\"\n```\n\n> **Note**: [crates.io](https://crates.io) requires the `description` to be set."), range: 462:23..473:9, schemas: RwLock { data: [Resolved { schema_url: None, value: String(StringSchema { title: Some("Description"), description: Some("The description is a short blurb about the package. [crates.io](https://crates.io) will display\nthis with your package. This should be plain text (not Markdown).\n\n```toml\n[package]\n# ...\ndescription = \"A short description of my package\"\n```\n\n> **Note**: [crates.io](https://crates.io) requires the `description` to be set."), range: 1533:19..1542:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: None, description: None, range: 1662:28..1675:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 1665:8..1665:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: Some("Workspace"), description: Some("The `workspace` field allow keys to be inherited by defining them in the member package with `{key}.workspace = true`"), range: 1665:21..1670:9, default: None, enumerate: Some([true]), deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: Some(["workspace"]), min_properties: None, max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }
    [90mat[0m [36mcrates/tombi-validator/src/validate/any_of.rs:22[0m
[1;35m  Trace[0m: property_schema = Resolved { schema_url: None, value: AnyOf(AnyOfSchema { title: Some("Repository"), description: Some("The `repository` field should be a URL to the source repository for your\npackage.\n\n```toml\n[package]\n# ...\nrepository = \"https://github.com/rust-lang/cargo/\"\n```"), range: 510:22..521:9, schemas: RwLock { data: [Ref { reference: "#/definitions/Repository", title: None, description: None, deprecated: None }, Ref { reference: "#/definitions/WorkspaceInheritance", title: None, description: None, deprecated: None }] }, default: None, deprecated: None }) }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:133[0m
[1;35m  Trace[0m: self = Table(Table { kind: KeyValue, range: 6:0..6:27, symbol_range: 6:0..6:27, key_values: {Key { kind: BareKey, value: "workspace", range: 6:0..6:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @175..179 @7:1..7:5 } })} })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: AnyOf(AnyOfSchema { title: Some("Repository"), description: Some("The `repository` field should be a URL to the source repository for your\npackage.\n\n```toml\n[package]\n# ...\nrepository = \"https://github.com/rust-lang/cargo/\"\n```"), range: 510:22..521:9, schemas: RwLock { data: [Resolved { schema_url: None, value: String(StringSchema { title: Some("Repository"), description: Some("The `repository` field should be a URL to the source repository for your\npackage.\n\n```toml\n[package]\n# ...\nrepository = \"https://github.com/rust-lang/cargo/\"\n```"), range: 1642:18..1651:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: None, description: None, range: 1662:28..1675:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 1665:8..1665:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: Some("Workspace"), description: Some("The `workspace` field allow keys to be inherited by defining them in the member package with `{key}.workspace = true`"), range: 1665:21..1670:9, default: None, enumerate: Some([true]), deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: Some(["workspace"]), min_properties: None, max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 6:0..6:27, symbol_range: 6:0..6:27, key_values: {Key { kind: BareKey, value: "workspace", range: 6:0..6:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @175..179 @7:1..7:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("package"), Key("repository")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: AnyOf(AnyOfSchema { title: Some("Repository"), description: Some("The `repository` field should be a URL to the source repository for your\npackage.\n\n```toml\n[package]\n# ...\nrepository = \"https://github.com/rust-lang/cargo/\"\n```"), range: 510:22..521:9, schemas: RwLock { data: [Resolved { schema_url: None, value: String(StringSchema { title: Some("Repository"), description: Some("The `repository` field should be a URL to the source repository for your\npackage.\n\n```toml\n[package]\n# ...\nrepository = \"https://github.com/rust-lang/cargo/\"\n```"), range: 1642:18..1651:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: None, description: None, range: 1662:28..1675:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 1665:8..1665:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: Some("Workspace"), description: Some("The `workspace` field allow keys to be inherited by defining them in the member package with `{key}.workspace = true`"), range: 1665:21..1670:9, default: None, enumerate: Some([true]), deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: Some(["workspace"]), min_properties: None, max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: value = Table { kind: KeyValue, range: 6:0..6:27, symbol_range: 6:0..6:27, key_values: {Key { kind: BareKey, value: "workspace", range: 6:0..6:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @175..179 @7:1..7:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/any_of.rs:21[0m
[1;35m  Trace[0m: any_of_schema = AnyOfSchema { title: Some("Repository"), description: Some("The `repository` field should be a URL to the source repository for your\npackage.\n\n```toml\n[package]\n# ...\nrepository = \"https://github.com/rust-lang/cargo/\"\n```"), range: 510:22..521:9, schemas: RwLock { data: [Resolved { schema_url: None, value: String(StringSchema { title: Some("Repository"), description: Some("The `repository` field should be a URL to the source repository for your\npackage.\n\n```toml\n[package]\n# ...\nrepository = \"https://github.com/rust-lang/cargo/\"\n```"), range: 1642:18..1651:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: None, description: None, range: 1662:28..1675:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 1665:8..1665:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: Some("Workspace"), description: Some("The `workspace` field allow keys to be inherited by defining them in the member package with `{key}.workspace = true`"), range: 1665:21..1670:9, default: None, enumerate: Some([true]), deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: Some(["workspace"]), min_properties: None, max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }
    [90mat[0m [36mcrates/tombi-validator/src/validate/any_of.rs:22[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 6:0..6:27, symbol_range: 6:0..6:27, key_values: {Key { kind: BareKey, value: "workspace", range: 6:0..6:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @175..179 @7:1..7:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("package"), Key("repository")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Table(TableSchema { title: None, description: None, range: 1662:28..1675:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 1665:8..1665:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: Some("Workspace"), description: Some("The `workspace` field allow keys to be inherited by defining them in the member package with `{key}.workspace = true`"), range: 1665:21..1670:9, default: None, enumerate: Some([true]), deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: Some(["workspace"]), min_properties: None, max_properties: None, keys_order: Some(Schema), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: property_schema = Resolved { schema_url: None, value: Boolean(BooleanSchema { title: Some("Workspace"), description: Some("The `workspace` field allow keys to be inherited by defining them in the member package with `{key}.workspace = true`"), range: 1665:21..1670:9, default: None, enumerate: Some([true]), deprecated: None }) }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:133[0m
[1;35m  Trace[0m: self = Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @175..179 @7:1..7:5 } })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Boolean(BooleanSchema { title: Some("Workspace"), description: Some("The `workspace` field allow keys to be inherited by defining them in the member package with `{key}.workspace = true`"), range: 1665:21..1670:9, default: None, enumerate: Some([true]), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: property_schema = Resolved { schema_url: None, value: AnyOf(AnyOfSchema { title: Some("License"), description: Some("The `license` field contains the name of the software license that the package\nis released under.\n\n[crates.io](https://crates.io/) interprets the `license` field as an [SPDX 2.1 license\nexpression](https://spdx.org/spdx-specification-21-web-version#h.jxpfx0ykyb60). The name must be a known license\nfrom the [SPDX license list 3.6](https://github.com/spdx/license-list-data/tree/v3.6). Parentheses are not\ncurrently supported. See the [SPDX site](https://spdx.org/license-list) for more information.\n\nSPDX license expressions support AND and OR operators to combine multiple\nlicenses.\n\n```toml\n[package]\n# ...\nlicense = \"MIT OR Apache-2.0\"\n```\n\nUsing `OR` indicates the user may choose either license. Using `AND` indicates\nthe user must comply with both licenses simultaneously. The `WITH` operator\nindicates a license with a special exception. Some examples:\n\n* `MIT OR Apache-2.0`\n* `LGPL-2.1 AND MIT AND BSD-2-Clause`\n* `GPL-2.0+ WITH Bison-exception-2.2`\n\nIf a package is using a nonstandard license, then the `license-file` field may\nbe specified in lieu of the `license` field."), range: 522:19..533:9, schemas: RwLock { data: [Ref { reference: "#/definitions/License", title: None, description: None, deprecated: None }, Ref { reference: "#/definitions/WorkspaceInheritance", title: None, description: None, deprecated: None }] }, default: None, deprecated: None }) }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:133[0m
[1;35m  Trace[0m: self = Table(Table { kind: KeyValue, range: 7:0..7:24, symbol_range: 7:0..7:24, key_values: {Key { kind: BareKey, value: "workspace", range: 7:0..7:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @200..204 @8:1..8:5 } })} })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: AnyOf(AnyOfSchema { title: Some("License"), description: Some("The `license` field contains the name of the software license that the package\nis released under.\n\n[crates.io](https://crates.io/) interprets the `license` field as an [SPDX 2.1 license\nexpression](https://spdx.org/spdx-specification-21-web-version#h.jxpfx0ykyb60). The name must be a known license\nfrom the [SPDX license list 3.6](https://github.com/spdx/license-list-data/tree/v3.6). Parentheses are not\ncurrently supported. See the [SPDX site](https://spdx.org/license-list) for more information.\n\nSPDX license expressions support AND and OR operators to combine multiple\nlicenses.\n\n```toml\n[package]\n# ...\nlicense = \"MIT OR Apache-2.0\"\n```\n\nUsing `OR` indicates the user may choose either license. Using `AND` indicates\nthe user must comply with both licenses simultaneously. The `WITH` operator\nindicates a license with a special exception. Some examples:\n\n* `MIT OR Apache-2.0`\n* `LGPL-2.1 AND MIT AND BSD-2-Clause`\n* `GPL-2.0+ WITH Bison-exception-2.2`\n\nIf a package is using a nonstandard license, then the `license-file` field may\nbe specified in lieu of the `license` field."), range: 522:19..533:9, schemas: RwLock { data: [Resolved { schema_url: None, value: String(StringSchema { title: Some("License"), description: Some("The `license` field contains the name of the software license that the package\nis released under.\n\n[crates.io](https://crates.io/) interprets the `license` field as an [SPDX 2.1 license\nexpression](https://spdx.org/spdx-specification-21-web-version#h.jxpfx0ykyb60). The name must be a known license\nfrom the [SPDX license list 3.6](https://github.com/spdx/license-list-data/tree/v3.6). Parentheses are not\ncurrently supported. See the [SPDX site](https://spdx.org/license-list) for more information.\n\nSPDX license expressions support AND and OR operators to combine multiple\nlicenses.\n\n```toml\n[package]\n# ...\nlicense = \"MIT OR Apache-2.0\"\n```\n\nUsing `OR` indicates the user may choose either license. Using `AND` indicates\nthe user must comply with both licenses simultaneously. The `WITH` operator\nindicates a license with a special exception. Some examples:\n\n* `MIT OR Apache-2.0`\n* `LGPL-2.1 AND MIT AND BSD-2-Clause`\n* `GPL-2.0+ WITH Bison-exception-2.2`\n\nIf a package is using a nonstandard license, then the `license-file` field may\nbe specified in lieu of the `license` field."), range: 1622:15..1631:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: None, description: None, range: 1662:28..1675:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 1665:8..1665:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: Some("Workspace"), description: Some("The `workspace` field allow keys to be inherited by defining them in the member package with `{key}.workspace = true`"), range: 1665:21..1670:9, default: None, enumerate: Some([true]), deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: Some(["workspace"]), min_properties: None, max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 7:0..7:24, symbol_range: 7:0..7:24, key_values: {Key { kind: BareKey, value: "workspace", range: 7:0..7:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @200..204 @8:1..8:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("package"), Key("license")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: AnyOf(AnyOfSchema { title: Some("License"), description: Some("The `license` field contains the name of the software license that the package\nis released under.\n\n[crates.io](https://crates.io/) interprets the `license` field as an [SPDX 2.1 license\nexpression](https://spdx.org/spdx-specification-21-web-version#h.jxpfx0ykyb60). The name must be a known license\nfrom the [SPDX license list 3.6](https://github.com/spdx/license-list-data/tree/v3.6). Parentheses are not\ncurrently supported. See the [SPDX site](https://spdx.org/license-list) for more information.\n\nSPDX license expressions support AND and OR operators to combine multiple\nlicenses.\n\n```toml\n[package]\n# ...\nlicense = \"MIT OR Apache-2.0\"\n```\n\nUsing `OR` indicates the user may choose either license. Using `AND` indicates\nthe user must comply with both licenses simultaneously. The `WITH` operator\nindicates a license with a special exception. Some examples:\n\n* `MIT OR Apache-2.0`\n* `LGPL-2.1 AND MIT AND BSD-2-Clause`\n* `GPL-2.0+ WITH Bison-exception-2.2`\n\nIf a package is using a nonstandard license, then the `license-file` field may\nbe specified in lieu of the `license` field."), range: 522:19..533:9, schemas: RwLock { data: [Resolved { schema_url: None, value: String(StringSchema { title: Some("License"), description: Some("The `license` field contains the name of the software license that the package\nis released under.\n\n[crates.io](https://crates.io/) interprets the `license` field as an [SPDX 2.1 license\nexpression](https://spdx.org/spdx-specification-21-web-version#h.jxpfx0ykyb60). The name must be a known license\nfrom the [SPDX license list 3.6](https://github.com/spdx/license-list-data/tree/v3.6). Parentheses are not\ncurrently supported. See the [SPDX site](https://spdx.org/license-list) for more information.\n\nSPDX license expressions support AND and OR operators to combine multiple\nlicenses.\n\n```toml\n[package]\n# ...\nlicense = \"MIT OR Apache-2.0\"\n```\n\nUsing `OR` indicates the user may choose either license. Using `AND` indicates\nthe user must comply with both licenses simultaneously. The `WITH` operator\nindicates a license with a special exception. Some examples:\n\n* `MIT OR Apache-2.0`\n* `LGPL-2.1 AND MIT AND BSD-2-Clause`\n* `GPL-2.0+ WITH Bison-exception-2.2`\n\nIf a package is using a nonstandard license, then the `license-file` field may\nbe specified in lieu of the `license` field."), range: 1622:15..1631:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: None, description: None, range: 1662:28..1675:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 1665:8..1665:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: Some("Workspace"), description: Some("The `workspace` field allow keys to be inherited by defining them in the member package with `{key}.workspace = true`"), range: 1665:21..1670:9, default: None, enumerate: Some([true]), deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: Some(["workspace"]), min_properties: None, max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: value = Table { kind: KeyValue, range: 7:0..7:24, symbol_range: 7:0..7:24, key_values: {Key { kind: BareKey, value: "workspace", range: 7:0..7:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @200..204 @8:1..8:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/any_of.rs:21[0m
[1;35m  Trace[0m: any_of_schema = AnyOfSchema { title: Some("License"), description: Some("The `license` field contains the name of the software license that the package\nis released under.\n\n[crates.io](https://crates.io/) interprets the `license` field as an [SPDX 2.1 license\nexpression](https://spdx.org/spdx-specification-21-web-version#h.jxpfx0ykyb60). The name must be a known license\nfrom the [SPDX license list 3.6](https://github.com/spdx/license-list-data/tree/v3.6). Parentheses are not\ncurrently supported. See the [SPDX site](https://spdx.org/license-list) for more information.\n\nSPDX license expressions support AND and OR operators to combine multiple\nlicenses.\n\n```toml\n[package]\n# ...\nlicense = \"MIT OR Apache-2.0\"\n```\n\nUsing `OR` indicates the user may choose either license. Using `AND` indicates\nthe user must comply with both licenses simultaneously. The `WITH` operator\nindicates a license with a special exception. Some examples:\n\n* `MIT OR Apache-2.0`\n* `LGPL-2.1 AND MIT AND BSD-2-Clause`\n* `GPL-2.0+ WITH Bison-exception-2.2`\n\nIf a package is using a nonstandard license, then the `license-file` field may\nbe specified in lieu of the `license` field."), range: 522:19..533:9, schemas: RwLock { data: [Resolved { schema_url: None, value: String(StringSchema { title: Some("License"), description: Some("The `license` field contains the name of the software license that the package\nis released under.\n\n[crates.io](https://crates.io/) interprets the `license` field as an [SPDX 2.1 license\nexpression](https://spdx.org/spdx-specification-21-web-version#h.jxpfx0ykyb60). The name must be a known license\nfrom the [SPDX license list 3.6](https://github.com/spdx/license-list-data/tree/v3.6). Parentheses are not\ncurrently supported. See the [SPDX site](https://spdx.org/license-list) for more information.\n\nSPDX license expressions support AND and OR operators to combine multiple\nlicenses.\n\n```toml\n[package]\n# ...\nlicense = \"MIT OR Apache-2.0\"\n```\n\nUsing `OR` indicates the user may choose either license. Using `AND` indicates\nthe user must comply with both licenses simultaneously. The `WITH` operator\nindicates a license with a special exception. Some examples:\n\n* `MIT OR Apache-2.0`\n* `LGPL-2.1 AND MIT AND BSD-2-Clause`\n* `GPL-2.0+ WITH Bison-exception-2.2`\n\nIf a package is using a nonstandard license, then the `license-file` field may\nbe specified in lieu of the `license` field."), range: 1622:15..1631:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: None, description: None, range: 1662:28..1675:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 1665:8..1665:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: Some("Workspace"), description: Some("The `workspace` field allow keys to be inherited by defining them in the member package with `{key}.workspace = true`"), range: 1665:21..1670:9, default: None, enumerate: Some([true]), deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: Some(["workspace"]), min_properties: None, max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }
    [90mat[0m [36mcrates/tombi-validator/src/validate/any_of.rs:22[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 7:0..7:24, symbol_range: 7:0..7:24, key_values: {Key { kind: BareKey, value: "workspace", range: 7:0..7:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @200..204 @8:1..8:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("package"), Key("license")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Table(TableSchema { title: None, description: None, range: 1662:28..1675:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 1665:8..1665:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: Some("Workspace"), description: Some("The `workspace` field allow keys to be inherited by defining them in the member package with `{key}.workspace = true`"), range: 1665:21..1670:9, default: None, enumerate: Some([true]), deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: Some(["workspace"]), min_properties: None, max_properties: None, keys_order: Some(Schema), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: property_schema = Resolved { schema_url: None, value: Boolean(BooleanSchema { title: Some("Workspace"), description: Some("The `workspace` field allow keys to be inherited by defining them in the member package with `{key}.workspace = true`"), range: 1665:21..1670:9, default: None, enumerate: Some([true]), deprecated: None }) }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:133[0m
[1;35m  Trace[0m: self = Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @200..204 @8:1..8:5 } })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Boolean(BooleanSchema { title: Some("Workspace"), description: Some("The `workspace` field allow keys to be inherited by defining them in the member package with `{key}.workspace = true`"), range: 1665:21..1670:9, default: None, enumerate: Some([true]), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = String(String { kind: BasicString(BasicString { syntax: BASIC_STRING @118..151 @6:1..6:34 }), value: "TOML Formatter/Linter CLI Tool." })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Table(TableSchema { title: None, description: None, range: 1662:28..1675:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 1665:8..1665:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: Some("Workspace"), description: Some("The `workspace` field allow keys to be inherited by defining them in the member package with `{key}.workspace = true`"), range: 1665:21..1670:9, default: None, enumerate: Some([true]), deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: Some(["workspace"]), min_properties: None, max_properties: None, keys_order: Some(Schema), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table(Table { kind: KeyValue, range: 2:0..2:24, symbol_range: 2:0..2:24, key_values: {Key { kind: BareKey, value: "workspace", range: 2:0..2:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @49..53 @3:1..3:5 } })} })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: String(StringSchema { title: Some("Semantic Version"), description: Some("Cargo bakes in the concept of [Semantic Versioning](https://semver.org/), so make sure you follow some basic rules:\n\n* Before you reach 1.0.0, anything goes, but if you make breaking changes,\n    increment the minor version. In Rust, breaking changes include adding fields to\n    structs or variants to enums.\n* After 1.0.0, only make breaking changes when you increment the major version.\n    Don't break the build.\n* After 1.0.0, don't add any new public API (no new `pub` anything) in patch-level\n    versions. Always increment the minor version if you add any new `pub` structs,\n    traits, fields, types, functions, methods or anything else.\n* Use version numbers with three numeric parts such as 1.0.0 rather than 1.0."), range: 1133:14..1144:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("0.1.0"), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 2:0..2:24, symbol_range: 2:0..2:24, key_values: {Key { kind: BareKey, value: "workspace", range: 2:0..2:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @49..53 @3:1..3:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("version")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: String(StringSchema { title: Some("Semantic Version"), description: Some("Cargo bakes in the concept of [Semantic Versioning](https://semver.org/), so make sure you follow some basic rules:\n\n* Before you reach 1.0.0, anything goes, but if you make breaking changes,\n    increment the minor version. In Rust, breaking changes include adding fields to\n    structs or variants to enums.\n* After 1.0.0, only make breaking changes when you increment the major version.\n    Don't break the build.\n* After 1.0.0, don't add any new public API (no new `pub` anything) in patch-level\n    versions. Always increment the minor version if you add any new `pub` structs,\n    traits, fields, types, functions, methods or anything else.\n* Use version numbers with three numeric parts such as 1.0.0 rather than 1.0."), range: 1133:14..1144:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("0.1.0"), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: self = Table(Table { kind: KeyValue, range: 2:0..2:24, symbol_range: 2:0..2:24, key_values: {Key { kind: BareKey, value: "workspace", range: 2:0..2:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @49..53 @3:1..3:5 } })} })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Table(TableSchema { title: None, description: None, range: 1662:28..1675:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 1665:8..1665:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: Some("Workspace"), description: Some("The `workspace` field allow keys to be inherited by defining them in the member package with `{key}.workspace = true`"), range: 1665:21..1670:9, default: None, enumerate: Some([true]), deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: Some(["workspace"]), min_properties: None, max_properties: None, keys_order: Some(Schema), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 2:0..2:24, symbol_range: 2:0..2:24, key_values: {Key { kind: BareKey, value: "workspace", range: 2:0..2:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @49..53 @3:1..3:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("version")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Table(TableSchema { title: None, description: None, range: 1662:28..1675:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 1665:8..1665:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: Some("Workspace"), description: Some("The `workspace` field allow keys to be inherited by defining them in the member package with `{key}.workspace = true`"), range: 1665:21..1670:9, default: None, enumerate: Some([true]), deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: Some(["workspace"]), min_properties: None, max_properties: None, keys_order: Some(Schema), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: property_schema = Resolved { schema_url: None, value: Boolean(BooleanSchema { title: Some("Workspace"), description: Some("The `workspace` field allow keys to be inherited by defining them in the member package with `{key}.workspace = true`"), range: 1665:21..1670:9, default: None, enumerate: Some([true]), deprecated: None }) }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:133[0m
[1;35m  Trace[0m: self = Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @49..53 @3:1..3:5 } })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Boolean(BooleanSchema { title: Some("Workspace"), description: Some("The `workspace` field allow keys to be inherited by defining them in the member package with `{key}.workspace = true`"), range: 1665:21..1670:9, default: None, enumerate: Some([true]), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table(Table { kind: KeyValue, range: 3:0..3:24, symbol_range: 3:0..3:24, key_values: {Key { kind: BareKey, value: "workspace", range: 3:0..3:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @74..78 @4:1..4:5 } })} })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Array(ArraySchema { title: Some("Authors"), description: Some("The `authors` field lists people or organizations that are considered the\n\"authors\" of the package. The exact meaning is open to interpretation — it may\nlist the original or primary authors, current maintainers, or owners of the\npackage. These names will be listed on the crate's page on\n[crates.io](https://crates.io). An optional email address may be included within angled\nbrackets at the end of each author.\n\n> **Note**: [crates.io](https://crates.io) requires at least one author to be listed."), range: 1493:15..1512:5, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("The `authors` field lists people or organizations that are considered the\n\"authors\" of the package. The exact meaning is open to interpretation — it may\nlist the original or primary authors, current maintainers, or owners of the\npackage. These names will be listed on the crate's page on\n[crates.io](https://crates.io). An optional email address may be included within angled\nbrackets at the end of each author.\n\n> **Note**: [crates.io](https://crates.io) requires at least one author to be listed."), range: 1497:15..1505:7, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 3:0..3:24, symbol_range: 3:0..3:24, key_values: {Key { kind: BareKey, value: "workspace", range: 3:0..3:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @74..78 @4:1..4:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("authors")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Array(ArraySchema { title: Some("Authors"), description: Some("The `authors` field lists people or organizations that are considered the\n\"authors\" of the package. The exact meaning is open to interpretation — it may\nlist the original or primary authors, current maintainers, or owners of the\npackage. These names will be listed on the crate's page on\n[crates.io](https://crates.io). An optional email address may be included within angled\nbrackets at the end of each author.\n\n> **Note**: [crates.io](https://crates.io) requires at least one author to be listed."), range: 1493:15..1512:5, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("The `authors` field lists people or organizations that are considered the\n\"authors\" of the package. The exact meaning is open to interpretation — it may\nlist the original or primary authors, current maintainers, or owners of the\npackage. These names will be listed on the crate's page on\n[crates.io](https://crates.io). An optional email address may be included within angled\nbrackets at the end of each author.\n\n> **Note**: [crates.io](https://crates.io) requires at least one author to be listed."), range: 1497:15..1505:7, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: self = Table(Table { kind: KeyValue, range: 3:0..3:24, symbol_range: 3:0..3:24, key_values: {Key { kind: BareKey, value: "workspace", range: 3:0..3:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @74..78 @4:1..4:5 } })} })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Table(TableSchema { title: None, description: None, range: 1662:28..1675:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 1665:8..1665:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: Some("Workspace"), description: Some("The `workspace` field allow keys to be inherited by defining them in the member package with `{key}.workspace = true`"), range: 1665:21..1670:9, default: None, enumerate: Some([true]), deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: Some(["workspace"]), min_properties: None, max_properties: None, keys_order: Some(Schema), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 3:0..3:24, symbol_range: 3:0..3:24, key_values: {Key { kind: BareKey, value: "workspace", range: 3:0..3:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @74..78 @4:1..4:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("authors")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Table(TableSchema { title: None, description: None, range: 1662:28..1675:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 1665:8..1665:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: Some("Workspace"), description: Some("The `workspace` field allow keys to be inherited by defining them in the member package with `{key}.workspace = true`"), range: 1665:21..1670:9, default: None, enumerate: Some([true]), deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: Some(["workspace"]), min_properties: None, max_properties: None, keys_order: Some(Schema), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: property_schema = Resolved { schema_url: None, value: Boolean(BooleanSchema { title: Some("Workspace"), description: Some("The `workspace` field allow keys to be inherited by defining them in the member package with `{key}.workspace = true`"), range: 1665:21..1670:9, default: None, enumerate: Some([true]), deprecated: None }) }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:133[0m
[1;35m  Trace[0m: self = Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @74..78 @4:1..4:5 } })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Boolean(BooleanSchema { title: Some("Workspace"), description: Some("The `workspace` field allow keys to be inherited by defining them in the member package with `{key}.workspace = true`"), range: 1665:21..1670:9, default: None, enumerate: Some([true]), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table(Table { kind: KeyValue, range: 4:0..4:24, symbol_range: 4:0..4:24, key_values: {Key { kind: BareKey, value: "workspace", range: 4:0..4:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @99..103 @5:1..5:5 } })} })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: String(StringSchema { title: Some("Edition"), description: Some("The `edition` key affects which edition your package is compiled with. Cargo\nwill always generate packages via [`cargo new`](https://doc.rust-lang.org/cargo/commands/cargo-new.html) with the `edition` key set to the\nlatest edition. Setting the `edition` key in `[package]` will affect all\ntargets/crates in the package, including test suites, benchmarks, binaries,\nexamples, etc."), range: 252:15..262:5, min_length: None, max_length: None, pattern: None, enumerate: Some(["2015", "2018", "2021", "2024"]), default: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 4:0..4:24, symbol_range: 4:0..4:24, key_values: {Key { kind: BareKey, value: "workspace", range: 4:0..4:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @99..103 @5:1..5:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("edition")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: String(StringSchema { title: Some("Edition"), description: Some("The `edition` key affects which edition your package is compiled with. Cargo\nwill always generate packages via [`cargo new`](https://doc.rust-lang.org/cargo/commands/cargo-new.html) with the `edition` key set to the\nlatest edition. Setting the `edition` key in `[package]` will affect all\ntargets/crates in the package, including test suites, benchmarks, binaries,\nexamples, etc."), range: 252:15..262:5, min_length: None, max_length: None, pattern: None, enumerate: Some(["2015", "2018", "2021", "2024"]), default: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: self = Table(Table { kind: KeyValue, range: 4:0..4:24, symbol_range: 4:0..4:24, key_values: {Key { kind: BareKey, value: "workspace", range: 4:0..4:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @99..103 @5:1..5:5 } })} })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Table(TableSchema { title: None, description: None, range: 1662:28..1675:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 1665:8..1665:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: Some("Workspace"), description: Some("The `workspace` field allow keys to be inherited by defining them in the member package with `{key}.workspace = true`"), range: 1665:21..1670:9, default: None, enumerate: Some([true]), deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: Some(["workspace"]), min_properties: None, max_properties: None, keys_order: Some(Schema), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 4:0..4:24, symbol_range: 4:0..4:24, key_values: {Key { kind: BareKey, value: "workspace", range: 4:0..4:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @99..103 @5:1..5:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("edition")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Table(TableSchema { title: None, description: None, range: 1662:28..1675:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 1665:8..1665:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: Some("Workspace"), description: Some("The `workspace` field allow keys to be inherited by defining them in the member package with `{key}.workspace = true`"), range: 1665:21..1670:9, default: None, enumerate: Some([true]), deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: Some(["workspace"]), min_properties: None, max_properties: None, keys_order: Some(Schema), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: property_schema = Resolved { schema_url: None, value: Boolean(BooleanSchema { title: Some("Workspace"), description: Some("The `workspace` field allow keys to be inherited by defining them in the member package with `{key}.workspace = true`"), range: 1665:21..1670:9, default: None, enumerate: Some([true]), deprecated: None }) }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:133[0m
[1;35m  Trace[0m: self = Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @99..103 @5:1..5:5 } })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Boolean(BooleanSchema { title: Some("Workspace"), description: Some("The `workspace` field allow keys to be inherited by defining them in the member package with `{key}.workspace = true`"), range: 1665:21..1670:9, default: None, enumerate: Some([true]), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = String(String { kind: BasicString(BasicString { syntax: BASIC_STRING @118..151 @6:1..6:34 }), value: "TOML Formatter/Linter CLI Tool." })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: String(StringSchema { title: Some("Description"), description: Some("The description is a short blurb about the package. [crates.io](https://crates.io) will display\nthis with your package. This should be plain text (not Markdown).\n\n```toml\n[package]\n# ...\ndescription = \"A short description of my package\"\n```\n\n> **Note**: [crates.io](https://crates.io) requires the `description` to be set."), range: 1533:19..1542:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table(Table { kind: KeyValue, range: 6:0..6:27, symbol_range: 6:0..6:27, key_values: {Key { kind: BareKey, value: "workspace", range: 6:0..6:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @175..179 @7:1..7:5 } })} })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: String(StringSchema { title: Some("Repository"), description: Some("The `repository` field should be a URL to the source repository for your\npackage.\n\n```toml\n[package]\n# ...\nrepository = \"https://github.com/rust-lang/cargo/\"\n```"), range: 1642:18..1651:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 6:0..6:27, symbol_range: 6:0..6:27, key_values: {Key { kind: BareKey, value: "workspace", range: 6:0..6:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @175..179 @7:1..7:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("repository")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: String(StringSchema { title: Some("Repository"), description: Some("The `repository` field should be a URL to the source repository for your\npackage.\n\n```toml\n[package]\n# ...\nrepository = \"https://github.com/rust-lang/cargo/\"\n```"), range: 1642:18..1651:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: self = Table(Table { kind: KeyValue, range: 6:0..6:27, symbol_range: 6:0..6:27, key_values: {Key { kind: BareKey, value: "workspace", range: 6:0..6:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @175..179 @7:1..7:5 } })} })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Table(TableSchema { title: None, description: None, range: 1662:28..1675:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 1665:8..1665:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: Some("Workspace"), description: Some("The `workspace` field allow keys to be inherited by defining them in the member package with `{key}.workspace = true`"), range: 1665:21..1670:9, default: None, enumerate: Some([true]), deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: Some(["workspace"]), min_properties: None, max_properties: None, keys_order: Some(Schema), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 6:0..6:27, symbol_range: 6:0..6:27, key_values: {Key { kind: BareKey, value: "workspace", range: 6:0..6:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @175..179 @7:1..7:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("repository")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Table(TableSchema { title: None, description: None, range: 1662:28..1675:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 1665:8..1665:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: Some("Workspace"), description: Some("The `workspace` field allow keys to be inherited by defining them in the member package with `{key}.workspace = true`"), range: 1665:21..1670:9, default: None, enumerate: Some([true]), deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: Some(["workspace"]), min_properties: None, max_properties: None, keys_order: Some(Schema), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: property_schema = Resolved { schema_url: None, value: Boolean(BooleanSchema { title: Some("Workspace"), description: Some("The `workspace` field allow keys to be inherited by defining them in the member package with `{key}.workspace = true`"), range: 1665:21..1670:9, default: None, enumerate: Some([true]), deprecated: None }) }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:133[0m
[1;35m  Trace[0m: self = Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @175..179 @7:1..7:5 } })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Boolean(BooleanSchema { title: Some("Workspace"), description: Some("The `workspace` field allow keys to be inherited by defining them in the member package with `{key}.workspace = true`"), range: 1665:21..1670:9, default: None, enumerate: Some([true]), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table(Table { kind: KeyValue, range: 7:0..7:24, symbol_range: 7:0..7:24, key_values: {Key { kind: BareKey, value: "workspace", range: 7:0..7:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @200..204 @8:1..8:5 } })} })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: String(StringSchema { title: Some("License"), description: Some("The `license` field contains the name of the software license that the package\nis released under.\n\n[crates.io](https://crates.io/) interprets the `license` field as an [SPDX 2.1 license\nexpression](https://spdx.org/spdx-specification-21-web-version#h.jxpfx0ykyb60). The name must be a known license\nfrom the [SPDX license list 3.6](https://github.com/spdx/license-list-data/tree/v3.6). Parentheses are not\ncurrently supported. See the [SPDX site](https://spdx.org/license-list) for more information.\n\nSPDX license expressions support AND and OR operators to combine multiple\nlicenses.\n\n```toml\n[package]\n# ...\nlicense = \"MIT OR Apache-2.0\"\n```\n\nUsing `OR` indicates the user may choose either license. Using `AND` indicates\nthe user must comply with both licenses simultaneously. The `WITH` operator\nindicates a license with a special exception. Some examples:\n\n* `MIT OR Apache-2.0`\n* `LGPL-2.1 AND MIT AND BSD-2-Clause`\n* `GPL-2.0+ WITH Bison-exception-2.2`\n\nIf a package is using a nonstandard license, then the `license-file` field may\nbe specified in lieu of the `license` field."), range: 1622:15..1631:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 7:0..7:24, symbol_range: 7:0..7:24, key_values: {Key { kind: BareKey, value: "workspace", range: 7:0..7:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @200..204 @8:1..8:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("license")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: String(StringSchema { title: Some("License"), description: Some("The `license` field contains the name of the software license that the package\nis released under.\n\n[crates.io](https://crates.io/) interprets the `license` field as an [SPDX 2.1 license\nexpression](https://spdx.org/spdx-specification-21-web-version#h.jxpfx0ykyb60). The name must be a known license\nfrom the [SPDX license list 3.6](https://github.com/spdx/license-list-data/tree/v3.6). Parentheses are not\ncurrently supported. See the [SPDX site](https://spdx.org/license-list) for more information.\n\nSPDX license expressions support AND and OR operators to combine multiple\nlicenses.\n\n```toml\n[package]\n# ...\nlicense = \"MIT OR Apache-2.0\"\n```\n\nUsing `OR` indicates the user may choose either license. Using `AND` indicates\nthe user must comply with both licenses simultaneously. The `WITH` operator\nindicates a license with a special exception. Some examples:\n\n* `MIT OR Apache-2.0`\n* `LGPL-2.1 AND MIT AND BSD-2-Clause`\n* `GPL-2.0+ WITH Bison-exception-2.2`\n\nIf a package is using a nonstandard license, then the `license-file` field may\nbe specified in lieu of the `license` field."), range: 1622:15..1631:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: self = Table(Table { kind: KeyValue, range: 7:0..7:24, symbol_range: 7:0..7:24, key_values: {Key { kind: BareKey, value: "workspace", range: 7:0..7:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @200..204 @8:1..8:5 } })} })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Table(TableSchema { title: None, description: None, range: 1662:28..1675:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 1665:8..1665:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: Some("Workspace"), description: Some("The `workspace` field allow keys to be inherited by defining them in the member package with `{key}.workspace = true`"), range: 1665:21..1670:9, default: None, enumerate: Some([true]), deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: Some(["workspace"]), min_properties: None, max_properties: None, keys_order: Some(Schema), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 7:0..7:24, symbol_range: 7:0..7:24, key_values: {Key { kind: BareKey, value: "workspace", range: 7:0..7:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @200..204 @8:1..8:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("license")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Table(TableSchema { title: None, description: None, range: 1662:28..1675:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 1665:8..1665:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: Some("Workspace"), description: Some("The `workspace` field allow keys to be inherited by defining them in the member package with `{key}.workspace = true`"), range: 1665:21..1670:9, default: None, enumerate: Some([true]), deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: Some(["workspace"]), min_properties: None, max_properties: None, keys_order: Some(Schema), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: property_schema = Resolved { schema_url: None, value: Boolean(BooleanSchema { title: Some("Workspace"), description: Some("The `workspace` field allow keys to be inherited by defining them in the member package with `{key}.workspace = true`"), range: 1665:21..1670:9, default: None, enumerate: Some([true]), deprecated: None }) }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:133[0m
[1;35m  Trace[0m: self = Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @200..204 @8:1..8:5 } })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Boolean(BooleanSchema { title: Some("Workspace"), description: Some("The `workspace` field allow keys to be inherited by defining them in the member package with `{key}.workspace = true`"), range: 1665:21..1670:9, default: None, enumerate: Some([true]), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Table(TableSchema { title: Some("Cargo.toml"), description: Some("A schema for Cargo.toml."), range: 0:0..2198:1, properties: RwLock { data: {Key("cargo-features"): PropertySchema { key_range: 1914:4..1914:20, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: None, range: 1914:22..1920:5, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: None, range: 1916:15..1918:7, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("package"): PropertySchema { key_range: 1921:4..1921:13, property_schema: Resolved { schema_url: None, value: Table(TableSchema { title: Some("Package"), description: Some("The only field required by Cargo is [`name`](https://doc.rust-lang.org/cargo/reference/manifest.html#the-name-field).\n If publishing to a registry, the registry may\nrequire additional fields. See the notes below and [the publishing chapter](https://doc.rust-lang.org/cargo/reference/publishing.html) for requirements for publishing to [crates.io](https://crates.io/)."), range: 399:15..723:5, properties: RwLock { data: {Key("name"): PropertySchema { key_range: 405:8..405:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("The package name is an identifier used to refer to the package. It is used\nwhen listed as a dependency in another package, and as the default name of\ninferred lib and bin targets.\n\nThe name must use only [alphanumeric](https://doc.rust-lang.org/std/primitive.char.html#method.is_alphanumeric) characters or `-` or `_`, and cannot be empty.\nNote that [`cargo new`](https://doc.rust-lang.org/cargo/commands/cargo-new.html) and [`cargo init`](https://doc.rust-lang.org/cargo/commands/cargo-init.html) impose some additional restrictions on\nthe package name, such as enforcing that it is a valid Rust identifier and not\na keyword. [crates.io](https://crates.io) imposes even more restrictions, such as\nenforcing only ASCII characters, not a reserved name, not a special Windows\nname such as \"nul\", is not too long, etc."), range: 405:16..413:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 414:8..414:17, property_schema: Resolved { schema_url: None, value: AnyOf(AnyOfSchema { title: Some("Semantic Version"), description: Some("Cargo bakes in the concept of [Semantic Versioning](https://semver.org/), so make sure you follow some basic rules:\n\n* Before you reach 1.0.0, anything goes, but if you make breaking changes,\n    increment the minor version. In Rust, breaking changes include adding fields to\n    structs or variants to enums.\n* After 1.0.0, only make breaking changes when you increment the major version.\n    Don't break the build.\n* After 1.0.0, don't add any new public API (no new `pub` anything) in patch-level\n    versions. Always increment the minor version if you add any new `pub` structs,\n    traits, fields, types, functions, methods or anything else.\n* Use version numbers with three numeric parts such as 1.0.0 rather than 1.0."), range: 414:19..425:9, schemas: RwLock { data: [Resolved { schema_url: None, value: String(StringSchema { title: Some("Semantic Version"), description: Some("Cargo bakes in the concept of [Semantic Versioning](https://semver.org/), so make sure you follow some basic rules:\n\n* Before you reach 1.0.0, anything goes, but if you make breaking changes,\n    increment the minor version. In Rust, breaking changes include adding fields to\n    structs or variants to enums.\n* After 1.0.0, only make breaking changes when you increment the major version.\n    Don't break the build.\n* After 1.0.0, don't add any new public API (no new `pub` anything) in patch-level\n    versions. Always increment the minor version if you add any new `pub` structs,\n    traits, fields, types, functions, methods or anything else.\n* Use version numbers with three numeric parts such as 1.0.0 rather than 1.0."), range: 1133:14..1144:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("0.1.0"), deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: None, description: None, range: 1662:28..1675:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 1665:8..1665:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: Some("Workspace"), description: Some("The `workspace` field allow keys to be inherited by defining them in the member package with `{key}.workspace = true`"), range: 1665:21..1670:9, default: None, enumerate: Some([true]), deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: Some(["workspace"]), min_properties: None, max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }) } }, Key("authors"): PropertySchema { key_range: 426:8..426:17, property_schema: Resolved { schema_url: None, value: AnyOf(AnyOfSchema { title: Some("Authors"), description: Some("The `authors` field lists people or organizations that are considered the\n\"authors\" of the package. The exact meaning is open to interpretation — it may\nlist the original or primary authors, current maintainers, or owners of the\npackage. These names will be listed on the crate's page on\n[crates.io](https://crates.io). An optional email address may be included within angled\nbrackets at the end of each author.\n\n> **Note**: [crates.io](https://crates.io) requires at least one author to be listed."), range: 426:19..437:9, schemas: RwLock { data: [Resolved { schema_url: None, value: Array(ArraySchema { title: Some("Authors"), description: Some("The `authors` field lists people or organizations that are considered the\n\"authors\" of the package. The exact meaning is open to interpretation — it may\nlist the original or primary authors, current maintainers, or owners of the\npackage. These names will be listed on the crate's page on\n[crates.io](https://crates.io). An optional email address may be included within angled\nbrackets at the end of each author.\n\n> **Note**: [crates.io](https://crates.io) requires at least one author to be listed."), range: 1493:15..1512:5, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("The `authors` field lists people or organizations that are considered the\n\"authors\" of the package. The exact meaning is open to interpretation — it may\nlist the original or primary authors, current maintainers, or owners of the\npackage. These names will be listed on the crate's page on\n[crates.io](https://crates.io). An optional email address may be included within angled\nbrackets at the end of each author.\n\n> **Note**: [crates.io](https://crates.io) requires at least one author to be listed."), range: 1497:15..1505:7, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: None, description: None, range: 1662:28..1675:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 1665:8..1665:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: Some("Workspace"), description: Some("The `workspace` field allow keys to be inherited by defining them in the member package with `{key}.workspace = true`"), range: 1665:21..1670:9, default: None, enumerate: Some([true]), deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: Some(["workspace"]), min_properties: None, max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }) } }, Key("edition"): PropertySchema { key_range: 438:8..438:17, property_schema: Resolved { schema_url: None, value: AnyOf(AnyOfSchema { title: Some("Edition"), description: Some("The `edition` key affects which edition your package is compiled with. Cargo\nwill always generate packages via [`cargo new`](https://doc.rust-lang.org/cargo/commands/cargo-new.html) with the `edition` key set to the\nlatest edition. Setting the `edition` key in `[package]` will affect all\ntargets/crates in the package, including test suites, benchmarks, binaries,\nexamples, etc."), range: 438:19..449:9, schemas: RwLock { data: [Resolved { schema_url: None, value: String(StringSchema { title: Some("Edition"), description: Some("The `edition` key affects which edition your package is compiled with. Cargo\nwill always generate packages via [`cargo new`](https://doc.rust-lang.org/cargo/commands/cargo-new.html) with the `edition` key set to the\nlatest edition. Setting the `edition` key in `[package]` will affect all\ntargets/crates in the package, including test suites, benchmarks, binaries,\nexamples, etc."), range: 252:15..262:5, min_length: None, max_length: None, pattern: None, enumerate: Some(["2015", "2018", "2021", "2024"]), default: None, deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: None, description: None, range: 1662:28..1675:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 1665:8..1665:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: Some("Workspace"), description: Some("The `workspace` field allow keys to be inherited by defining them in the member package with `{key}.workspace = true`"), range: 1665:21..1670:9, default: None, enumerate: Some([true]), deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: Some(["workspace"]), min_properties: None, max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }) } }, Key("rust-version"): PropertySchema { key_range: 450:8..450:22, property_schema: Resolved { schema_url: None, value: AnyOf(AnyOfSchema { title: Some("RustVersion"), description: Some("The `rust-version` field is an optional key that tells cargo what version of the\nRust language and compiler your package can be compiled with. If the currently\nselected version of the Rust compiler is older than the stated version, cargo\nwill exit with an error, telling the user what version is required.\n\nThe first version of Cargo that supports this field was released with Rust 1.56.0.\nIn older releases, the field will be ignored, and Cargo will display a warning.\n\n```toml\n[package]\n# ...\nrust-version = \"1.56\"\n```\n\nThe Rust version must be a bare version number with two or three components; it\ncannot include semver operators or pre-release identifiers. Compiler pre-release\nidentifiers such as -nightly will be ignored while checking the Rust version.\nThe `rust-version` must be equal to or newer than the version that first\nintroduced the configured `edition`.\n\nThe `rust-version` may be ignored using the `--ignore-rust-version` option.\n\nSetting the `rust-version` key in `[package]` will affect all targets/crates in\nthe package, including test suites, benchmarks, binaries, examples, etc."), range: 450:24..461:9, schemas: RwLock { data: [Ref { reference: "#/definitions/RustVersion", title: None, description: None, deprecated: None }, Ref { reference: "#/definitions/WorkspaceInheritance", title: None, description: None, deprecated: None }] }, default: None, deprecated: None }) } }, Key("description"): PropertySchema { key_range: 462:8..462:21, property_schema: Resolved { schema_url: None, value: AnyOf(AnyOfSchema { title: Some("Description"), description: Some("The description is a short blurb about the package. [crates.io](https://crates.io) will display\nthis with your package. This should be plain text (not Markdown).\n\n```toml\n[package]\n# ...\ndescription = \"A short description of my package\"\n```\n\n> **Note**: [crates.io](https://crates.io) requires the `description` to be set."), range: 462:23..473:9, schemas: RwLock { data: [Resolved { schema_url: None, value: String(StringSchema { title: Some("Description"), description: Some("The description is a short blurb about the package. [crates.io](https://crates.io) will display\nthis with your package. This should be plain text (not Markdown).\n\n```toml\n[package]\n# ...\ndescription = \"A short description of my package\"\n```\n\n> **Note**: [crates.io](https://crates.io) requires the `description` to be set."), range: 1533:19..1542:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: None, description: None, range: 1662:28..1675:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 1665:8..1665:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: Some("Workspace"), description: Some("The `workspace` field allow keys to be inherited by defining them in the member package with `{key}.workspace = true`"), range: 1665:21..1670:9, default: None, enumerate: Some([true]), deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: Some(["workspace"]), min_properties: None, max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }) } }, Key("documentation"): PropertySchema { key_range: 474:8..474:23, property_schema: Resolved { schema_url: None, value: AnyOf(AnyOfSchema { title: Some("Documentation"), description: Some("\nThe `documentation` field specifies a URL to a website hosting the crate's\ndocumentation. If no URL is specified in the manifest file, [crates.io](https://crates.io) will\nautomatically link your crate to the corresponding [docs.rs](https://docs.rs) page.\n\n```toml\n[package]\n# ...\ndocumentation = \"https://docs.rs/bitflags\"\n```\n"), range: 474:25..485:9, schemas: RwLock { data: [Ref { reference: "#/definitions/Documentation", title: None, description: None, deprecated: None }, Ref { reference: "#/definitions/WorkspaceInheritance", title: None, description: None, deprecated: None }] }, default: None, deprecated: None }) } }, Key("readme"): PropertySchema { key_range: 486:8..486:16, property_schema: Resolved { schema_url: None, value: AnyOf(AnyOfSchema { title: Some("Readme"), description: Some("The `readme` field should be the path to a file in the package root (relative\nto this `Cargo.toml`) that contains general information about the package.\nThis file will be transferred to the registry when you publish. [crates.io](https://crates.io)\nwill interpret it as Markdown and render it on the crate's page.\n\n```toml\n[package]\n# ...\nreadme = \"README.md\"\n```\n\nIf no value is specified for this field, and a file named `README.md`,\n`README.txt` or `README` exists in the package root, then the name of that\nfile will be used. You can suppress this behavior by setting this field to\n`false`. If the field is set to `true`, a default value of `README.md` will\nbe assumed.\n"), range: 486:18..497:9, schemas: RwLock { data: [Ref { reference: "#/definitions/Readme", title: None, description: None, deprecated: None }, Ref { reference: "#/definitions/WorkspaceInheritance", title: None, description: None, deprecated: None }] }, default: None, deprecated: None }) } }, Key("homepage"): PropertySchema { key_range: 498:8..498:18, property_schema: Resolved { schema_url: None, value: AnyOf(AnyOfSchema { title: Some("Homepage"), description: Some("The `homepage` field should be a URL to a site that is the home page for your\npackage.\n\n```toml\n[package]\n# ...\nhomepage = \"https://serde.rs/\"\n```"), range: 498:20..509:9, schemas: RwLock { data: [Ref { reference: "#/definitions/Homepage", title: None, description: None, deprecated: None }, Ref { reference: "#/definitions/WorkspaceInheritance", title: None, description: None, deprecated: None }] }, default: None, deprecated: None }) } }, Key("repository"): PropertySchema { key_range: 510:8..510:20, property_schema: Resolved { schema_url: None, value: AnyOf(AnyOfSchema { title: Some("Repository"), description: Some("The `repository` field should be a URL to the source repository for your\npackage.\n\n```toml\n[package]\n# ...\nrepository = \"https://github.com/rust-lang/cargo/\"\n```"), range: 510:22..521:9, schemas: RwLock { data: [Resolved { schema_url: None, value: String(StringSchema { title: Some("Repository"), description: Some("The `repository` field should be a URL to the source repository for your\npackage.\n\n```toml\n[package]\n# ...\nrepository = \"https://github.com/rust-lang/cargo/\"\n```"), range: 1642:18..1651:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: None, description: None, range: 1662:28..1675:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 1665:8..1665:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: Some("Workspace"), description: Some("The `workspace` field allow keys to be inherited by defining them in the member package with `{key}.workspace = true`"), range: 1665:21..1670:9, default: None, enumerate: Some([true]), deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: Some(["workspace"]), min_properties: None, max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }) } }, Key("license"): PropertySchema { key_range: 522:8..522:17, property_schema: Resolved { schema_url: None, value: AnyOf(AnyOfSchema { title: Some("License"), description: Some("The `license` field contains the name of the software license that the package\nis released under.\n\n[crates.io](https://crates.io/) interprets the `license` field as an [SPDX 2.1 license\nexpression](https://spdx.org/spdx-specification-21-web-version#h.jxpfx0ykyb60). The name must be a known license\nfrom the [SPDX license list 3.6](https://github.com/spdx/license-list-data/tree/v3.6). Parentheses are not\ncurrently supported. See the [SPDX site](https://spdx.org/license-list) for more information.\n\nSPDX license expressions support AND and OR operators to combine multiple\nlicenses.\n\n```toml\n[package]\n# ...\nlicense = \"MIT OR Apache-2.0\"\n```\n\nUsing `OR` indicates the user may choose either license. Using `AND` indicates\nthe user must comply with both licenses simultaneously. The `WITH` operator\nindicates a license with a special exception. Some examples:\n\n* `MIT OR Apache-2.0`\n* `LGPL-2.1 AND MIT AND BSD-2-Clause`\n* `GPL-2.0+ WITH Bison-exception-2.2`\n\nIf a package is using a nonstandard license, then the `license-file` field may\nbe specified in lieu of the `license` field."), range: 522:19..533:9, schemas: RwLock { data: [Resolved { schema_url: None, value: String(StringSchema { title: Some("License"), description: Some("The `license` field contains the name of the software license that the package\nis released under.\n\n[crates.io](https://crates.io/) interprets the `license` field as an [SPDX 2.1 license\nexpression](https://spdx.org/spdx-specification-21-web-version#h.jxpfx0ykyb60). The name must be a known license\nfrom the [SPDX license list 3.6](https://github.com/spdx/license-list-data/tree/v3.6). Parentheses are not\ncurrently supported. See the [SPDX site](https://spdx.org/license-list) for more information.\n\nSPDX license expressions support AND and OR operators to combine multiple\nlicenses.\n\n```toml\n[package]\n# ...\nlicense = \"MIT OR Apache-2.0\"\n```\n\nUsing `OR` indicates the user may choose either license. Using `AND` indicates\nthe user must comply with both licenses simultaneously. The `WITH` operator\nindicates a license with a special exception. Some examples:\n\n* `MIT OR Apache-2.0`\n* `LGPL-2.1 AND MIT AND BSD-2-Clause`\n* `GPL-2.0+ WITH Bison-exception-2.2`\n\nIf a package is using a nonstandard license, then the `license-file` field may\nbe specified in lieu of the `license` field."), range: 1622:15..1631:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: None, description: None, range: 1662:28..1675:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 1665:8..1665:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: Some("Workspace"), description: Some("The `workspace` field allow keys to be inherited by defining them in the member package with `{key}.workspace = true`"), range: 1665:21..1670:9, default: None, enumerate: Some([true]), deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: Some(["workspace"]), min_properties: None, max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }) } }, Key("license-file"): PropertySchema { key_range: 534:8..534:22, property_schema: Resolved { schema_url: None, value: AnyOf(AnyOfSchema { title: Some("LicenseFile"), description: Some("The `license-file` field contains the path to a file\ncontaining the text of the license (relative to this `Cargo.toml`).\n\n```toml\n[package]\n# ...\nlicense-file = \"LICENSE.txt\"\n```\n\n> **Note**: [crates.io](https://crates.io) requires either `license` or `license-file` to be set."), range: 534:24..545:9, schemas: RwLock { data: [Ref { reference: "#/definitions/LicenseFile", title: None, description: None, deprecated: None }, Ref { reference: "#/definitions/WorkspaceInheritance", title: None, description: None, deprecated: None }] }, default: None, deprecated: None }) } }, Key("keywords"): PropertySchema { key_range: 546:8..546:18, property_schema: Resolved { schema_url: None, value: AnyOf(AnyOfSchema { title: Some("Keywords"), description: Some("The `keywords` field is an array of strings that describe this package. This\ncan help when searching for the package on a registry, and you may choose any\nwords that would help someone find this crate.\n\n```toml\n[package]\n# ...\nkeywords = [\"gamedev\", \"graphics\"]\n```\n\n> **Note**: [crates.io](https://crates.io) has a maximum of 5 keywords. Each keyword must be\n> ASCII text, start with a letter, and only contain letters, numbers, `_` or\n> `-`, and have at most 20 characters."), range: 546:20..557:9, schemas: RwLock { data: [Ref { reference: "#/definitions/Keywords", title: None, description: None, deprecated: None }, Ref { reference: "#/definitions/WorkspaceInheritance", title: None, description: None, deprecated: None }] }, default: None, deprecated: None }) } }, Key("categories"): PropertySchema { key_range: 558:8..558:20, property_schema: Resolved { schema_url: None, value: AnyOf(AnyOfSchema { title: Some("Categories"), description: Some("The `categories` field is an array of strings of the categories this package\nbelongs to.\n\n```toml\ncategories = [\"command-line-utilities\", \"development-tools::cargo-plugins\"]\n```\n\n> **Note**: [crates.io](https://crates.io) has a maximum of 5 categories. Each category should\n> match one of the strings available at https://crates.io/category_slugs, and\n> must match exactly."), range: 558:22..569:9, schemas: RwLock { data: [Ref { reference: "#/definitions/Categories", title: None, description: None, deprecated: None }, Ref { reference: "#/definitions/WorkspaceInheritance", title: None, description: None, deprecated: None }] }, default: None, deprecated: None }) } }, Key("workspace"): PropertySchema { key_range: 570:8..570:19, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("The `workspace` field can be used to configure the workspace that this package\nwill be a member of. If not specified this will be inferred as the first\nCargo.toml with `[workspace]` upwards in the filesystem. Setting this is\nuseful if the member is not inside a subdirectory of the workspace root.\n\n```toml\n[package]\n# ...\nworkspace = \"path/to/workspace/root\"\n```\n\nThis field cannot be specified if the manifest already has a `[workspace]`\ntable defined. That is, a crate cannot both be a root crate in a workspace\n(contain `[workspace]`) and also be a member crate of another workspace\n(contain `package.workspace`).\n\nFor more information, see the [workspaces chapter](https://doc.rust-lang.org/cargo/reference/workspaces.html)."), range: 570:21..578:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("build"): PropertySchema { key_range: 579:8..579:15, property_schema: Ref { reference: "#/definitions/Build", title: None, description: None, deprecated: None } }, Key("links"): PropertySchema { key_range: 582:8..582:15, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("The `links` field specifies the name of a native library that is being linked\nto. More information can be found in the [`links`](https://doc.rust-lang.org/cargo/reference/build-scripts.html#the-links-manifest-key) section of the build\nscript guide.\n\n```toml\n[package]\n# ...\nlinks = \"foo\"\n```"), range: 582:17..590:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("exclude"): PropertySchema { key_range: 591:8..591:17, property_schema: Resolved { schema_url: None, value: AnyOf(AnyOfSchema { title: Some("Exclude"), description: Some("You can explicitly specify that a set of file patterns should be ignored or\nincluded for the purposes of packaging. The patterns specified in the\n`exclude` field identify a set of files that are not included, and the\npatterns in `include` specify files that are explicitly included.\n\nThe patterns should be [gitignore](https://git-scm.com/docs/gitignore)-style patterns. Briefly:\n\n- `foo` matches any file or directory with the name `foo` anywhere in the\n  package. This is equivalent to the pattern `**/foo`.\n- `/foo` matches any file or directory with the name `foo` only in the root of\n  the package.\n- `foo/` matches any *directory* with the name `foo` anywhere in the package.\n- Common glob patterns like `*`, `?`, and `[]` are supported:\n  - `*` matches zero or more characters except `/`.  For example, `*.html`\n    matches any file or directory with the `.html` extension anywhere in the\n    package.\n  - `?` matches any character except `/`. For example, `foo?` matches `food`,\n    but not `foo`.\n  - `[]` allows for matching a range of characters. For example, `[ab]`\n    matches either `a` or `b`. `[a-z]` matches letters a through z.\n- `**/` prefix matches in any directory. For example, `**/foo/bar` matches the\n  file or directory `bar` anywhere that is directly under directory `foo`.\n- `/**` suffix matches everything inside. For example, `foo/**` matches all\n  files inside directory `foo`, including all files in subdirectories below\n  `foo`.\n- `/**/` matches zero or more directories. For example, `a/**/b` matches\n  `a/b`, `a/x/b`, `a/x/y/b`, and so on.\n- `!` prefix negates a pattern. For example, a pattern of `src/**.rs` and\n  `!foo.rs` would match all files with the `.rs` extension inside the `src`\n  directory, except for any file named `foo.rs`.\n\nIf git is being used for a package, the `exclude` field will be seeded with\nthe `gitignore` settings from the repository.\n\n```toml\n[package]\n# ...\nexclude = [\"build/**/*.o\", \"doc/**/*.html\"]\n```\n\n```toml\n[package]\n# ...\ninclude = [\"src/**/*\", \"Cargo.toml\"]\n```\n\nThe options are mutually exclusive: setting `include` will override an\n`exclude`. Note that `include` must be an exhaustive list of files as otherwise\nnecessary source files may not be included. The package's `Cargo.toml` is\nautomatically included.\n\nThe include/exclude list is also used for change tracking in some situations.\nFor targets built with `rustdoc`, it is used to determine the list of files to\ntrack to determine if the target should be rebuilt. If the package has a\n[build script](https://doc.rust-lang.org/cargo/reference/build-scripts.html) that does not emit any `rerun-if-*` directives, then the\ninclude/exclude list is used for tracking if the build script should be re-run\nif any of those files change."), range: 591:19..602:9, schemas: RwLock { data: [Ref { reference: "#/definitions/Exclude", title: None, description: None, deprecated: None }, Ref { reference: "#/definitions/WorkspaceInheritance", title: None, description: None, deprecated: None }] }, default: None, deprecated: None }) } }, Key("include"): PropertySchema { key_range: 603:8..603:17, property_schema: Resolved { schema_url: None, value: AnyOf(AnyOfSchema { title: None, description: Some("You can explicitly specify that a set of file patterns should be ignored or\nincluded for the purposes of packaging. The patterns specified in the\n`exclude` field identify a set of files that are not included, and the\npatterns in `include` specify files that are explicitly included.\n\nThe patterns should be [gitignore](https://git-scm.com/docs/gitignore)-style patterns. Briefly:\n\n- `foo` matches any file or directory with the name `foo` anywhere in the\n  package. This is equivalent to the pattern `**/foo`.\n- `/foo` matches any file or directory with the name `foo` only in the root of\n  the package.\n- `foo/` matches any *directory* with the name `foo` anywhere in the package.\n- Common glob patterns like `*`, `?`, and `[]` are supported:\n  - `*` matches zero or more characters except `/`.  For example, `*.html`\n    matches any file or directory with the `.html` extension anywhere in the\n    package.\n  - `?` matches any character except `/`. For example, `foo?` matches `food`,\n    but not `foo`.\n  - `[]` allows for matching a range of characters. For example, `[ab]`\n    matches either `a` or `b`. `[a-z]` matches letters a through z.\n- `**/` prefix matches in any directory. For example, `**/foo/bar` matches the\n  file or directory `bar` anywhere that is directly under directory `foo`.\n- `/**` suffix matches everything inside. For example, `foo/**` matches all\n  files inside directory `foo`, including all files in subdirectories below\n  `foo`.\n- `/**/` matches zero or more directories. For example, `a/**/b` matches\n  `a/b`, `a/x/b`, `a/x/y/b`, and so on.\n- `!` prefix negates a pattern. For example, a pattern of `src/**.rs` and\n  `!foo.rs` would match all files with the `.rs` extension inside the `src`\n  directory, except for any file named `foo.rs`.\n\nIf git is being used for a package, the `exclude` field will be seeded with\nthe `gitignore` settings from the repository.\n\n```toml\n[package]\n# ...\nexclude = [\"build/**/*.o\", \"doc/**/*.html\"]\n```\n\n```toml\n[package]\n# ...\ninclude = [\"src/**/*\", \"Cargo.toml\"]\n```\n\nThe options are mutually exclusive: setting `include` will override an\n`exclude`. Note that `include` must be an exhaustive list of files as otherwise\nnecessary source files may not be included. The package's `Cargo.toml` is\nautomatically included.\n\nThe include/exclude list is also used for change tracking in some situations.\nFor targets built with `rustdoc`, it is used to determine the list of files to\ntrack to determine if the target should be rebuilt. If the package has a\n[build script](https://doc.rust-lang.org/cargo/reference/build-scripts.html) that does not emit any `rerun-if-*` directives, then the\ninclude/exclude list is used for tracking if the build script should be re-run\nif any of those files change."), range: 603:19..613:9, schemas: RwLock { data: [Ref { reference: "#/definitions/Include", title: None, description: None, deprecated: None }, Ref { reference: "#/definitions/WorkspaceInheritance", title: None, description: None, deprecated: None }] }, default: None, deprecated: None }) } }, Key("publish"): PropertySchema { key_range: 614:8..614:17, property_schema: Resolved { schema_url: None, value: AnyOf(AnyOfSchema { title: Some("Publish"), description: Some("The `publish` field can be used to prevent a package from being published to a package registry (like *crates.io*) by mistake, for instance to keep a package\nprivate in a company.\n\n```toml\n[package]\n# ...\npublish = false\n```\n\nThe value may also be an array of strings which are registry names that are\nallowed to be published to.\n\n```toml\n[package]\n# ...\npublish = [\"some-registry-name\"]\n```"), range: 614:19..625:9, schemas: RwLock { data: [Ref { reference: "#/definitions/Publish", title: None, description: None, deprecated: None }, Ref { reference: "#/definitions/WorkspaceInheritance", title: None, description: None, deprecated: None }] }, default: None, deprecated: None }) } }, Key("metadata"): PropertySchema { key_range: 626:8..626:18, property_schema: Resolved { schema_url: None, value: Table(TableSchema { title: None, description: Some("Cargo by default will warn about unused keys in `Cargo.toml` to assist in\ndetecting typos and such. The `package.metadata` table, however, is completely\nignored by Cargo and will not be warned about. This section can be used for\ntools which would like to store package configuration in `Cargo.toml`. For\nexample:\n\n```toml\n[package]\nname = \"...\"\n# ...\n\n# Metadata used when generating an Android APK, for example.\n[package.metadata.android]\npackage-name = \"my-awesome-android-app\"\nassets = \"path/to/static\"\n```\n"), range: 626:20..641:9, properties: RwLock { data: {Key("playdate"): PropertySchema { key_range: 631:12..631:22, property_schema: Ref { reference: "#/definitions/PlaydateMetadata", title: None, description: None, deprecated: None } }} }, pattern_properties: None, additional_properties: Some(true), additional_property_schema: None, required: None, min_properties: None, max_properties: None, keys_order: Some(Schema), deprecated: None }) } }, Key("default-run"): PropertySchema { key_range: 642:8..642:21, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("The `default-run` field in the `[package]` section of the manifest can be used\nto specify a default binary picked by [`cargo run`](https://doc.rust-lang.org/cargo/commands/cargo-run.html). For example, when there is\nboth `src/bin/a.rs` and `src/bin/b.rs`:\n\n```toml\n[package]\ndefault-run = \"a\"\n```"), range: 642:23..650:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("autobins"): PropertySchema { key_range: 651:8..651:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Disable automatic discovery of `bin` targets.\n\nDisabling automatic discovery should only be needed for specialized\nsituations. For example, if you have a library where you want a *module* named\n`bin`, this would present a problem because Cargo would usually attempt to\ncompile anything in the `bin` directory as an executable. Here is a sample\nlayout of this scenario:\n\n```\n├── Cargo.toml\n└── src\n    ├── lib.rs\n    └── bin\n        └── mod.rs\n```\n\nTo prevent Cargo from inferring `src/bin/mod.rs` as an executable, set\nthis to `false` to disable auto-discovery."), range: 651:20..659:9, default: None, enumerate: None, deprecated: None }) } }, Key("autoexamples"): PropertySchema { key_range: 660:8..660:22, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Disable automatic discovery of `example` targets.\n\nDisabling automatic discovery should only be needed for specialized\nsituations. For example, if you have a library where you want a *module* named\n`bin`, this would present a problem because Cargo would usually attempt to\ncompile anything in the `bin` directory as an executable. Here is a sample\nlayout of this scenario:\n\n```\n├── Cargo.toml\n└── src\n    ├── lib.rs\n    └── bin\n        └── mod.rs\n```\n"), range: 660:24..668:9, default: None, enumerate: None, deprecated: None }) } }, Key("autotests"): PropertySchema { key_range: 669:8..669:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Disable automatic discovery of `test` targets.\n\nDisabling automatic discovery should only be needed for specialized\nsituations. For example, if you have a library where you want a *module* named\n`bin`, this would present a problem because Cargo would usually attempt to\ncompile anything in the `bin` directory as an executable. Here is a sample\nlayout of this scenario:\n\n```\n├── Cargo.toml\n└── src\n    ├── lib.rs\n    └── bin\n        └── mod.rs\n```\n"), range: 669:21..677:9, default: None, enumerate: None, deprecated: None }) } }, Key("autobenches"): PropertySchema { key_range: 678:8..678:21, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Disable automatic discovery of `bench` targets.\n\nDisabling automatic discovery should only be needed for specialized\nsituations. For example, if you have a library where you want a *module* named\n`bin`, this would present a problem because Cargo would usually attempt to\ncompile anything in the `bin` directory as an executable. Here is a sample\nlayout of this scenario:\n\n```\n├── Cargo.toml\n└── src\n    ├── lib.rs\n    └── bin\n        └── mod.rs\n```\n"), range: 678:23..686:9, default: None, enumerate: None, deprecated: None }) } }, Key("resolver"): PropertySchema { key_range: 687:8..687:18, property_schema: Ref { reference: "#/definitions/Resolver", title: None, description: None, deprecated: None } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: Some(["name"]), min_properties: None, max_properties: None, keys_order: Some(Schema), deprecated: None }) } }, Key("workspace"): PropertySchema { key_range: 1932:4..1932:15, property_schema: Ref { reference: "#/definitions/Workspace", title: None, description: None, deprecated: None } }, Key("lib"): PropertySchema { key_range: 1935:4..1935:9, property_schema: Ref { reference: "#/definitions/Target", title: None, description: None, deprecated: None } }, Key("bin"): PropertySchema { key_range: 1946:4..1946:9, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("Binary targets are executable programs that can be run after being compiled.\nThe default binary filename is `src/main.rs`, which defaults to the name of\nthe package. Additional binaries are stored in the [`src/bin/`\ndirectory](https://doc.rust-lang.org/cargo/guide/project-layout.html). The settings for each binary can be [customized](https://doc.rust-lang.org/cargo/reference/cargo-targets.html#configuring-a-target) in the `[[bin]]` tables in `Cargo.toml`.\n\nBinaries can use the public API of the package's library. They are also linked\nwith the [`[dependencies]`](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) defined in `Cargo.toml`.\n\nYou can run individual binaries with the [`cargo run`](https://doc.rust-lang.org/cargo/commands/cargo-run.html) command with the `--bin\n<bin-name>` option. [`cargo install`](https://doc.rust-lang.org/cargo/commands/cargo-install.html) can be used to copy the executable to a\ncommon location.\n\n```toml\n# Example of customizing binaries in Cargo.toml.\n[[bin]]\nname = \"cool-tool\"\ntest = false\nbench = false\n\n[[bin]]\nname = \"frobnicator\"\nrequired-features = [\"frobnicate\"]\n```"), range: 1946:11..1964:5, items: Some(RwLock { data: Ref { reference: "#/definitions/Target", title: None, description: Some("Binary targets are executable programs that can be run after being compiled.\nThe default binary filename is `src/main.rs`, which defaults to the name of\nthe package. Additional binaries are stored in the [`src/bin/`\ndirectory](https://doc.rust-lang.org/cargo/guide/project-layout.html). The settings for each binary can be [customized](https://doc.rust-lang.org/cargo/reference/cargo-targets.html#configuring-a-target) in the `[[bin]]` tables in `Cargo.toml`.\n\nBinaries can use the public API of the package's library. They are also linked\nwith the [`[dependencies]`](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) defined in `Cargo.toml`.\n\nYou can run individual binaries with the [`cargo run`](https://doc.rust-lang.org/cargo/commands/cargo-run.html) command with the `--bin\n<bin-name>` option. [`cargo install`](https://doc.rust-lang.org/cargo/commands/cargo-install.html) can be used to copy the executable to a\ncommon location.\n\n```toml\n# Example of customizing binaries in Cargo.toml.\n[[bin]]\nname = \"cool-tool\"\ntest = false\nbench = false\n\n[[bin]]\nname = \"frobnicator\"\nrequired-features = [\"frobnicate\"]\n```"), deprecated: None } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("example"): PropertySchema { key_range: 1965:4..1965:13, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("Files located under the [examples directory](https://doc.rust-lang.org/cargo/guide/project-layout.html) are example uses of the functionality provided by the library. When compiled, they are placed in the[ target/debug/examples directory](https://doc.rust-lang.org/cargo/guide/build-cache.html).\n\nExamples can use the public API of the package's library. They are also linked with the [dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) and [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) defined in Cargo.toml.\n\nBy default, examples are executable binaries (with a `main()` function). You\ncan specify the [`crate-type` field](https://doc.rust-lang.org/cargo/reference/cargo-targets.html#the-crate-type-field) to make an example\nbe compiled as a library:\n\n```toml\n[[example]]\nname = \"foo\"\ncrate-type = [\"staticlib\"]\n```\n\nYou can run individual executable examples with the [`cargo run`](https://doc.rust-lang.org/cargo/commands/cargo-run.html) command with\nthe `--example <example-name>` option. Library examples can be built with\n[`cargo build`](https://doc.rust-lang.org/cargo/commands/cargo-build.html) with the `--example <example-name>` option. [`cargo install`](https://doc.rust-lang.org/cargo/commands/cargo-install.html)\nwith the `--example <example-name>` option can be used to copy executable\nbinaries to a common location. Examples are compiled by [`cargo test`](https://doc.rust-lang.org/cargo/commands/cargo-test.html) by\ndefault to protect them from bit-rotting. Set [the `test`\nfield](https://doc.rust-lang.org/cargo/reference/cargo-targets.html#the-test-field) to `true` if you have `#[test]` functions in the\nexample that you want to run with [`cargo test`](https://doc.rust-lang.org/cargo/commands/cargo-test.html).\n"), range: 1965:15..1983:5, items: Some(RwLock { data: Ref { reference: "#/definitions/Target", title: None, description: Some("Files located under the [examples directory](https://doc.rust-lang.org/cargo/guide/project-layout.html) are example uses of the functionality provided by the library. When compiled, they are placed in the[ target/debug/examples directory](https://doc.rust-lang.org/cargo/guide/build-cache.html).\n\nExamples can use the public API of the package's library. They are also linked with the [dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) and [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) defined in Cargo.toml.\n\nBy default, examples are executable binaries (with a `main()` function). You\ncan specify the [`crate-type` field](https://doc.rust-lang.org/cargo/reference/cargo-targets.html#the-crate-type-field) to make an example\nbe compiled as a library:\n\n```toml\n[[example]]\nname = \"foo\"\ncrate-type = [\"staticlib\"]\n```\n\nYou can run individual executable examples with the [`cargo run`](https://doc.rust-lang.org/cargo/commands/cargo-run.html) command with\nthe `--example <example-name>` option. Library examples can be built with\n[`cargo build`](https://doc.rust-lang.org/cargo/commands/cargo-build.html) with the `--example <example-name>` option. [`cargo install`](https://doc.rust-lang.org/cargo/commands/cargo-install.html)\nwith the `--example <example-name>` option can be used to copy executable\nbinaries to a common location. Examples are compiled by [`cargo test`](https://doc.rust-lang.org/cargo/commands/cargo-test.html) by\ndefault to protect them from bit-rotting. Set [the `test`\nfield](https://doc.rust-lang.org/cargo/reference/cargo-targets.html#the-test-field) to `true` if you have `#[test]` functions in the\nexample that you want to run with [`cargo test`](https://doc.rust-lang.org/cargo/commands/cargo-test.html).\n"), deprecated: None } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("test"): PropertySchema { key_range: 1984:4..1984:10, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("Files located under the [`tests` directory](https://doc.rust-lang.org/cargo/guide/project-layout.html) are integration\ntests. When you run [`cargo test`](https://doc.rust-lang.org/cargo/commands/cargo-test.html), Cargo will compile each of these files as\na separate crate, and execute them.\n\nIntegration tests can use the public API of the package's library. They are\nalso linked with the [`[dependencies]`](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) and\n[`[dev-dependencies]`](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) defined in `Cargo.toml`.\n\nIf you want to share code among multiple integration tests, you can place it\nin a separate module such as `tests/common/mod.rs` and then put `mod common;`\nin each test to import it.\n\nEach integration test results in a separate executable binary, and [`cargo\ntest`](https://doc.rust-lang.org/cargo/commands/cargo-test.html) will run them serially. In some cases this can be inefficient, as it\ncan take longer to compile, and may not make full use of multiple CPUs when\nrunning the tests. If you have a lot of integration tests, you may want to\nconsider creating a single integration test, and split the tests into multiple\nmodules. The libtest harness will automatically find all of the `#[test]`\nannotated functions and run them in parallel. You can pass module names to\n[`cargo test`](https://doc.rust-lang.org/cargo/commands/cargo-test.html) to only run the tests within that module.\n\nBinary targets are automatically built if there is an integration test. This\nallows an integration test to execute the binary to exercise and test its\nbehavior. The `CARGO_BIN_EXE_<name>` [environment variable](https://doc.rust-lang.org/cargo/reference/environment-variables.html#environment-variables-cargo-sets-for-crates) is set when the\nintegration test is built so that it can use the [`env` macro](https://doc.rust-lang.org/std/macro.env.html) to locate the\nexecutable."), range: 1984:12..2002:5, items: Some(RwLock { data: Ref { reference: "#/definitions/Target", title: None, description: Some("Files located under the [`tests` directory](https://doc.rust-lang.org/cargo/guide/project-layout.html) are integration\ntests. When you run [`cargo test`](https://doc.rust-lang.org/cargo/commands/cargo-test.html), Cargo will compile each of these files as\na separate crate, and execute them.\n\nIntegration tests can use the public API of the package's library. They are\nalso linked with the [`[dependencies]`](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) and\n[`[dev-dependencies]`](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) defined in `Cargo.toml`.\n\nIf you want to share code among multiple integration tests, you can place it\nin a separate module such as `tests/common/mod.rs` and then put `mod common;`\nin each test to import it.\n\nEach integration test results in a separate executable binary, and [`cargo\ntest`](https://doc.rust-lang.org/cargo/commands/cargo-test.html) will run them serially. In some cases this can be inefficient, as it\ncan take longer to compile, and may not make full use of multiple CPUs when\nrunning the tests. If you have a lot of integration tests, you may want to\nconsider creating a single integration test, and split the tests into multiple\nmodules. The libtest harness will automatically find all of the `#[test]`\nannotated functions and run them in parallel. You can pass module names to\n[`cargo test`](https://doc.rust-lang.org/cargo/commands/cargo-test.html) to only run the tests within that module.\n\nBinary targets are automatically built if there is an integration test. This\nallows an integration test to execute the binary to exercise and test its\nbehavior. The `CARGO_BIN_EXE_<name>` [environment variable](https://doc.rust-lang.org/cargo/reference/environment-variables.html#environment-variables-cargo-sets-for-crates) is set when the\nintegration test is built so that it can use the [`env` macro](https://doc.rust-lang.org/std/macro.env.html) to locate the\nexecutable."), deprecated: None } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("bench"): PropertySchema { key_range: 2003:4..2003:11, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("Benchmarks provide a way to test the performance of your code using the\n[`cargo bench`](https://doc.rust-lang.org/cargo/commands/cargo-bench.html) command. They follow the same structure as [tests](https://doc.rust-lang.org/cargo/reference/cargo-targets.html#tests),\nwith each benchmark function annotated with the `#[bench]` attribute.\nSimilarly to tests:\n\n* Benchmarks are placed in the [`benches` directory](https://doc.rust-lang.org/cargo/guide/project-layout.html).\n* Benchmark functions defined in libraries and binaries have access to the\n  *private* API within the target they are defined in. Benchmarks in the\n  `benches` directory may use the *public* API.\n* [The `bench` field](https://doc.rust-lang.org/cargo/reference/cargo-targets.html#the-bench-field) can be used to define which targets\n  are benchmarked by default.\n* [The `harness` field](https://doc.rust-lang.org/cargo/reference/cargo-targets.html#the-harness-field) can be used to disable the\n  built-in harness.\n\n> **Note**: The [`#[bench]`\n> attribute](https://doc.rust-lang.org/unstable-book/library-features/test.html) is currently\n> unstable and only available on the [nightly channel](https://doc.rust-lang.org/book/appendix-07-nightly-rust.html). There are some\n> packages available on [crates.io](https://crates.io/keywords/benchmark) that\n> may help with running benchmarks on the stable channel, such as\n> [Criterion](https://crates.io/crates/criterion)."), range: 2003:13..2021:5, items: Some(RwLock { data: Ref { reference: "#/definitions/Target", title: None, description: Some("Benchmarks provide a way to test the performance of your code using the\n[`cargo bench`](https://doc.rust-lang.org/cargo/commands/cargo-bench.html) command. They follow the same structure as [tests](https://doc.rust-lang.org/cargo/reference/cargo-targets.html#tests),\nwith each benchmark function annotated with the `#[bench]` attribute.\nSimilarly to tests:\n\n* Benchmarks are placed in the [`benches` directory](https://doc.rust-lang.org/cargo/guide/project-layout.html).\n* Benchmark functions defined in libraries and binaries have access to the\n  *private* API within the target they are defined in. Benchmarks in the\n  `benches` directory may use the *public* API.\n* [The `bench` field](https://doc.rust-lang.org/cargo/reference/cargo-targets.html#the-bench-field) can be used to define which targets\n  are benchmarked by default.\n* [The `harness` field](https://doc.rust-lang.org/cargo/reference/cargo-targets.html#the-harness-field) can be used to disable the\n  built-in harness.\n\n> **Note**: The [`#[bench]`\n> attribute](https://doc.rust-lang.org/unstable-book/library-features/test.html) is currently\n> unstable and only available on the [nightly channel](https://doc.rust-lang.org/book/appendix-07-nightly-rust.html). There are some\n> packages available on [crates.io](https://crates.io/keywords/benchmark) that\n> may help with running benchmarks on the stable channel, such as\n> [Criterion](https://crates.io/crates/criterion)."), deprecated: None } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("dependencies"): PropertySchema { key_range: 2022:4..2022:18, property_schema: Resolved { schema_url: None, value: Table(TableSchema { title: None, description: Some("Cargo is configured to look for dependencies on [crates.io](https://crates.io) by default. Only\nthe name and a version string are required in this case. In [the cargo\nguide](https://doc.rust-lang.org/cargo/guide/index.html), we specified a dependency on the `time` crate:\n\n```toml\n[dependencies]\ntime = \"0.1.12\"\n```\n\nThe string `\"0.1.12\"` is a [semver](https://github.com/steveklabnik/semver#requirements) version requirement. Since this\nstring does not have any operators in it, it is interpreted the same way as\nif we had specified `\"^0.1.12\"`, which is called a caret requirement.\n\nA dependency can also be defined by a table with additional options:\n\n```toml\n[dependencies]\ntime = { path = \"../time\", version = \"0.1.12\" }\n```"), range: 2022:20..2034:5, properties: RwLock { data: {} }, pattern_properties: None, additional_properties: Some(true), additional_property_schema: Some((2025:30..2027:7, RwLock { data: Ref { reference: "#/definitions/Dependency", title: None, description: None, deprecated: None } })), required: None, min_properties: None, max_properties: None, keys_order: Some(Ascending), deprecated: None }) } }, Key("dev-dependencies"): PropertySchema { key_range: 2035:4..2035:22, property_schema: Resolved { schema_url: None, value: Table(TableSchema { title: None, description: Some("The format of `[dev-dependencies]` is equivalent to `[dependencies]`:\n\n```toml\n[dev-dependencies]\ntempdir = \"0.3\"\n```\n\nDev-dependencies are not used when compiling\na package for building, but are used for compiling tests, examples, and\nbenchmarks.\n\nThese dependencies are *not* propagated to other packages which depend on this\npackage.\n\nYou can also have target-specific development dependencies by using\n`dev-dependencies` in the target section header instead of `dependencies`. For\nexample:\n\n```toml\n[target.'cfg(unix)'.dev-dependencies]\nmio = \"0.0.1\"\n```\n\n> **Note**: When a package is published, only dev-dependencies that specify a\n> `version` will be included in the published crate. For most use cases,\n> dev-dependencies are not needed when published, though some users (like OS\n> packagers) may want to run tests within a crate, so providing a `version` if\n> possible can still be beneficial.\n"), range: 2035:24..2051:5, properties: RwLock { data: {} }, pattern_properties: None, additional_properties: Some(true), additional_property_schema: Some((2038:30..2040:7, RwLock { data: Ref { reference: "#/definitions/Dependency", title: None, description: None, deprecated: None } })), required: None, min_properties: None, max_properties: None, keys_order: Some(Ascending), deprecated: None }) } }, Key("build-dependencies"): PropertySchema { key_range: 2064:4..2064:24, property_schema: Resolved { schema_url: None, value: Table(TableSchema { title: None, description: Some("You can depend on other Cargo-based crates for use in your build scripts.\nDependencies are declared through the `build-dependencies` section of the\nmanifest:\n\n```toml\n[build-dependencies]\ncc = \"1.0.3\"\n```\n\nThe build script **does not** have access to the dependencies listed\nin the `dependencies` or `dev-dependencies` section. Build\ndependencies will likewise not be available to the package itself\nunless listed under the `dependencies` section as well. A package\nitself and its build script are built separately, so their\ndependencies need not coincide. Cargo is kept simpler and cleaner by\nusing independent dependencies for independent purposes."), range: 2064:26..2080:5, properties: RwLock { data: {} }, pattern_properties: None, additional_properties: Some(true), additional_property_schema: Some((2067:30..2069:7, RwLock { data: Ref { reference: "#/definitions/Dependency", title: None, description: None, deprecated: None } })), required: None, min_properties: None, max_properties: None, keys_order: Some(Ascending), deprecated: None }) } }, Key("target"): PropertySchema { key_range: 2093:4..2093:12, property_schema: Resolved { schema_url: None, value: Table(TableSchema { title: None, description: None, range: 2093:14..2099:5, properties: RwLock { data: {} }, pattern_properties: None, additional_properties: Some(true), additional_property_schema: Some((2096:30..2098:7, RwLock { data: Ref { reference: "#/definitions/Platform", title: None, description: None, deprecated: None } })), required: None, min_properties: None, max_properties: None, keys_order: Some(Ascending), deprecated: None }) } }, Key("badges"): PropertySchema { key_range: 2100:4..2100:12, property_schema: Resolved { schema_url: None, value: Table(TableSchema { title: None, description: Some("[crates.io](https://crates.io) can display various badges for build status, test coverage, etc. for\neach crate. All badges are optional.\n\n- The badges pertaining to build status that are currently available are\n  Appveyor, CircleCI, Cirrus CI, GitLab, Azure DevOps, Travis CI and Bitbucket\n  Pipelines.\n- Available badges pertaining to code test coverage are Codecov and Coveralls.\n- There are also maintenance-related badges based on isitmaintained.com\n  which state the issue resolution time, percent of open issues, and future\n  maintenance intentions.\n\nMost badge specifications require a `repository` key. It is expected to be in\n`user/repo` format.\n\n```toml\n[badges]\n\n# Appveyor: `repository` is required. `branch` is optional; default is `master`\n# `service` is optional; valid values are `github` (default), `bitbucket`, and\n# `gitlab`; `id` is optional; you can specify the appveyor project id if you\n# want to use that instead. `project_name` is optional; use when the repository\n# name differs from the appveyor project name.\nappveyor = { repository = \"...\", branch = \"master\", service = \"github\" }\n\n# Circle CI: `repository` is required. `branch` is optional; default is `master`\ncircle-ci = { repository = \"...\", branch = \"master\" }\n\n# Cirrus CI: `repository` is required. `branch` is optional; default is `master`\ncirrus-ci = { repository = \"...\", branch = \"master\" }\n\n# GitLab: `repository` is required. `branch` is optional; default is `master`\ngitlab = { repository = \"...\", branch = \"master\" }\n\n# Azure DevOps: `project` is required. `pipeline` is required. `build` is optional; default is `1`\n# Note: project = `organization/project`, pipeline = `name_of_pipeline`, build = `definitionId`\nazure-devops = { project = \"...\", pipeline = \"...\", build=\"2\" }\n\n# Travis CI: `repository` in format \"<user>/<project>\" is required.\n# `branch` is optional; default is `master`\ntravis-ci = { repository = \"...\", branch = \"master\" }\n\n# Bitbucket Pipelines: `repository` is required. `branch` is required\nbitbucket-pipelines = { repository = \"...\", branch = \"master\" }\n\n# Codecov: `repository` is required. `branch` is optional; default is `master`\n# `service` is optional; valid values are `github` (default), `bitbucket`, and\n# `gitlab`.\ncodecov = { repository = \"...\", branch = \"master\", service = \"github\" }\n\n# Coveralls: `repository` is required. `branch` is optional; default is `master`\n# `service` is optional; valid values are `github` (default) and `bitbucket`.\ncoveralls = { repository = \"...\", branch = \"master\", service = \"github\" }\n\n# Is it maintained resolution time: `repository` is required.\nis-it-maintained-issue-resolution = { repository = \"...\" }\n\n# Is it maintained percentage of open issues: `repository` is required.\nis-it-maintained-open-issues = { repository = \"...\" }\n\n# Maintenance: `status` is required. Available options are:\n# - `actively-developed`: New features are being added and bugs are being fixed.\n# - `passively-maintained`: There are no plans for new features, but the maintainer intends to\n#   respond to issues that get filed.\n# - `as-is`: The crate is feature complete, the maintainer does not intend to continue working on\n#   it or providing support, but it works for the purposes it was designed for.\n# - `experimental`: The author wants to share it with the community but is not intending to meet\n#   anyone's particular use case.\n# - `looking-for-maintainer`: The current maintainer would like to transfer the crate to someone\n#   else.\n# - `deprecated`: The maintainer does not recommend using this crate (the description of the crate\n#   can describe why, there could be a better solution available or there could be problems with\n#   the crate that the author does not want to fix).\n# - `none`: Displays no badge on crates.io, since the maintainer has not chosen to specify\n#   their intentions, potential crate users will need to investigate on their own.\nmaintenance = { status = \"...\" }\n```"), range: 2100:14..2116:5, properties: RwLock { data: {} }, pattern_properties: None, additional_properties: Some(true), additional_property_schema: Some((2103:30..2109:7, RwLock { data: Resolved { schema_url: None, value: Table(TableSchema { title: None, description: None, range: 2103:30..2109:7, properties: RwLock { data: {} }, pattern_properties: None, additional_properties: Some(true), additional_property_schema: Some((2105:32..2107:9, RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: None, range: 2105:32..2107:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } })), required: None, min_properties: None, max_properties: None, keys_order: Some(Ascending), deprecated: None }) } })), required: None, min_properties: None, max_properties: None, keys_order: Some(Ascending), deprecated: None }) } }, Key("features"): PropertySchema { key_range: 2117:4..2117:14, property_schema: Resolved { schema_url: None, value: Table(TableSchema { title: None, description: Some("Cargo supports features to allow expression of:\n\n* conditional compilation options (usable through `cfg` attributes);\n* optional dependencies, which enhance a package, but are not required; and\n* clusters of optional dependencies, such as `postgres-all`, that would include the\n  `postgres` package, the `postgres-macros` package, and possibly other packages\n  (such as development-time mocking libraries, debugging tools, etc.).\n\nA feature of a package is either an optional dependency, or a set of other\nfeatures.\n"), range: 2117:16..2133:5, properties: RwLock { data: {} }, pattern_properties: None, additional_properties: Some(true), additional_property_schema: Some((2120:30..2126:7, RwLock { data: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: None, range: 2120:30..2126:7, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: None, range: 2122:17..2124:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } })), required: None, min_properties: None, max_properties: None, keys_order: Some(Ascending), deprecated: None }) } }, Key("lints"): PropertySchema { key_range: 2134:4..2134:11, property_schema: Resolved { schema_url: None, value: AnyOf(AnyOfSchema { title: None, description: Some("Override the default level of lints from different tools by assigning them to a new level in a table."), range: 2134:13..2158:5, schemas: RwLock { data: [Ref { reference: "#/definitions/Lints", title: None, description: None, deprecated: None }, Resolved { schema_url: None, value: Table(TableSchema { title: None, description: None, range: 2140:8..2151:9, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 2143:12..2143:23, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit lints from the workspace manifest."), range: 2143:25..2146:13, default: None, enumerate: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: Some(["workspace"]), min_properties: None, max_properties: None, keys_order: Some(Ascending), deprecated: None }) }] }, default: None, deprecated: None }) } }, Key("patch"): PropertySchema { key_range: 2159:4..2159:11, property_schema: Resolved { schema_url: None, value: Table(TableSchema { title: None, description: Some("The `[patch]` section of `Cargo.toml` can be used to override dependencies\nwith other copies. The syntax is similar to the\n[`[dependencies]`](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) section.\n\n"), range: 2159:13..2175:5, properties: RwLock { data: {} }, pattern_properties: None, additional_properties: Some(true), additional_property_schema: Some((2162:30..2168:7, RwLock { data: Resolved { schema_url: None, value: Table(TableSchema { title: None, description: None, range: 2162:30..2168:7, properties: RwLock { data: {} }, pattern_properties: None, additional_properties: Some(true), additional_property_schema: Some((2164:32..2166:9, RwLock { data: Ref { reference: "#/definitions/Dependency", title: None, description: None, deprecated: None } })), required: None, min_properties: None, max_properties: None, keys_order: Some(Ascending), deprecated: None }) } })), required: None, min_properties: None, max_properties: None, keys_order: Some(Ascending), deprecated: None }) } }, Key("profile"): PropertySchema { key_range: 2186:4..2186:13, property_schema: Ref { reference: "#/definitions/Profiles", title: None, description: None, deprecated: None } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: None, max_properties: None, keys_order: Some(Schema), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-ast-editor/src/edit/array_of_table.rs:17[0m
[1;35m  Trace[0m: self = Table(Table { kind: Table, range: 9:0..13:0, symbol_range: 9:0..13:0, key_values: {Key { kind: BareKey, value: "name", range: 10:0..10:4 }: String(String { kind: BasicString(BasicString { syntax: BASIC_STRING @221..228 @11:1..11:8 }), value: "tombi" }), Key { kind: BareKey, value: "path", range: 11:0..11:4 }: String(String { kind: BasicString(BasicString { syntax: BASIC_STRING @236..249 @12:1..12:14 }), value: "src/main.rs" })} })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Table(TableSchema { title: None, description: Some("Binary targets are executable programs that can be run after being compiled.\nThe default binary filename is `src/main.rs`, which defaults to the name of\nthe package. Additional binaries are stored in the [`src/bin/`\ndirectory](https://doc.rust-lang.org/cargo/guide/project-layout.html). The settings for each binary can be [customized](https://doc.rust-lang.org/cargo/reference/cargo-targets.html#configuring-a-target) in the `[[bin]]` tables in `Cargo.toml`.\n\nBinaries can use the public API of the package's library. They are also linked\nwith the [`[dependencies]`](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) defined in `Cargo.toml`.\n\nYou can run individual binaries with the [`cargo run`](https://doc.rust-lang.org/cargo/commands/cargo-run.html) command with the `--bin\n<bin-name>` option. [`cargo install`](https://doc.rust-lang.org/cargo/commands/cargo-install.html) can be used to copy the executable to a\ncommon location.\n\n```toml\n# Example of customizing binaries in Cargo.toml.\n[[bin]]\nname = \"cool-tool\"\ntest = false\nbench = false\n\n[[bin]]\nname = \"frobnicator\"\nrequired-features = [\"frobnicate\"]\n```"), range: 1161:14..1327:5, properties: RwLock { data: {Key("bench"): PropertySchema { key_range: 1165:8..1165:15, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("The `bench` field indicates whether or not the target is benchmarked by\ndefault by [`cargo bench`](https://doc.rust-lang.org/cargo/commands/cargo-bench.html). The default is `true` for lib, bins, and\nbenchmarks."), range: 1165:17..1173:9, default: None, enumerate: None, deprecated: None }) } }, Key("crate-type"): PropertySchema { key_range: 1174:8..1174:20, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("The `crate-type` field defines the [crate types](https://doc.rust-lang.org/reference/linkage.html) that will be generated by the\ntarget. It is an array of strings, allowing you to specify multiple crate\ntypes for a single target. This can only be specified for libraries and\nexamples. Binaries, tests, and benchmarks are always the \"bin\" crate type.\n\nThe available options are `bin`, `lib`, `rlib`, `dylib`, `cdylib`,\n`staticlib`, and `proc-macro`. You can read more about the different crate\ntypes in the [Rust Reference Manual](https://doc.rust-lang.org/reference/linkage.html)."), range: 1174:22..1214:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("The `crate-type` field defines the [crate types](https://doc.rust-lang.org/reference/linkage.html) that will be generated by the\ntarget. It is an array of strings, allowing you to specify multiple crate\ntypes for a single target. This can only be specified for libraries and\nexamples. Binaries, tests, and benchmarks are always the \"bin\" crate type.\n\nThe available options are `bin`, `lib`, `rlib`, `dylib`, `cdylib`,\n`staticlib`, and `proc-macro`. You can read more about the different crate\ntypes in the [Rust Reference Manual](https://doc.rust-lang.org/reference/linkage.html)."), range: 1177:19..1196:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("doc"): PropertySchema { key_range: 1228:8..1228:13, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("The `doc` field indicates whether or not the target is included in the\ndocumentation generated by [`cargo doc`](https://doc.rust-lang.org/cargo/commands/cargo-doc.html) by default. The default is `true` for\nlibraries and binaries.\n\n> **Note**: The binary will be skipped if its name is the same as the lib\n> target."), range: 1228:15..1236:9, default: None, enumerate: None, deprecated: None }) } }, Key("doctest"): PropertySchema { key_range: 1237:8..1237:17, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("The `doctest` field indicates whether or not [documentation examples](https://doc.rust-lang.org/rustdoc/documentation-tests.html) are\ntested by default by [`cargo test`](https://doc.rust-lang.org/cargo/commands/cargo-test.html). This is only relevant for libraries, it\nhas no effect on other sections. The default is `true` for the library.\n"), range: 1237:19..1245:9, default: None, enumerate: None, deprecated: None }) } }, Key("edition"): PropertySchema { key_range: 1246:8..1246:17, property_schema: Ref { reference: "#/definitions/Edition", title: None, description: None, deprecated: None } }, Key("harness"): PropertySchema { key_range: 1249:8..1249:17, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("The `harness` field indicates that the [`--test` flag](https://doc.rust-lang.org/rustc/command-line-arguments.html#option-test) will be passed to\n`rustc` which will automatically include the libtest library which is the\ndriver for collecting and running tests marked with the [`#[test]` attribute](https://doc.rust-lang.org/reference/attributes/testing.html#the-test-attribute) or benchmarks with the `#[bench]` attribute. The\ndefault is `true` for all targets.\n\nIf set to `false`, then you are responsible for defining a `main()` function\nto run tests and benchmarks.\n\nTests have the [`cfg(test)` conditional expression](https://doc.rust-lang.org/reference/conditional-compilation.html#test) enabled whether\nor not the harness is enabled."), range: 1249:19..1257:9, default: None, enumerate: None, deprecated: None }) } }, Key("name"): PropertySchema { key_range: 1258:8..1258:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("The `name` field specifies the name of the target, which corresponds to the\nfilename of the artifact that will be generated. For a library, this is the\ncrate name that dependencies will use to reference it.\n\nFor the `[lib]` and the default binary (`src/main.rs`), this defaults to the\nname of the package, with any dashes replaced with underscores. For other\n[auto discovered](https://doc.rust-lang.org/cargo/reference/cargo-targets.html#target-auto-discovery) targets, it defaults to the\ndirectory or file name.\n\nThis is required for all targets except `[lib]`."), range: 1258:16..1266:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 1267:8..1267:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("The `path` field specifies where the source for the crate is located, relative\nto the `Cargo.toml` file.\n\nIf not specified, the [inferred path](https://doc.rust-lang.org/cargo/reference/cargo-targets.html#target-auto-discovery) is used based on\nthe target name."), range: 1267:16..1275:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("proc-macro"): PropertySchema { key_range: 1282:8..1282:20, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("The `proc-macro` field indicates that the library is a [procedural macro](https://doc.rust-lang.org/book/ch19-06-macros.html)\n([reference](https://doc.rust-lang.org/reference/procedural-macros.html)). This is only valid for the `[lib]`\ntarget."), range: 1282:22..1290:9, default: None, enumerate: None, deprecated: None }) } }, Key("required-features"): PropertySchema { key_range: 1297:8..1297:27, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("The `required-features` field specifies which [features](https://doc.rust-lang.org/cargo/reference/features.html) the target needs in\norder to be built. If any of the required features are not enabled, the\ntarget will be skipped. This is only relevant for the `[[bin]]`, `[[bench]]`,\n`[[test]]`, and `[[example]]` sections, it has no effect on `[lib]`.\n\n```toml\n[features]\n# ...\npostgres = []\nsqlite = []\ntools = []\n\n[[bin]]\nname = \"my-pg-tool\"\nrequired-features = [\"postgres\", \"tools\"]\n```\n"), range: 1297:29..1315:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("The `required-features` field specifies which [features](https://doc.rust-lang.org/cargo/reference/features.html) the target needs in\norder to be built. If any of the required features are not enabled, the\ntarget will be skipped. This is only relevant for the `[[bin]]`, `[[bench]]`,\n`[[test]]`, and `[[example]]` sections, it has no effect on `[lib]`.\n\n```toml\n[features]\n# ...\npostgres = []\nsqlite = []\ntools = []\n\n[[bin]]\nname = \"my-pg-tool\"\nrequired-features = [\"postgres\", \"tools\"]\n```\n"), range: 1300:19..1308:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("test"): PropertySchema { key_range: 1316:8..1316:14, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("The `test` field indicates whether or not the target is tested by default by\n[`cargo test`](https://doc.rust-lang.org/cargo/commands/cargo-test.html). The default is `true` for lib, bins, and tests.\n\n> **Note**: Examples are built by [`cargo test`](https://doc.rust-lang.org/cargo/commands/cargo-test.html) by default to ensure they\n> continue to compile, but they are not *tested* by default. Setting `test =\n> true` for an example will also build it as a test and run any\n> [`#[test]`](https://doc.rust-lang.org/reference/attributes/testing.html#the-test-attribute) functions defined in the example."), range: 1316:16..1324:9, default: None, enumerate: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: None, additional_property_schema: None, required: None, min_properties: None, max_properties: None, keys_order: Some(Schema), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table { kind: Table, range: 9:0..13:0, symbol_range: 9:0..13:0, key_values: {Key { kind: BareKey, value: "name", range: 10:0..10:4 }: String(String { kind: BasicString(BasicString { syntax: BASIC_STRING @221..228 @11:1..11:8 }), value: "tombi" }), Key { kind: BareKey, value: "path", range: 11:0..11:4 }: String(String { kind: BasicString(BasicString { syntax: BASIC_STRING @236..249 @12:1..12:14 }), value: "src/main.rs" })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("bin"), Index]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Table(TableSchema { title: None, description: Some("Binary targets are executable programs that can be run after being compiled.\nThe default binary filename is `src/main.rs`, which defaults to the name of\nthe package. Additional binaries are stored in the [`src/bin/`\ndirectory](https://doc.rust-lang.org/cargo/guide/project-layout.html). The settings for each binary can be [customized](https://doc.rust-lang.org/cargo/reference/cargo-targets.html#configuring-a-target) in the `[[bin]]` tables in `Cargo.toml`.\n\nBinaries can use the public API of the package's library. They are also linked\nwith the [`[dependencies]`](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) defined in `Cargo.toml`.\n\nYou can run individual binaries with the [`cargo run`](https://doc.rust-lang.org/cargo/commands/cargo-run.html) command with the `--bin\n<bin-name>` option. [`cargo install`](https://doc.rust-lang.org/cargo/commands/cargo-install.html) can be used to copy the executable to a\ncommon location.\n\n```toml\n# Example of customizing binaries in Cargo.toml.\n[[bin]]\nname = \"cool-tool\"\ntest = false\nbench = false\n\n[[bin]]\nname = \"frobnicator\"\nrequired-features = [\"frobnicate\"]\n```"), range: 1161:14..1327:5, properties: RwLock { data: {Key("bench"): PropertySchema { key_range: 1165:8..1165:15, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("The `bench` field indicates whether or not the target is benchmarked by\ndefault by [`cargo bench`](https://doc.rust-lang.org/cargo/commands/cargo-bench.html). The default is `true` for lib, bins, and\nbenchmarks."), range: 1165:17..1173:9, default: None, enumerate: None, deprecated: None }) } }, Key("crate-type"): PropertySchema { key_range: 1174:8..1174:20, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("The `crate-type` field defines the [crate types](https://doc.rust-lang.org/reference/linkage.html) that will be generated by the\ntarget. It is an array of strings, allowing you to specify multiple crate\ntypes for a single target. This can only be specified for libraries and\nexamples. Binaries, tests, and benchmarks are always the \"bin\" crate type.\n\nThe available options are `bin`, `lib`, `rlib`, `dylib`, `cdylib`,\n`staticlib`, and `proc-macro`. You can read more about the different crate\ntypes in the [Rust Reference Manual](https://doc.rust-lang.org/reference/linkage.html)."), range: 1174:22..1214:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("The `crate-type` field defines the [crate types](https://doc.rust-lang.org/reference/linkage.html) that will be generated by the\ntarget. It is an array of strings, allowing you to specify multiple crate\ntypes for a single target. This can only be specified for libraries and\nexamples. Binaries, tests, and benchmarks are always the \"bin\" crate type.\n\nThe available options are `bin`, `lib`, `rlib`, `dylib`, `cdylib`,\n`staticlib`, and `proc-macro`. You can read more about the different crate\ntypes in the [Rust Reference Manual](https://doc.rust-lang.org/reference/linkage.html)."), range: 1177:19..1196:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("doc"): PropertySchema { key_range: 1228:8..1228:13, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("The `doc` field indicates whether or not the target is included in the\ndocumentation generated by [`cargo doc`](https://doc.rust-lang.org/cargo/commands/cargo-doc.html) by default. The default is `true` for\nlibraries and binaries.\n\n> **Note**: The binary will be skipped if its name is the same as the lib\n> target."), range: 1228:15..1236:9, default: None, enumerate: None, deprecated: None }) } }, Key("doctest"): PropertySchema { key_range: 1237:8..1237:17, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("The `doctest` field indicates whether or not [documentation examples](https://doc.rust-lang.org/rustdoc/documentation-tests.html) are\ntested by default by [`cargo test`](https://doc.rust-lang.org/cargo/commands/cargo-test.html). This is only relevant for libraries, it\nhas no effect on other sections. The default is `true` for the library.\n"), range: 1237:19..1245:9, default: None, enumerate: None, deprecated: None }) } }, Key("edition"): PropertySchema { key_range: 1246:8..1246:17, property_schema: Ref { reference: "#/definitions/Edition", title: None, description: None, deprecated: None } }, Key("harness"): PropertySchema { key_range: 1249:8..1249:17, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("The `harness` field indicates that the [`--test` flag](https://doc.rust-lang.org/rustc/command-line-arguments.html#option-test) will be passed to\n`rustc` which will automatically include the libtest library which is the\ndriver for collecting and running tests marked with the [`#[test]` attribute](https://doc.rust-lang.org/reference/attributes/testing.html#the-test-attribute) or benchmarks with the `#[bench]` attribute. The\ndefault is `true` for all targets.\n\nIf set to `false`, then you are responsible for defining a `main()` function\nto run tests and benchmarks.\n\nTests have the [`cfg(test)` conditional expression](https://doc.rust-lang.org/reference/conditional-compilation.html#test) enabled whether\nor not the harness is enabled."), range: 1249:19..1257:9, default: None, enumerate: None, deprecated: None }) } }, Key("name"): PropertySchema { key_range: 1258:8..1258:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("The `name` field specifies the name of the target, which corresponds to the\nfilename of the artifact that will be generated. For a library, this is the\ncrate name that dependencies will use to reference it.\n\nFor the `[lib]` and the default binary (`src/main.rs`), this defaults to the\nname of the package, with any dashes replaced with underscores. For other\n[auto discovered](https://doc.rust-lang.org/cargo/reference/cargo-targets.html#target-auto-discovery) targets, it defaults to the\ndirectory or file name.\n\nThis is required for all targets except `[lib]`."), range: 1258:16..1266:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 1267:8..1267:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("The `path` field specifies where the source for the crate is located, relative\nto the `Cargo.toml` file.\n\nIf not specified, the [inferred path](https://doc.rust-lang.org/cargo/reference/cargo-targets.html#target-auto-discovery) is used based on\nthe target name."), range: 1267:16..1275:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("proc-macro"): PropertySchema { key_range: 1282:8..1282:20, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("The `proc-macro` field indicates that the library is a [procedural macro](https://doc.rust-lang.org/book/ch19-06-macros.html)\n([reference](https://doc.rust-lang.org/reference/procedural-macros.html)). This is only valid for the `[lib]`\ntarget."), range: 1282:22..1290:9, default: None, enumerate: None, deprecated: None }) } }, Key("required-features"): PropertySchema { key_range: 1297:8..1297:27, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("The `required-features` field specifies which [features](https://doc.rust-lang.org/cargo/reference/features.html) the target needs in\norder to be built. If any of the required features are not enabled, the\ntarget will be skipped. This is only relevant for the `[[bin]]`, `[[bench]]`,\n`[[test]]`, and `[[example]]` sections, it has no effect on `[lib]`.\n\n```toml\n[features]\n# ...\npostgres = []\nsqlite = []\ntools = []\n\n[[bin]]\nname = \"my-pg-tool\"\nrequired-features = [\"postgres\", \"tools\"]\n```\n"), range: 1297:29..1315:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("The `required-features` field specifies which [features](https://doc.rust-lang.org/cargo/reference/features.html) the target needs in\norder to be built. If any of the required features are not enabled, the\ntarget will be skipped. This is only relevant for the `[[bin]]`, `[[bench]]`,\n`[[test]]`, and `[[example]]` sections, it has no effect on `[lib]`.\n\n```toml\n[features]\n# ...\npostgres = []\nsqlite = []\ntools = []\n\n[[bin]]\nname = \"my-pg-tool\"\nrequired-features = [\"postgres\", \"tools\"]\n```\n"), range: 1300:19..1308:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("test"): PropertySchema { key_range: 1316:8..1316:14, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("The `test` field indicates whether or not the target is tested by default by\n[`cargo test`](https://doc.rust-lang.org/cargo/commands/cargo-test.html). The default is `true` for lib, bins, and tests.\n\n> **Note**: Examples are built by [`cargo test`](https://doc.rust-lang.org/cargo/commands/cargo-test.html) by default to ensure they\n> continue to compile, but they are not *tested* by default. Setting `test =\n> true` for an example will also build it as a test and run any\n> [`#[test]`](https://doc.rust-lang.org/reference/attributes/testing.html#the-test-attribute) functions defined in the example."), range: 1316:16..1324:9, default: None, enumerate: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: None, additional_property_schema: None, required: None, min_properties: None, max_properties: None, keys_order: Some(Schema), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: property_schema = Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("The `name` field specifies the name of the target, which corresponds to the\nfilename of the artifact that will be generated. For a library, this is the\ncrate name that dependencies will use to reference it.\n\nFor the `[lib]` and the default binary (`src/main.rs`), this defaults to the\nname of the package, with any dashes replaced with underscores. For other\n[auto discovered](https://doc.rust-lang.org/cargo/reference/cargo-targets.html#target-auto-discovery) targets, it defaults to the\ndirectory or file name.\n\nThis is required for all targets except `[lib]`."), range: 1258:16..1266:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:133[0m
[1;35m  Trace[0m: self = String(String { kind: BasicString(BasicString { syntax: BASIC_STRING @221..228 @11:1..11:8 }), value: "tombi" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: String(StringSchema { title: None, description: Some("The `name` field specifies the name of the target, which corresponds to the\nfilename of the artifact that will be generated. For a library, this is the\ncrate name that dependencies will use to reference it.\n\nFor the `[lib]` and the default binary (`src/main.rs`), this defaults to the\nname of the package, with any dashes replaced with underscores. For other\n[auto discovered](https://doc.rust-lang.org/cargo/reference/cargo-targets.html#target-auto-discovery) targets, it defaults to the\ndirectory or file name.\n\nThis is required for all targets except `[lib]`."), range: 1258:16..1266:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: property_schema = Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("The `path` field specifies where the source for the crate is located, relative\nto the `Cargo.toml` file.\n\nIf not specified, the [inferred path](https://doc.rust-lang.org/cargo/reference/cargo-targets.html#target-auto-discovery) is used based on\nthe target name."), range: 1267:16..1275:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:133[0m
[1;35m  Trace[0m: self = String(String { kind: BasicString(BasicString { syntax: BASIC_STRING @236..249 @12:1..12:14 }), value: "src/main.rs" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: String(StringSchema { title: None, description: Some("The `path` field specifies where the source for the crate is located, relative\nto the `Cargo.toml` file.\n\nIf not specified, the [inferred path](https://doc.rust-lang.org/cargo/reference/cargo-targets.html#target-auto-discovery) is used based on\nthe target name."), range: 1267:16..1275:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Table(TableSchema { title: Some("Cargo.toml"), description: Some("A schema for Cargo.toml."), range: 0:0..2198:1, properties: RwLock { data: {Key("cargo-features"): PropertySchema { key_range: 1914:4..1914:20, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: None, range: 1914:22..1920:5, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: None, range: 1916:15..1918:7, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("package"): PropertySchema { key_range: 1921:4..1921:13, property_schema: Resolved { schema_url: None, value: Table(TableSchema { title: Some("Package"), description: Some("The only field required by Cargo is [`name`](https://doc.rust-lang.org/cargo/reference/manifest.html#the-name-field).\n If publishing to a registry, the registry may\nrequire additional fields. See the notes below and [the publishing chapter](https://doc.rust-lang.org/cargo/reference/publishing.html) for requirements for publishing to [crates.io](https://crates.io/)."), range: 399:15..723:5, properties: RwLock { data: {Key("name"): PropertySchema { key_range: 405:8..405:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("The package name is an identifier used to refer to the package. It is used\nwhen listed as a dependency in another package, and as the default name of\ninferred lib and bin targets.\n\nThe name must use only [alphanumeric](https://doc.rust-lang.org/std/primitive.char.html#method.is_alphanumeric) characters or `-` or `_`, and cannot be empty.\nNote that [`cargo new`](https://doc.rust-lang.org/cargo/commands/cargo-new.html) and [`cargo init`](https://doc.rust-lang.org/cargo/commands/cargo-init.html) impose some additional restrictions on\nthe package name, such as enforcing that it is a valid Rust identifier and not\na keyword. [crates.io](https://crates.io) imposes even more restrictions, such as\nenforcing only ASCII characters, not a reserved name, not a special Windows\nname such as \"nul\", is not too long, etc."), range: 405:16..413:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 414:8..414:17, property_schema: Resolved { schema_url: None, value: AnyOf(AnyOfSchema { title: Some("Semantic Version"), description: Some("Cargo bakes in the concept of [Semantic Versioning](https://semver.org/), so make sure you follow some basic rules:\n\n* Before you reach 1.0.0, anything goes, but if you make breaking changes,\n    increment the minor version. In Rust, breaking changes include adding fields to\n    structs or variants to enums.\n* After 1.0.0, only make breaking changes when you increment the major version.\n    Don't break the build.\n* After 1.0.0, don't add any new public API (no new `pub` anything) in patch-level\n    versions. Always increment the minor version if you add any new `pub` structs,\n    traits, fields, types, functions, methods or anything else.\n* Use version numbers with three numeric parts such as 1.0.0 rather than 1.0."), range: 414:19..425:9, schemas: RwLock { data: [Resolved { schema_url: None, value: String(StringSchema { title: Some("Semantic Version"), description: Some("Cargo bakes in the concept of [Semantic Versioning](https://semver.org/), so make sure you follow some basic rules:\n\n* Before you reach 1.0.0, anything goes, but if you make breaking changes,\n    increment the minor version. In Rust, breaking changes include adding fields to\n    structs or variants to enums.\n* After 1.0.0, only make breaking changes when you increment the major version.\n    Don't break the build.\n* After 1.0.0, don't add any new public API (no new `pub` anything) in patch-level\n    versions. Always increment the minor version if you add any new `pub` structs,\n    traits, fields, types, functions, methods or anything else.\n* Use version numbers with three numeric parts such as 1.0.0 rather than 1.0."), range: 1133:14..1144:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("0.1.0"), deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: None, description: None, range: 1662:28..1675:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 1665:8..1665:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: Some("Workspace"), description: Some("The `workspace` field allow keys to be inherited by defining them in the member package with `{key}.workspace = true`"), range: 1665:21..1670:9, default: None, enumerate: Some([true]), deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: Some(["workspace"]), min_properties: None, max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }) } }, Key("authors"): PropertySchema { key_range: 426:8..426:17, property_schema: Resolved { schema_url: None, value: AnyOf(AnyOfSchema { title: Some("Authors"), description: Some("The `authors` field lists people or organizations that are considered the\n\"authors\" of the package. The exact meaning is open to interpretation — it may\nlist the original or primary authors, current maintainers, or owners of the\npackage. These names will be listed on the crate's page on\n[crates.io](https://crates.io). An optional email address may be included within angled\nbrackets at the end of each author.\n\n> **Note**: [crates.io](https://crates.io) requires at least one author to be listed."), range: 426:19..437:9, schemas: RwLock { data: [Resolved { schema_url: None, value: Array(ArraySchema { title: Some("Authors"), description: Some("The `authors` field lists people or organizations that are considered the\n\"authors\" of the package. The exact meaning is open to interpretation — it may\nlist the original or primary authors, current maintainers, or owners of the\npackage. These names will be listed on the crate's page on\n[crates.io](https://crates.io). An optional email address may be included within angled\nbrackets at the end of each author.\n\n> **Note**: [crates.io](https://crates.io) requires at least one author to be listed."), range: 1493:15..1512:5, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("The `authors` field lists people or organizations that are considered the\n\"authors\" of the package. The exact meaning is open to interpretation — it may\nlist the original or primary authors, current maintainers, or owners of the\npackage. These names will be listed on the crate's page on\n[crates.io](https://crates.io). An optional email address may be included within angled\nbrackets at the end of each author.\n\n> **Note**: [crates.io](https://crates.io) requires at least one author to be listed."), range: 1497:15..1505:7, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: None, description: None, range: 1662:28..1675:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 1665:8..1665:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: Some("Workspace"), description: Some("The `workspace` field allow keys to be inherited by defining them in the member package with `{key}.workspace = true`"), range: 1665:21..1670:9, default: None, enumerate: Some([true]), deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: Some(["workspace"]), min_properties: None, max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }) } }, Key("edition"): PropertySchema { key_range: 438:8..438:17, property_schema: Resolved { schema_url: None, value: AnyOf(AnyOfSchema { title: Some("Edition"), description: Some("The `edition` key affects which edition your package is compiled with. Cargo\nwill always generate packages via [`cargo new`](https://doc.rust-lang.org/cargo/commands/cargo-new.html) with the `edition` key set to the\nlatest edition. Setting the `edition` key in `[package]` will affect all\ntargets/crates in the package, including test suites, benchmarks, binaries,\nexamples, etc."), range: 438:19..449:9, schemas: RwLock { data: [Resolved { schema_url: None, value: String(StringSchema { title: Some("Edition"), description: Some("The `edition` key affects which edition your package is compiled with. Cargo\nwill always generate packages via [`cargo new`](https://doc.rust-lang.org/cargo/commands/cargo-new.html) with the `edition` key set to the\nlatest edition. Setting the `edition` key in `[package]` will affect all\ntargets/crates in the package, including test suites, benchmarks, binaries,\nexamples, etc."), range: 252:15..262:5, min_length: None, max_length: None, pattern: None, enumerate: Some(["2015", "2018", "2021", "2024"]), default: None, deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: None, description: None, range: 1662:28..1675:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 1665:8..1665:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: Some("Workspace"), description: Some("The `workspace` field allow keys to be inherited by defining them in the member package with `{key}.workspace = true`"), range: 1665:21..1670:9, default: None, enumerate: Some([true]), deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: Some(["workspace"]), min_properties: None, max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }) } }, Key("rust-version"): PropertySchema { key_range: 450:8..450:22, property_schema: Resolved { schema_url: None, value: AnyOf(AnyOfSchema { title: Some("RustVersion"), description: Some("The `rust-version` field is an optional key that tells cargo what version of the\nRust language and compiler your package can be compiled with. If the currently\nselected version of the Rust compiler is older than the stated version, cargo\nwill exit with an error, telling the user what version is required.\n\nThe first version of Cargo that supports this field was released with Rust 1.56.0.\nIn older releases, the field will be ignored, and Cargo will display a warning.\n\n```toml\n[package]\n# ...\nrust-version = \"1.56\"\n```\n\nThe Rust version must be a bare version number with two or three components; it\ncannot include semver operators or pre-release identifiers. Compiler pre-release\nidentifiers such as -nightly will be ignored while checking the Rust version.\nThe `rust-version` must be equal to or newer than the version that first\nintroduced the configured `edition`.\n\nThe `rust-version` may be ignored using the `--ignore-rust-version` option.\n\nSetting the `rust-version` key in `[package]` will affect all targets/crates in\nthe package, including test suites, benchmarks, binaries, examples, etc."), range: 450:24..461:9, schemas: RwLock { data: [Ref { reference: "#/definitions/RustVersion", title: None, description: None, deprecated: None }, Ref { reference: "#/definitions/WorkspaceInheritance", title: None, description: None, deprecated: None }] }, default: None, deprecated: None }) } }, Key("description"): PropertySchema { key_range: 462:8..462:21, property_schema: Resolved { schema_url: None, value: AnyOf(AnyOfSchema { title: Some("Description"), description: Some("The description is a short blurb about the package. [crates.io](https://crates.io) will display\nthis with your package. This should be plain text (not Markdown).\n\n```toml\n[package]\n# ...\ndescription = \"A short description of my package\"\n```\n\n> **Note**: [crates.io](https://crates.io) requires the `description` to be set."), range: 462:23..473:9, schemas: RwLock { data: [Resolved { schema_url: None, value: String(StringSchema { title: Some("Description"), description: Some("The description is a short blurb about the package. [crates.io](https://crates.io) will display\nthis with your package. This should be plain text (not Markdown).\n\n```toml\n[package]\n# ...\ndescription = \"A short description of my package\"\n```\n\n> **Note**: [crates.io](https://crates.io) requires the `description` to be set."), range: 1533:19..1542:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: None, description: None, range: 1662:28..1675:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 1665:8..1665:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: Some("Workspace"), description: Some("The `workspace` field allow keys to be inherited by defining them in the member package with `{key}.workspace = true`"), range: 1665:21..1670:9, default: None, enumerate: Some([true]), deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: Some(["workspace"]), min_properties: None, max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }) } }, Key("documentation"): PropertySchema { key_range: 474:8..474:23, property_schema: Resolved { schema_url: None, value: AnyOf(AnyOfSchema { title: Some("Documentation"), description: Some("\nThe `documentation` field specifies a URL to a website hosting the crate's\ndocumentation. If no URL is specified in the manifest file, [crates.io](https://crates.io) will\nautomatically link your crate to the corresponding [docs.rs](https://docs.rs) page.\n\n```toml\n[package]\n# ...\ndocumentation = \"https://docs.rs/bitflags\"\n```\n"), range: 474:25..485:9, schemas: RwLock { data: [Ref { reference: "#/definitions/Documentation", title: None, description: None, deprecated: None }, Ref { reference: "#/definitions/WorkspaceInheritance", title: None, description: None, deprecated: None }] }, default: None, deprecated: None }) } }, Key("readme"): PropertySchema { key_range: 486:8..486:16, property_schema: Resolved { schema_url: None, value: AnyOf(AnyOfSchema { title: Some("Readme"), description: Some("The `readme` field should be the path to a file in the package root (relative\nto this `Cargo.toml`) that contains general information about the package.\nThis file will be transferred to the registry when you publish. [crates.io](https://crates.io)\nwill interpret it as Markdown and render it on the crate's page.\n\n```toml\n[package]\n# ...\nreadme = \"README.md\"\n```\n\nIf no value is specified for this field, and a file named `README.md`,\n`README.txt` or `README` exists in the package root, then the name of that\nfile will be used. You can suppress this behavior by setting this field to\n`false`. If the field is set to `true`, a default value of `README.md` will\nbe assumed.\n"), range: 486:18..497:9, schemas: RwLock { data: [Ref { reference: "#/definitions/Readme", title: None, description: None, deprecated: None }, Ref { reference: "#/definitions/WorkspaceInheritance", title: None, description: None, deprecated: None }] }, default: None, deprecated: None }) } }, Key("homepage"): PropertySchema { key_range: 498:8..498:18, property_schema: Resolved { schema_url: None, value: AnyOf(AnyOfSchema { title: Some("Homepage"), description: Some("The `homepage` field should be a URL to a site that is the home page for your\npackage.\n\n```toml\n[package]\n# ...\nhomepage = \"https://serde.rs/\"\n```"), range: 498:20..509:9, schemas: RwLock { data: [Ref { reference: "#/definitions/Homepage", title: None, description: None, deprecated: None }, Ref { reference: "#/definitions/WorkspaceInheritance", title: None, description: None, deprecated: None }] }, default: None, deprecated: None }) } }, Key("repository"): PropertySchema { key_range: 510:8..510:20, property_schema: Resolved { schema_url: None, value: AnyOf(AnyOfSchema { title: Some("Repository"), description: Some("The `repository` field should be a URL to the source repository for your\npackage.\n\n```toml\n[package]\n# ...\nrepository = \"https://github.com/rust-lang/cargo/\"\n```"), range: 510:22..521:9, schemas: RwLock { data: [Resolved { schema_url: None, value: String(StringSchema { title: Some("Repository"), description: Some("The `repository` field should be a URL to the source repository for your\npackage.\n\n```toml\n[package]\n# ...\nrepository = \"https://github.com/rust-lang/cargo/\"\n```"), range: 1642:18..1651:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: None, description: None, range: 1662:28..1675:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 1665:8..1665:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: Some("Workspace"), description: Some("The `workspace` field allow keys to be inherited by defining them in the member package with `{key}.workspace = true`"), range: 1665:21..1670:9, default: None, enumerate: Some([true]), deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: Some(["workspace"]), min_properties: None, max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }) } }, Key("license"): PropertySchema { key_range: 522:8..522:17, property_schema: Resolved { schema_url: None, value: AnyOf(AnyOfSchema { title: Some("License"), description: Some("The `license` field contains the name of the software license that the package\nis released under.\n\n[crates.io](https://crates.io/) interprets the `license` field as an [SPDX 2.1 license\nexpression](https://spdx.org/spdx-specification-21-web-version#h.jxpfx0ykyb60). The name must be a known license\nfrom the [SPDX license list 3.6](https://github.com/spdx/license-list-data/tree/v3.6). Parentheses are not\ncurrently supported. See the [SPDX site](https://spdx.org/license-list) for more information.\n\nSPDX license expressions support AND and OR operators to combine multiple\nlicenses.\n\n```toml\n[package]\n# ...\nlicense = \"MIT OR Apache-2.0\"\n```\n\nUsing `OR` indicates the user may choose either license. Using `AND` indicates\nthe user must comply with both licenses simultaneously. The `WITH` operator\nindicates a license with a special exception. Some examples:\n\n* `MIT OR Apache-2.0`\n* `LGPL-2.1 AND MIT AND BSD-2-Clause`\n* `GPL-2.0+ WITH Bison-exception-2.2`\n\nIf a package is using a nonstandard license, then the `license-file` field may\nbe specified in lieu of the `license` field."), range: 522:19..533:9, schemas: RwLock { data: [Resolved { schema_url: None, value: String(StringSchema { title: Some("License"), description: Some("The `license` field contains the name of the software license that the package\nis released under.\n\n[crates.io](https://crates.io/) interprets the `license` field as an [SPDX 2.1 license\nexpression](https://spdx.org/spdx-specification-21-web-version#h.jxpfx0ykyb60). The name must be a known license\nfrom the [SPDX license list 3.6](https://github.com/spdx/license-list-data/tree/v3.6). Parentheses are not\ncurrently supported. See the [SPDX site](https://spdx.org/license-list) for more information.\n\nSPDX license expressions support AND and OR operators to combine multiple\nlicenses.\n\n```toml\n[package]\n# ...\nlicense = \"MIT OR Apache-2.0\"\n```\n\nUsing `OR` indicates the user may choose either license. Using `AND` indicates\nthe user must comply with both licenses simultaneously. The `WITH` operator\nindicates a license with a special exception. Some examples:\n\n* `MIT OR Apache-2.0`\n* `LGPL-2.1 AND MIT AND BSD-2-Clause`\n* `GPL-2.0+ WITH Bison-exception-2.2`\n\nIf a package is using a nonstandard license, then the `license-file` field may\nbe specified in lieu of the `license` field."), range: 1622:15..1631:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: None, description: None, range: 1662:28..1675:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 1665:8..1665:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: Some("Workspace"), description: Some("The `workspace` field allow keys to be inherited by defining them in the member package with `{key}.workspace = true`"), range: 1665:21..1670:9, default: None, enumerate: Some([true]), deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: Some(["workspace"]), min_properties: None, max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }) } }, Key("license-file"): PropertySchema { key_range: 534:8..534:22, property_schema: Resolved { schema_url: None, value: AnyOf(AnyOfSchema { title: Some("LicenseFile"), description: Some("The `license-file` field contains the path to a file\ncontaining the text of the license (relative to this `Cargo.toml`).\n\n```toml\n[package]\n# ...\nlicense-file = \"LICENSE.txt\"\n```\n\n> **Note**: [crates.io](https://crates.io) requires either `license` or `license-file` to be set."), range: 534:24..545:9, schemas: RwLock { data: [Ref { reference: "#/definitions/LicenseFile", title: None, description: None, deprecated: None }, Ref { reference: "#/definitions/WorkspaceInheritance", title: None, description: None, deprecated: None }] }, default: None, deprecated: None }) } }, Key("keywords"): PropertySchema { key_range: 546:8..546:18, property_schema: Resolved { schema_url: None, value: AnyOf(AnyOfSchema { title: Some("Keywords"), description: Some("The `keywords` field is an array of strings that describe this package. This\ncan help when searching for the package on a registry, and you may choose any\nwords that would help someone find this crate.\n\n```toml\n[package]\n# ...\nkeywords = [\"gamedev\", \"graphics\"]\n```\n\n> **Note**: [crates.io](https://crates.io) has a maximum of 5 keywords. Each keyword must be\n> ASCII text, start with a letter, and only contain letters, numbers, `_` or\n> `-`, and have at most 20 characters."), range: 546:20..557:9, schemas: RwLock { data: [Ref { reference: "#/definitions/Keywords", title: None, description: None, deprecated: None }, Ref { reference: "#/definitions/WorkspaceInheritance", title: None, description: None, deprecated: None }] }, default: None, deprecated: None }) } }, Key("categories"): PropertySchema { key_range: 558:8..558:20, property_schema: Resolved { schema_url: None, value: AnyOf(AnyOfSchema { title: Some("Categories"), description: Some("The `categories` field is an array of strings of the categories this package\nbelongs to.\n\n```toml\ncategories = [\"command-line-utilities\", \"development-tools::cargo-plugins\"]\n```\n\n> **Note**: [crates.io](https://crates.io) has a maximum of 5 categories. Each category should\n> match one of the strings available at https://crates.io/category_slugs, and\n> must match exactly."), range: 558:22..569:9, schemas: RwLock { data: [Ref { reference: "#/definitions/Categories", title: None, description: None, deprecated: None }, Ref { reference: "#/definitions/WorkspaceInheritance", title: None, description: None, deprecated: None }] }, default: None, deprecated: None }) } }, Key("workspace"): PropertySchema { key_range: 570:8..570:19, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("The `workspace` field can be used to configure the workspace that this package\nwill be a member of. If not specified this will be inferred as the first\nCargo.toml with `[workspace]` upwards in the filesystem. Setting this is\nuseful if the member is not inside a subdirectory of the workspace root.\n\n```toml\n[package]\n# ...\nworkspace = \"path/to/workspace/root\"\n```\n\nThis field cannot be specified if the manifest already has a `[workspace]`\ntable defined. That is, a crate cannot both be a root crate in a workspace\n(contain `[workspace]`) and also be a member crate of another workspace\n(contain `package.workspace`).\n\nFor more information, see the [workspaces chapter](https://doc.rust-lang.org/cargo/reference/workspaces.html)."), range: 570:21..578:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("build"): PropertySchema { key_range: 579:8..579:15, property_schema: Ref { reference: "#/definitions/Build", title: None, description: None, deprecated: None } }, Key("links"): PropertySchema { key_range: 582:8..582:15, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("The `links` field specifies the name of a native library that is being linked\nto. More information can be found in the [`links`](https://doc.rust-lang.org/cargo/reference/build-scripts.html#the-links-manifest-key) section of the build\nscript guide.\n\n```toml\n[package]\n# ...\nlinks = \"foo\"\n```"), range: 582:17..590:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("exclude"): PropertySchema { key_range: 591:8..591:17, property_schema: Resolved { schema_url: None, value: AnyOf(AnyOfSchema { title: Some("Exclude"), description: Some("You can explicitly specify that a set of file patterns should be ignored or\nincluded for the purposes of packaging. The patterns specified in the\n`exclude` field identify a set of files that are not included, and the\npatterns in `include` specify files that are explicitly included.\n\nThe patterns should be [gitignore](https://git-scm.com/docs/gitignore)-style patterns. Briefly:\n\n- `foo` matches any file or directory with the name `foo` anywhere in the\n  package. This is equivalent to the pattern `**/foo`.\n- `/foo` matches any file or directory with the name `foo` only in the root of\n  the package.\n- `foo/` matches any *directory* with the name `foo` anywhere in the package.\n- Common glob patterns like `*`, `?`, and `[]` are supported:\n  - `*` matches zero or more characters except `/`.  For example, `*.html`\n    matches any file or directory with the `.html` extension anywhere in the\n    package.\n  - `?` matches any character except `/`. For example, `foo?` matches `food`,\n    but not `foo`.\n  - `[]` allows for matching a range of characters. For example, `[ab]`\n    matches either `a` or `b`. `[a-z]` matches letters a through z.\n- `**/` prefix matches in any directory. For example, `**/foo/bar` matches the\n  file or directory `bar` anywhere that is directly under directory `foo`.\n- `/**` suffix matches everything inside. For example, `foo/**` matches all\n  files inside directory `foo`, including all files in subdirectories below\n  `foo`.\n- `/**/` matches zero or more directories. For example, `a/**/b` matches\n  `a/b`, `a/x/b`, `a/x/y/b`, and so on.\n- `!` prefix negates a pattern. For example, a pattern of `src/**.rs` and\n  `!foo.rs` would match all files with the `.rs` extension inside the `src`\n  directory, except for any file named `foo.rs`.\n\nIf git is being used for a package, the `exclude` field will be seeded with\nthe `gitignore` settings from the repository.\n\n```toml\n[package]\n# ...\nexclude = [\"build/**/*.o\", \"doc/**/*.html\"]\n```\n\n```toml\n[package]\n# ...\ninclude = [\"src/**/*\", \"Cargo.toml\"]\n```\n\nThe options are mutually exclusive: setting `include` will override an\n`exclude`. Note that `include` must be an exhaustive list of files as otherwise\nnecessary source files may not be included. The package's `Cargo.toml` is\nautomatically included.\n\nThe include/exclude list is also used for change tracking in some situations.\nFor targets built with `rustdoc`, it is used to determine the list of files to\ntrack to determine if the target should be rebuilt. If the package has a\n[build script](https://doc.rust-lang.org/cargo/reference/build-scripts.html) that does not emit any `rerun-if-*` directives, then the\ninclude/exclude list is used for tracking if the build script should be re-run\nif any of those files change."), range: 591:19..602:9, schemas: RwLock { data: [Ref { reference: "#/definitions/Exclude", title: None, description: None, deprecated: None }, Ref { reference: "#/definitions/WorkspaceInheritance", title: None, description: None, deprecated: None }] }, default: None, deprecated: None }) } }, Key("include"): PropertySchema { key_range: 603:8..603:17, property_schema: Resolved { schema_url: None, value: AnyOf(AnyOfSchema { title: None, description: Some("You can explicitly specify that a set of file patterns should be ignored or\nincluded for the purposes of packaging. The patterns specified in the\n`exclude` field identify a set of files that are not included, and the\npatterns in `include` specify files that are explicitly included.\n\nThe patterns should be [gitignore](https://git-scm.com/docs/gitignore)-style patterns. Briefly:\n\n- `foo` matches any file or directory with the name `foo` anywhere in the\n  package. This is equivalent to the pattern `**/foo`.\n- `/foo` matches any file or directory with the name `foo` only in the root of\n  the package.\n- `foo/` matches any *directory* with the name `foo` anywhere in the package.\n- Common glob patterns like `*`, `?`, and `[]` are supported:\n  - `*` matches zero or more characters except `/`.  For example, `*.html`\n    matches any file or directory with the `.html` extension anywhere in the\n    package.\n  - `?` matches any character except `/`. For example, `foo?` matches `food`,\n    but not `foo`.\n  - `[]` allows for matching a range of characters. For example, `[ab]`\n    matches either `a` or `b`. `[a-z]` matches letters a through z.\n- `**/` prefix matches in any directory. For example, `**/foo/bar` matches the\n  file or directory `bar` anywhere that is directly under directory `foo`.\n- `/**` suffix matches everything inside. For example, `foo/**` matches all\n  files inside directory `foo`, including all files in subdirectories below\n  `foo`.\n- `/**/` matches zero or more directories. For example, `a/**/b` matches\n  `a/b`, `a/x/b`, `a/x/y/b`, and so on.\n- `!` prefix negates a pattern. For example, a pattern of `src/**.rs` and\n  `!foo.rs` would match all files with the `.rs` extension inside the `src`\n  directory, except for any file named `foo.rs`.\n\nIf git is being used for a package, the `exclude` field will be seeded with\nthe `gitignore` settings from the repository.\n\n```toml\n[package]\n# ...\nexclude = [\"build/**/*.o\", \"doc/**/*.html\"]\n```\n\n```toml\n[package]\n# ...\ninclude = [\"src/**/*\", \"Cargo.toml\"]\n```\n\nThe options are mutually exclusive: setting `include` will override an\n`exclude`. Note that `include` must be an exhaustive list of files as otherwise\nnecessary source files may not be included. The package's `Cargo.toml` is\nautomatically included.\n\nThe include/exclude list is also used for change tracking in some situations.\nFor targets built with `rustdoc`, it is used to determine the list of files to\ntrack to determine if the target should be rebuilt. If the package has a\n[build script](https://doc.rust-lang.org/cargo/reference/build-scripts.html) that does not emit any `rerun-if-*` directives, then the\ninclude/exclude list is used for tracking if the build script should be re-run\nif any of those files change."), range: 603:19..613:9, schemas: RwLock { data: [Ref { reference: "#/definitions/Include", title: None, description: None, deprecated: None }, Ref { reference: "#/definitions/WorkspaceInheritance", title: None, description: None, deprecated: None }] }, default: None, deprecated: None }) } }, Key("publish"): PropertySchema { key_range: 614:8..614:17, property_schema: Resolved { schema_url: None, value: AnyOf(AnyOfSchema { title: Some("Publish"), description: Some("The `publish` field can be used to prevent a package from being published to a package registry (like *crates.io*) by mistake, for instance to keep a package\nprivate in a company.\n\n```toml\n[package]\n# ...\npublish = false\n```\n\nThe value may also be an array of strings which are registry names that are\nallowed to be published to.\n\n```toml\n[package]\n# ...\npublish = [\"some-registry-name\"]\n```"), range: 614:19..625:9, schemas: RwLock { data: [Ref { reference: "#/definitions/Publish", title: None, description: None, deprecated: None }, Ref { reference: "#/definitions/WorkspaceInheritance", title: None, description: None, deprecated: None }] }, default: None, deprecated: None }) } }, Key("metadata"): PropertySchema { key_range: 626:8..626:18, property_schema: Resolved { schema_url: None, value: Table(TableSchema { title: None, description: Some("Cargo by default will warn about unused keys in `Cargo.toml` to assist in\ndetecting typos and such. The `package.metadata` table, however, is completely\nignored by Cargo and will not be warned about. This section can be used for\ntools which would like to store package configuration in `Cargo.toml`. For\nexample:\n\n```toml\n[package]\nname = \"...\"\n# ...\n\n# Metadata used when generating an Android APK, for example.\n[package.metadata.android]\npackage-name = \"my-awesome-android-app\"\nassets = \"path/to/static\"\n```\n"), range: 626:20..641:9, properties: RwLock { data: {Key("playdate"): PropertySchema { key_range: 631:12..631:22, property_schema: Ref { reference: "#/definitions/PlaydateMetadata", title: None, description: None, deprecated: None } }} }, pattern_properties: None, additional_properties: Some(true), additional_property_schema: None, required: None, min_properties: None, max_properties: None, keys_order: Some(Schema), deprecated: None }) } }, Key("default-run"): PropertySchema { key_range: 642:8..642:21, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("The `default-run` field in the `[package]` section of the manifest can be used\nto specify a default binary picked by [`cargo run`](https://doc.rust-lang.org/cargo/commands/cargo-run.html). For example, when there is\nboth `src/bin/a.rs` and `src/bin/b.rs`:\n\n```toml\n[package]\ndefault-run = \"a\"\n```"), range: 642:23..650:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("autobins"): PropertySchema { key_range: 651:8..651:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Disable automatic discovery of `bin` targets.\n\nDisabling automatic discovery should only be needed for specialized\nsituations. For example, if you have a library where you want a *module* named\n`bin`, this would present a problem because Cargo would usually attempt to\ncompile anything in the `bin` directory as an executable. Here is a sample\nlayout of this scenario:\n\n```\n├── Cargo.toml\n└── src\n    ├── lib.rs\n    └── bin\n        └── mod.rs\n```\n\nTo prevent Cargo from inferring `src/bin/mod.rs` as an executable, set\nthis to `false` to disable auto-discovery."), range: 651:20..659:9, default: None, enumerate: None, deprecated: None }) } }, Key("autoexamples"): PropertySchema { key_range: 660:8..660:22, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Disable automatic discovery of `example` targets.\n\nDisabling automatic discovery should only be needed for specialized\nsituations. For example, if you have a library where you want a *module* named\n`bin`, this would present a problem because Cargo would usually attempt to\ncompile anything in the `bin` directory as an executable. Here is a sample\nlayout of this scenario:\n\n```\n├── Cargo.toml\n└── src\n    ├── lib.rs\n    └── bin\n        └── mod.rs\n```\n"), range: 660:24..668:9, default: None, enumerate: None, deprecated: None }) } }, Key("autotests"): PropertySchema { key_range: 669:8..669:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Disable automatic discovery of `test` targets.\n\nDisabling automatic discovery should only be needed for specialized\nsituations. For example, if you have a library where you want a *module* named\n`bin`, this would present a problem because Cargo would usually attempt to\ncompile anything in the `bin` directory as an executable. Here is a sample\nlayout of this scenario:\n\n```\n├── Cargo.toml\n└── src\n    ├── lib.rs\n    └── bin\n        └── mod.rs\n```\n"), range: 669:21..677:9, default: None, enumerate: None, deprecated: None }) } }, Key("autobenches"): PropertySchema { key_range: 678:8..678:21, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Disable automatic discovery of `bench` targets.\n\nDisabling automatic discovery should only be needed for specialized\nsituations. For example, if you have a library where you want a *module* named\n`bin`, this would present a problem because Cargo would usually attempt to\ncompile anything in the `bin` directory as an executable. Here is a sample\nlayout of this scenario:\n\n```\n├── Cargo.toml\n└── src\n    ├── lib.rs\n    └── bin\n        └── mod.rs\n```\n"), range: 678:23..686:9, default: None, enumerate: None, deprecated: None }) } }, Key("resolver"): PropertySchema { key_range: 687:8..687:18, property_schema: Ref { reference: "#/definitions/Resolver", title: None, description: None, deprecated: None } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: Some(["name"]), min_properties: None, max_properties: None, keys_order: Some(Schema), deprecated: None }) } }, Key("workspace"): PropertySchema { key_range: 1932:4..1932:15, property_schema: Ref { reference: "#/definitions/Workspace", title: None, description: None, deprecated: None } }, Key("lib"): PropertySchema { key_range: 1935:4..1935:9, property_schema: Ref { reference: "#/definitions/Target", title: None, description: None, deprecated: None } }, Key("bin"): PropertySchema { key_range: 1946:4..1946:9, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("Binary targets are executable programs that can be run after being compiled.\nThe default binary filename is `src/main.rs`, which defaults to the name of\nthe package. Additional binaries are stored in the [`src/bin/`\ndirectory](https://doc.rust-lang.org/cargo/guide/project-layout.html). The settings for each binary can be [customized](https://doc.rust-lang.org/cargo/reference/cargo-targets.html#configuring-a-target) in the `[[bin]]` tables in `Cargo.toml`.\n\nBinaries can use the public API of the package's library. They are also linked\nwith the [`[dependencies]`](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) defined in `Cargo.toml`.\n\nYou can run individual binaries with the [`cargo run`](https://doc.rust-lang.org/cargo/commands/cargo-run.html) command with the `--bin\n<bin-name>` option. [`cargo install`](https://doc.rust-lang.org/cargo/commands/cargo-install.html) can be used to copy the executable to a\ncommon location.\n\n```toml\n# Example of customizing binaries in Cargo.toml.\n[[bin]]\nname = \"cool-tool\"\ntest = false\nbench = false\n\n[[bin]]\nname = \"frobnicator\"\nrequired-features = [\"frobnicate\"]\n```"), range: 1946:11..1964:5, items: Some(RwLock { data: Resolved { schema_url: None, value: Table(TableSchema { title: None, description: Some("Binary targets are executable programs that can be run after being compiled.\nThe default binary filename is `src/main.rs`, which defaults to the name of\nthe package. Additional binaries are stored in the [`src/bin/`\ndirectory](https://doc.rust-lang.org/cargo/guide/project-layout.html). The settings for each binary can be [customized](https://doc.rust-lang.org/cargo/reference/cargo-targets.html#configuring-a-target) in the `[[bin]]` tables in `Cargo.toml`.\n\nBinaries can use the public API of the package's library. They are also linked\nwith the [`[dependencies]`](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) defined in `Cargo.toml`.\n\nYou can run individual binaries with the [`cargo run`](https://doc.rust-lang.org/cargo/commands/cargo-run.html) command with the `--bin\n<bin-name>` option. [`cargo install`](https://doc.rust-lang.org/cargo/commands/cargo-install.html) can be used to copy the executable to a\ncommon location.\n\n```toml\n# Example of customizing binaries in Cargo.toml.\n[[bin]]\nname = \"cool-tool\"\ntest = false\nbench = false\n\n[[bin]]\nname = \"frobnicator\"\nrequired-features = [\"frobnicate\"]\n```"), range: 1161:14..1327:5, properties: RwLock { data: {Key("bench"): PropertySchema { key_range: 1165:8..1165:15, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("The `bench` field indicates whether or not the target is benchmarked by\ndefault by [`cargo bench`](https://doc.rust-lang.org/cargo/commands/cargo-bench.html). The default is `true` for lib, bins, and\nbenchmarks."), range: 1165:17..1173:9, default: None, enumerate: None, deprecated: None }) } }, Key("crate-type"): PropertySchema { key_range: 1174:8..1174:20, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("The `crate-type` field defines the [crate types](https://doc.rust-lang.org/reference/linkage.html) that will be generated by the\ntarget. It is an array of strings, allowing you to specify multiple crate\ntypes for a single target. This can only be specified for libraries and\nexamples. Binaries, tests, and benchmarks are always the \"bin\" crate type.\n\nThe available options are `bin`, `lib`, `rlib`, `dylib`, `cdylib`,\n`staticlib`, and `proc-macro`. You can read more about the different crate\ntypes in the [Rust Reference Manual](https://doc.rust-lang.org/reference/linkage.html)."), range: 1174:22..1214:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("The `crate-type` field defines the [crate types](https://doc.rust-lang.org/reference/linkage.html) that will be generated by the\ntarget. It is an array of strings, allowing you to specify multiple crate\ntypes for a single target. This can only be specified for libraries and\nexamples. Binaries, tests, and benchmarks are always the \"bin\" crate type.\n\nThe available options are `bin`, `lib`, `rlib`, `dylib`, `cdylib`,\n`staticlib`, and `proc-macro`. You can read more about the different crate\ntypes in the [Rust Reference Manual](https://doc.rust-lang.org/reference/linkage.html)."), range: 1177:19..1196:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("doc"): PropertySchema { key_range: 1228:8..1228:13, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("The `doc` field indicates whether or not the target is included in the\ndocumentation generated by [`cargo doc`](https://doc.rust-lang.org/cargo/commands/cargo-doc.html) by default. The default is `true` for\nlibraries and binaries.\n\n> **Note**: The binary will be skipped if its name is the same as the lib\n> target."), range: 1228:15..1236:9, default: None, enumerate: None, deprecated: None }) } }, Key("doctest"): PropertySchema { key_range: 1237:8..1237:17, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("The `doctest` field indicates whether or not [documentation examples](https://doc.rust-lang.org/rustdoc/documentation-tests.html) are\ntested by default by [`cargo test`](https://doc.rust-lang.org/cargo/commands/cargo-test.html). This is only relevant for libraries, it\nhas no effect on other sections. The default is `true` for the library.\n"), range: 1237:19..1245:9, default: None, enumerate: None, deprecated: None }) } }, Key("edition"): PropertySchema { key_range: 1246:8..1246:17, property_schema: Ref { reference: "#/definitions/Edition", title: None, description: None, deprecated: None } }, Key("harness"): PropertySchema { key_range: 1249:8..1249:17, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("The `harness` field indicates that the [`--test` flag](https://doc.rust-lang.org/rustc/command-line-arguments.html#option-test) will be passed to\n`rustc` which will automatically include the libtest library which is the\ndriver for collecting and running tests marked with the [`#[test]` attribute](https://doc.rust-lang.org/reference/attributes/testing.html#the-test-attribute) or benchmarks with the `#[bench]` attribute. The\ndefault is `true` for all targets.\n\nIf set to `false`, then you are responsible for defining a `main()` function\nto run tests and benchmarks.\n\nTests have the [`cfg(test)` conditional expression](https://doc.rust-lang.org/reference/conditional-compilation.html#test) enabled whether\nor not the harness is enabled."), range: 1249:19..1257:9, default: None, enumerate: None, deprecated: None }) } }, Key("name"): PropertySchema { key_range: 1258:8..1258:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("The `name` field specifies the name of the target, which corresponds to the\nfilename of the artifact that will be generated. For a library, this is the\ncrate name that dependencies will use to reference it.\n\nFor the `[lib]` and the default binary (`src/main.rs`), this defaults to the\nname of the package, with any dashes replaced with underscores. For other\n[auto discovered](https://doc.rust-lang.org/cargo/reference/cargo-targets.html#target-auto-discovery) targets, it defaults to the\ndirectory or file name.\n\nThis is required for all targets except `[lib]`."), range: 1258:16..1266:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 1267:8..1267:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("The `path` field specifies where the source for the crate is located, relative\nto the `Cargo.toml` file.\n\nIf not specified, the [inferred path](https://doc.rust-lang.org/cargo/reference/cargo-targets.html#target-auto-discovery) is used based on\nthe target name."), range: 1267:16..1275:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("proc-macro"): PropertySchema { key_range: 1282:8..1282:20, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("The `proc-macro` field indicates that the library is a [procedural macro](https://doc.rust-lang.org/book/ch19-06-macros.html)\n([reference](https://doc.rust-lang.org/reference/procedural-macros.html)). This is only valid for the `[lib]`\ntarget."), range: 1282:22..1290:9, default: None, enumerate: None, deprecated: None }) } }, Key("required-features"): PropertySchema { key_range: 1297:8..1297:27, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("The `required-features` field specifies which [features](https://doc.rust-lang.org/cargo/reference/features.html) the target needs in\norder to be built. If any of the required features are not enabled, the\ntarget will be skipped. This is only relevant for the `[[bin]]`, `[[bench]]`,\n`[[test]]`, and `[[example]]` sections, it has no effect on `[lib]`.\n\n```toml\n[features]\n# ...\npostgres = []\nsqlite = []\ntools = []\n\n[[bin]]\nname = \"my-pg-tool\"\nrequired-features = [\"postgres\", \"tools\"]\n```\n"), range: 1297:29..1315:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("The `required-features` field specifies which [features](https://doc.rust-lang.org/cargo/reference/features.html) the target needs in\norder to be built. If any of the required features are not enabled, the\ntarget will be skipped. This is only relevant for the `[[bin]]`, `[[bench]]`,\n`[[test]]`, and `[[example]]` sections, it has no effect on `[lib]`.\n\n```toml\n[features]\n# ...\npostgres = []\nsqlite = []\ntools = []\n\n[[bin]]\nname = \"my-pg-tool\"\nrequired-features = [\"postgres\", \"tools\"]\n```\n"), range: 1300:19..1308:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("test"): PropertySchema { key_range: 1316:8..1316:14, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("The `test` field indicates whether or not the target is tested by default by\n[`cargo test`](https://doc.rust-lang.org/cargo/commands/cargo-test.html). The default is `true` for lib, bins, and tests.\n\n> **Note**: Examples are built by [`cargo test`](https://doc.rust-lang.org/cargo/commands/cargo-test.html) by default to ensure they\n> continue to compile, but they are not *tested* by default. Setting `test =\n> true` for an example will also build it as a test and run any\n> [`#[test]`](https://doc.rust-lang.org/reference/attributes/testing.html#the-test-attribute) functions defined in the example."), range: 1316:16..1324:9, default: None, enumerate: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: None, additional_property_schema: None, required: None, min_properties: None, max_properties: None, keys_order: Some(Schema), deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("example"): PropertySchema { key_range: 1965:4..1965:13, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("Files located under the [examples directory](https://doc.rust-lang.org/cargo/guide/project-layout.html) are example uses of the functionality provided by the library. When compiled, they are placed in the[ target/debug/examples directory](https://doc.rust-lang.org/cargo/guide/build-cache.html).\n\nExamples can use the public API of the package's library. They are also linked with the [dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) and [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) defined in Cargo.toml.\n\nBy default, examples are executable binaries (with a `main()` function). You\ncan specify the [`crate-type` field](https://doc.rust-lang.org/cargo/reference/cargo-targets.html#the-crate-type-field) to make an example\nbe compiled as a library:\n\n```toml\n[[example]]\nname = \"foo\"\ncrate-type = [\"staticlib\"]\n```\n\nYou can run individual executable examples with the [`cargo run`](https://doc.rust-lang.org/cargo/commands/cargo-run.html) command with\nthe `--example <example-name>` option. Library examples can be built with\n[`cargo build`](https://doc.rust-lang.org/cargo/commands/cargo-build.html) with the `--example <example-name>` option. [`cargo install`](https://doc.rust-lang.org/cargo/commands/cargo-install.html)\nwith the `--example <example-name>` option can be used to copy executable\nbinaries to a common location. Examples are compiled by [`cargo test`](https://doc.rust-lang.org/cargo/commands/cargo-test.html) by\ndefault to protect them from bit-rotting. Set [the `test`\nfield](https://doc.rust-lang.org/cargo/reference/cargo-targets.html#the-test-field) to `true` if you have `#[test]` functions in the\nexample that you want to run with [`cargo test`](https://doc.rust-lang.org/cargo/commands/cargo-test.html).\n"), range: 1965:15..1983:5, items: Some(RwLock { data: Ref { reference: "#/definitions/Target", title: None, description: Some("Files located under the [examples directory](https://doc.rust-lang.org/cargo/guide/project-layout.html) are example uses of the functionality provided by the library. When compiled, they are placed in the[ target/debug/examples directory](https://doc.rust-lang.org/cargo/guide/build-cache.html).\n\nExamples can use the public API of the package's library. They are also linked with the [dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) and [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) defined in Cargo.toml.\n\nBy default, examples are executable binaries (with a `main()` function). You\ncan specify the [`crate-type` field](https://doc.rust-lang.org/cargo/reference/cargo-targets.html#the-crate-type-field) to make an example\nbe compiled as a library:\n\n```toml\n[[example]]\nname = \"foo\"\ncrate-type = [\"staticlib\"]\n```\n\nYou can run individual executable examples with the [`cargo run`](https://doc.rust-lang.org/cargo/commands/cargo-run.html) command with\nthe `--example <example-name>` option. Library examples can be built with\n[`cargo build`](https://doc.rust-lang.org/cargo/commands/cargo-build.html) with the `--example <example-name>` option. [`cargo install`](https://doc.rust-lang.org/cargo/commands/cargo-install.html)\nwith the `--example <example-name>` option can be used to copy executable\nbinaries to a common location. Examples are compiled by [`cargo test`](https://doc.rust-lang.org/cargo/commands/cargo-test.html) by\ndefault to protect them from bit-rotting. Set [the `test`\nfield](https://doc.rust-lang.org/cargo/reference/cargo-targets.html#the-test-field) to `true` if you have `#[test]` functions in the\nexample that you want to run with [`cargo test`](https://doc.rust-lang.org/cargo/commands/cargo-test.html).\n"), deprecated: None } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("test"): PropertySchema { key_range: 1984:4..1984:10, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("Files located under the [`tests` directory](https://doc.rust-lang.org/cargo/guide/project-layout.html) are integration\ntests. When you run [`cargo test`](https://doc.rust-lang.org/cargo/commands/cargo-test.html), Cargo will compile each of these files as\na separate crate, and execute them.\n\nIntegration tests can use the public API of the package's library. They are\nalso linked with the [`[dependencies]`](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) and\n[`[dev-dependencies]`](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) defined in `Cargo.toml`.\n\nIf you want to share code among multiple integration tests, you can place it\nin a separate module such as `tests/common/mod.rs` and then put `mod common;`\nin each test to import it.\n\nEach integration test results in a separate executable binary, and [`cargo\ntest`](https://doc.rust-lang.org/cargo/commands/cargo-test.html) will run them serially. In some cases this can be inefficient, as it\ncan take longer to compile, and may not make full use of multiple CPUs when\nrunning the tests. If you have a lot of integration tests, you may want to\nconsider creating a single integration test, and split the tests into multiple\nmodules. The libtest harness will automatically find all of the `#[test]`\nannotated functions and run them in parallel. You can pass module names to\n[`cargo test`](https://doc.rust-lang.org/cargo/commands/cargo-test.html) to only run the tests within that module.\n\nBinary targets are automatically built if there is an integration test. This\nallows an integration test to execute the binary to exercise and test its\nbehavior. The `CARGO_BIN_EXE_<name>` [environment variable](https://doc.rust-lang.org/cargo/reference/environment-variables.html#environment-variables-cargo-sets-for-crates) is set when the\nintegration test is built so that it can use the [`env` macro](https://doc.rust-lang.org/std/macro.env.html) to locate the\nexecutable."), range: 1984:12..2002:5, items: Some(RwLock { data: Ref { reference: "#/definitions/Target", title: None, description: Some("Files located under the [`tests` directory](https://doc.rust-lang.org/cargo/guide/project-layout.html) are integration\ntests. When you run [`cargo test`](https://doc.rust-lang.org/cargo/commands/cargo-test.html), Cargo will compile each of these files as\na separate crate, and execute them.\n\nIntegration tests can use the public API of the package's library. They are\nalso linked with the [`[dependencies]`](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) and\n[`[dev-dependencies]`](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) defined in `Cargo.toml`.\n\nIf you want to share code among multiple integration tests, you can place it\nin a separate module such as `tests/common/mod.rs` and then put `mod common;`\nin each test to import it.\n\nEach integration test results in a separate executable binary, and [`cargo\ntest`](https://doc.rust-lang.org/cargo/commands/cargo-test.html) will run them serially. In some cases this can be inefficient, as it\ncan take longer to compile, and may not make full use of multiple CPUs when\nrunning the tests. If you have a lot of integration tests, you may want to\nconsider creating a single integration test, and split the tests into multiple\nmodules. The libtest harness will automatically find all of the `#[test]`\nannotated functions and run them in parallel. You can pass module names to\n[`cargo test`](https://doc.rust-lang.org/cargo/commands/cargo-test.html) to only run the tests within that module.\n\nBinary targets are automatically built if there is an integration test. This\nallows an integration test to execute the binary to exercise and test its\nbehavior. The `CARGO_BIN_EXE_<name>` [environment variable](https://doc.rust-lang.org/cargo/reference/environment-variables.html#environment-variables-cargo-sets-for-crates) is set when the\nintegration test is built so that it can use the [`env` macro](https://doc.rust-lang.org/std/macro.env.html) to locate the\nexecutable."), deprecated: None } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("bench"): PropertySchema { key_range: 2003:4..2003:11, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("Benchmarks provide a way to test the performance of your code using the\n[`cargo bench`](https://doc.rust-lang.org/cargo/commands/cargo-bench.html) command. They follow the same structure as [tests](https://doc.rust-lang.org/cargo/reference/cargo-targets.html#tests),\nwith each benchmark function annotated with the `#[bench]` attribute.\nSimilarly to tests:\n\n* Benchmarks are placed in the [`benches` directory](https://doc.rust-lang.org/cargo/guide/project-layout.html).\n* Benchmark functions defined in libraries and binaries have access to the\n  *private* API within the target they are defined in. Benchmarks in the\n  `benches` directory may use the *public* API.\n* [The `bench` field](https://doc.rust-lang.org/cargo/reference/cargo-targets.html#the-bench-field) can be used to define which targets\n  are benchmarked by default.\n* [The `harness` field](https://doc.rust-lang.org/cargo/reference/cargo-targets.html#the-harness-field) can be used to disable the\n  built-in harness.\n\n> **Note**: The [`#[bench]`\n> attribute](https://doc.rust-lang.org/unstable-book/library-features/test.html) is currently\n> unstable and only available on the [nightly channel](https://doc.rust-lang.org/book/appendix-07-nightly-rust.html). There are some\n> packages available on [crates.io](https://crates.io/keywords/benchmark) that\n> may help with running benchmarks on the stable channel, such as\n> [Criterion](https://crates.io/crates/criterion)."), range: 2003:13..2021:5, items: Some(RwLock { data: Ref { reference: "#/definitions/Target", title: None, description: Some("Benchmarks provide a way to test the performance of your code using the\n[`cargo bench`](https://doc.rust-lang.org/cargo/commands/cargo-bench.html) command. They follow the same structure as [tests](https://doc.rust-lang.org/cargo/reference/cargo-targets.html#tests),\nwith each benchmark function annotated with the `#[bench]` attribute.\nSimilarly to tests:\n\n* Benchmarks are placed in the [`benches` directory](https://doc.rust-lang.org/cargo/guide/project-layout.html).\n* Benchmark functions defined in libraries and binaries have access to the\n  *private* API within the target they are defined in. Benchmarks in the\n  `benches` directory may use the *public* API.\n* [The `bench` field](https://doc.rust-lang.org/cargo/reference/cargo-targets.html#the-bench-field) can be used to define which targets\n  are benchmarked by default.\n* [The `harness` field](https://doc.rust-lang.org/cargo/reference/cargo-targets.html#the-harness-field) can be used to disable the\n  built-in harness.\n\n> **Note**: The [`#[bench]`\n> attribute](https://doc.rust-lang.org/unstable-book/library-features/test.html) is currently\n> unstable and only available on the [nightly channel](https://doc.rust-lang.org/book/appendix-07-nightly-rust.html). There are some\n> packages available on [crates.io](https://crates.io/keywords/benchmark) that\n> may help with running benchmarks on the stable channel, such as\n> [Criterion](https://crates.io/crates/criterion)."), deprecated: None } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("dependencies"): PropertySchema { key_range: 2022:4..2022:18, property_schema: Resolved { schema_url: None, value: Table(TableSchema { title: None, description: Some("Cargo is configured to look for dependencies on [crates.io](https://crates.io) by default. Only\nthe name and a version string are required in this case. In [the cargo\nguide](https://doc.rust-lang.org/cargo/guide/index.html), we specified a dependency on the `time` crate:\n\n```toml\n[dependencies]\ntime = \"0.1.12\"\n```\n\nThe string `\"0.1.12\"` is a [semver](https://github.com/steveklabnik/semver#requirements) version requirement. Since this\nstring does not have any operators in it, it is interpreted the same way as\nif we had specified `\"^0.1.12\"`, which is called a caret requirement.\n\nA dependency can also be defined by a table with additional options:\n\n```toml\n[dependencies]\ntime = { path = \"../time\", version = \"0.1.12\" }\n```"), range: 2022:20..2034:5, properties: RwLock { data: {} }, pattern_properties: None, additional_properties: Some(true), additional_property_schema: Some((2025:30..2027:7, RwLock { data: Ref { reference: "#/definitions/Dependency", title: None, description: None, deprecated: None } })), required: None, min_properties: None, max_properties: None, keys_order: Some(Ascending), deprecated: None }) } }, Key("dev-dependencies"): PropertySchema { key_range: 2035:4..2035:22, property_schema: Resolved { schema_url: None, value: Table(TableSchema { title: None, description: Some("The format of `[dev-dependencies]` is equivalent to `[dependencies]`:\n\n```toml\n[dev-dependencies]\ntempdir = \"0.3\"\n```\n\nDev-dependencies are not used when compiling\na package for building, but are used for compiling tests, examples, and\nbenchmarks.\n\nThese dependencies are *not* propagated to other packages which depend on this\npackage.\n\nYou can also have target-specific development dependencies by using\n`dev-dependencies` in the target section header instead of `dependencies`. For\nexample:\n\n```toml\n[target.'cfg(unix)'.dev-dependencies]\nmio = \"0.0.1\"\n```\n\n> **Note**: When a package is published, only dev-dependencies that specify a\n> `version` will be included in the published crate. For most use cases,\n> dev-dependencies are not needed when published, though some users (like OS\n> packagers) may want to run tests within a crate, so providing a `version` if\n> possible can still be beneficial.\n"), range: 2035:24..2051:5, properties: RwLock { data: {} }, pattern_properties: None, additional_properties: Some(true), additional_property_schema: Some((2038:30..2040:7, RwLock { data: Ref { reference: "#/definitions/Dependency", title: None, description: None, deprecated: None } })), required: None, min_properties: None, max_properties: None, keys_order: Some(Ascending), deprecated: None }) } }, Key("build-dependencies"): PropertySchema { key_range: 2064:4..2064:24, property_schema: Resolved { schema_url: None, value: Table(TableSchema { title: None, description: Some("You can depend on other Cargo-based crates for use in your build scripts.\nDependencies are declared through the `build-dependencies` section of the\nmanifest:\n\n```toml\n[build-dependencies]\ncc = \"1.0.3\"\n```\n\nThe build script **does not** have access to the dependencies listed\nin the `dependencies` or `dev-dependencies` section. Build\ndependencies will likewise not be available to the package itself\nunless listed under the `dependencies` section as well. A package\nitself and its build script are built separately, so their\ndependencies need not coincide. Cargo is kept simpler and cleaner by\nusing independent dependencies for independent purposes."), range: 2064:26..2080:5, properties: RwLock { data: {} }, pattern_properties: None, additional_properties: Some(true), additional_property_schema: Some((2067:30..2069:7, RwLock { data: Ref { reference: "#/definitions/Dependency", title: None, description: None, deprecated: None } })), required: None, min_properties: None, max_properties: None, keys_order: Some(Ascending), deprecated: None }) } }, Key("target"): PropertySchema { key_range: 2093:4..2093:12, property_schema: Resolved { schema_url: None, value: Table(TableSchema { title: None, description: None, range: 2093:14..2099:5, properties: RwLock { data: {} }, pattern_properties: None, additional_properties: Some(true), additional_property_schema: Some((2096:30..2098:7, RwLock { data: Ref { reference: "#/definitions/Platform", title: None, description: None, deprecated: None } })), required: None, min_properties: None, max_properties: None, keys_order: Some(Ascending), deprecated: None }) } }, Key("badges"): PropertySchema { key_range: 2100:4..2100:12, property_schema: Resolved { schema_url: None, value: Table(TableSchema { title: None, description: Some("[crates.io](https://crates.io) can display various badges for build status, test coverage, etc. for\neach crate. All badges are optional.\n\n- The badges pertaining to build status that are currently available are\n  Appveyor, CircleCI, Cirrus CI, GitLab, Azure DevOps, Travis CI and Bitbucket\n  Pipelines.\n- Available badges pertaining to code test coverage are Codecov and Coveralls.\n- There are also maintenance-related badges based on isitmaintained.com\n  which state the issue resolution time, percent of open issues, and future\n  maintenance intentions.\n\nMost badge specifications require a `repository` key. It is expected to be in\n`user/repo` format.\n\n```toml\n[badges]\n\n# Appveyor: `repository` is required. `branch` is optional; default is `master`\n# `service` is optional; valid values are `github` (default), `bitbucket`, and\n# `gitlab`; `id` is optional; you can specify the appveyor project id if you\n# want to use that instead. `project_name` is optional; use when the repository\n# name differs from the appveyor project name.\nappveyor = { repository = \"...\", branch = \"master\", service = \"github\" }\n\n# Circle CI: `repository` is required. `branch` is optional; default is `master`\ncircle-ci = { repository = \"...\", branch = \"master\" }\n\n# Cirrus CI: `repository` is required. `branch` is optional; default is `master`\ncirrus-ci = { repository = \"...\", branch = \"master\" }\n\n# GitLab: `repository` is required. `branch` is optional; default is `master`\ngitlab = { repository = \"...\", branch = \"master\" }\n\n# Azure DevOps: `project` is required. `pipeline` is required. `build` is optional; default is `1`\n# Note: project = `organization/project`, pipeline = `name_of_pipeline`, build = `definitionId`\nazure-devops = { project = \"...\", pipeline = \"...\", build=\"2\" }\n\n# Travis CI: `repository` in format \"<user>/<project>\" is required.\n# `branch` is optional; default is `master`\ntravis-ci = { repository = \"...\", branch = \"master\" }\n\n# Bitbucket Pipelines: `repository` is required. `branch` is required\nbitbucket-pipelines = { repository = \"...\", branch = \"master\" }\n\n# Codecov: `repository` is required. `branch` is optional; default is `master`\n# `service` is optional; valid values are `github` (default), `bitbucket`, and\n# `gitlab`.\ncodecov = { repository = \"...\", branch = \"master\", service = \"github\" }\n\n# Coveralls: `repository` is required. `branch` is optional; default is `master`\n# `service` is optional; valid values are `github` (default) and `bitbucket`.\ncoveralls = { repository = \"...\", branch = \"master\", service = \"github\" }\n\n# Is it maintained resolution time: `repository` is required.\nis-it-maintained-issue-resolution = { repository = \"...\" }\n\n# Is it maintained percentage of open issues: `repository` is required.\nis-it-maintained-open-issues = { repository = \"...\" }\n\n# Maintenance: `status` is required. Available options are:\n# - `actively-developed`: New features are being added and bugs are being fixed.\n# - `passively-maintained`: There are no plans for new features, but the maintainer intends to\n#   respond to issues that get filed.\n# - `as-is`: The crate is feature complete, the maintainer does not intend to continue working on\n#   it or providing support, but it works for the purposes it was designed for.\n# - `experimental`: The author wants to share it with the community but is not intending to meet\n#   anyone's particular use case.\n# - `looking-for-maintainer`: The current maintainer would like to transfer the crate to someone\n#   else.\n# - `deprecated`: The maintainer does not recommend using this crate (the description of the crate\n#   can describe why, there could be a better solution available or there could be problems with\n#   the crate that the author does not want to fix).\n# - `none`: Displays no badge on crates.io, since the maintainer has not chosen to specify\n#   their intentions, potential crate users will need to investigate on their own.\nmaintenance = { status = \"...\" }\n```"), range: 2100:14..2116:5, properties: RwLock { data: {} }, pattern_properties: None, additional_properties: Some(true), additional_property_schema: Some((2103:30..2109:7, RwLock { data: Resolved { schema_url: None, value: Table(TableSchema { title: None, description: None, range: 2103:30..2109:7, properties: RwLock { data: {} }, pattern_properties: None, additional_properties: Some(true), additional_property_schema: Some((2105:32..2107:9, RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: None, range: 2105:32..2107:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } })), required: None, min_properties: None, max_properties: None, keys_order: Some(Ascending), deprecated: None }) } })), required: None, min_properties: None, max_properties: None, keys_order: Some(Ascending), deprecated: None }) } }, Key("features"): PropertySchema { key_range: 2117:4..2117:14, property_schema: Resolved { schema_url: None, value: Table(TableSchema { title: None, description: Some("Cargo supports features to allow expression of:\n\n* conditional compilation options (usable through `cfg` attributes);\n* optional dependencies, which enhance a package, but are not required; and\n* clusters of optional dependencies, such as `postgres-all`, that would include the\n  `postgres` package, the `postgres-macros` package, and possibly other packages\n  (such as development-time mocking libraries, debugging tools, etc.).\n\nA feature of a package is either an optional dependency, or a set of other\nfeatures.\n"), range: 2117:16..2133:5, properties: RwLock { data: {} }, pattern_properties: None, additional_properties: Some(true), additional_property_schema: Some((2120:30..2126:7, RwLock { data: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: None, range: 2120:30..2126:7, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: None, range: 2122:17..2124:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } })), required: None, min_properties: None, max_properties: None, keys_order: Some(Ascending), deprecated: None }) } }, Key("lints"): PropertySchema { key_range: 2134:4..2134:11, property_schema: Resolved { schema_url: None, value: AnyOf(AnyOfSchema { title: None, description: Some("Override the default level of lints from different tools by assigning them to a new level in a table."), range: 2134:13..2158:5, schemas: RwLock { data: [Ref { reference: "#/definitions/Lints", title: None, description: None, deprecated: None }, Resolved { schema_url: None, value: Table(TableSchema { title: None, description: None, range: 2140:8..2151:9, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 2143:12..2143:23, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit lints from the workspace manifest."), range: 2143:25..2146:13, default: None, enumerate: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: Some(["workspace"]), min_properties: None, max_properties: None, keys_order: Some(Ascending), deprecated: None }) }] }, default: None, deprecated: None }) } }, Key("patch"): PropertySchema { key_range: 2159:4..2159:11, property_schema: Resolved { schema_url: None, value: Table(TableSchema { title: None, description: Some("The `[patch]` section of `Cargo.toml` can be used to override dependencies\nwith other copies. The syntax is similar to the\n[`[dependencies]`](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) section.\n\n"), range: 2159:13..2175:5, properties: RwLock { data: {} }, pattern_properties: None, additional_properties: Some(true), additional_property_schema: Some((2162:30..2168:7, RwLock { data: Resolved { schema_url: None, value: Table(TableSchema { title: None, description: None, range: 2162:30..2168:7, properties: RwLock { data: {} }, pattern_properties: None, additional_properties: Some(true), additional_property_schema: Some((2164:32..2166:9, RwLock { data: Ref { reference: "#/definitions/Dependency", title: None, description: None, deprecated: None } })), required: None, min_properties: None, max_properties: None, keys_order: Some(Ascending), deprecated: None }) } })), required: None, min_properties: None, max_properties: None, keys_order: Some(Ascending), deprecated: None }) } }, Key("profile"): PropertySchema { key_range: 2186:4..2186:13, property_schema: Ref { reference: "#/definitions/Profiles", title: None, description: None, deprecated: None } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: None, max_properties: None, keys_order: Some(Schema), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-ast-editor/src/edit/table.rs:17[0m
[1;35m  Trace[0m: self = Table(Table { kind: Table, range: 13:0..31:0, symbol_range: 13:0..31:0, key_values: {Key { kind: BareKey, value: "clap", range: 14:0..14:4 }: Table(Table { kind: KeyValue, range: 14:0..14:21, symbol_range: 14:0..14:21, key_values: {Key { kind: BareKey, value: "workspace", range: 14:0..14:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @283..287 @15:1..15:5 } })} }), Key { kind: BareKey, value: "clap-verbosity-flag", range: 15:0..15:19 }: Table(Table { kind: KeyValue, range: 15:0..15:36, symbol_range: 15:0..15:36, key_values: {Key { kind: BareKey, value: "workspace", range: 15:0..15:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @320..324 @16:1..16:5 } })} }), Key { kind: BareKey, value: "glob", range: 16:0..16:4 }: Table(Table { kind: KeyValue, range: 16:0..16:21, symbol_range: 16:0..16:21, key_values: {Key { kind: BareKey, value: "workspace", range: 16:0..16:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @342..346 @17:1..17:5 } })} }), Key { kind: BareKey, value: "itertools", range: 17:0..17:9 }: Table(Table { kind: KeyValue, range: 17:0..17:26, symbol_range: 17:0..17:26, key_values: {Key { kind: BareKey, value: "workspace", range: 17:0..17:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @369..373 @18:1..18:5 } })} }), Key { kind: BareKey, value: "nu-ansi-term", range: 18:0..18:12 }: Table(Table { kind: KeyValue, range: 18:0..18:29, symbol_range: 18:0..18:29, key_values: {Key { kind: BareKey, value: "workspace", range: 18:0..18:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @399..403 @19:1..19:5 } })} }), Key { kind: BareKey, value: "serde_tombi", range: 19:0..19:11 }: Table(Table { kind: KeyValue, range: 19:0..19:28, symbol_range: 19:0..19:28, key_values: {Key { kind: BareKey, value: "workspace", range: 19:0..19:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @428..432 @20:1..20:5 } })} }), Key { kind: BareKey, value: "thiserror", range: 20:0..20:9 }: Table(Table { kind: KeyValue, range: 20:0..20:26, symbol_range: 20:0..20:26, key_values: {Key { kind: BareKey, value: "workspace", range: 20:0..20:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @455..459 @21:1..21:5 } })} }), Key { kind: BareKey, value: "tokio", range: 21:0..21:5 }: Table(Table { kind: KeyValue, range: 21:0..21:22, symbol_range: 21:0..21:22, key_values: {Key { kind: BareKey, value: "workspace", range: 21:0..21:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @478..482 @22:1..22:5 } })} }), Key { kind: BareKey, value: "tombi-config", range: 22:0..22:12 }: Table(Table { kind: KeyValue, range: 22:0..22:29, symbol_range: 22:0..22:29, key_values: {Key { kind: BareKey, value: "workspace", range: 22:0..22:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @508..512 @23:1..23:5 } })} }), Key { kind: BareKey, value: "tombi-diagnostic", range: 23:0..23:16 }: Table(Table { kind: KeyValue, range: 23:0..23:33, symbol_range: 23:0..23:33, key_values: {Key { kind: BareKey, value: "workspace", range: 23:0..23:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @542..546 @24:1..24:5 } })} }), Key { kind: BareKey, value: "tombi-formatter", range: 24:0..24:15 }: Table(Table { kind: KeyValue, range: 24:0..24:32, symbol_range: 24:0..24:32, key_values: {Key { kind: BareKey, value: "workspace", range: 24:0..24:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @575..579 @25:1..25:5 } })} }), Key { kind: BareKey, value: "tombi-linter", range: 25:0..25:12 }: Table(Table { kind: KeyValue, range: 25:0..25:29, symbol_range: 25:0..25:29, key_values: {Key { kind: BareKey, value: "workspace", range: 25:0..25:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @605..609 @26:1..26:5 } })} }), Key { kind: BareKey, value: "tombi-lsp", range: 26:0..26:9 }: Table(Table { kind: KeyValue, range: 26:0..26:26, symbol_range: 26:0..26:26, key_values: {Key { kind: BareKey, value: "workspace", range: 26:0..26:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @632..636 @27:1..27:5 } })} }), Key { kind: BareKey, value: "tombi-schema-store", range: 27:0..27:18 }: Table(Table { kind: KeyValue, range: 27:0..27:35, symbol_range: 27:0..27:35, key_values: {Key { kind: BareKey, value: "workspace", range: 27:0..27:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @668..672 @28:1..28:5 } })} }), Key { kind: BareKey, value: "tracing", range: 28:0..28:7 }: Table(Table { kind: KeyValue, range: 28:0..28:24, symbol_range: 28:0..28:24, key_values: {Key { kind: BareKey, value: "workspace", range: 28:0..28:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @693..697 @29:1..29:5 } })} }), Key { kind: BareKey, value: "tracing-subscriber", range: 29:0..29:18 }: Table(Table { kind: KeyValue, range: 29:0..29:35, symbol_range: 29:0..29:35, key_values: {Key { kind: BareKey, value: "workspace", range: 29:0..29:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @729..733 @30:1..30:5 } })} }), Key { kind: BareKey, value: "url", range: 30:0..30:3 }: Table(Table { kind: KeyValue, range: 30:0..30:20, symbol_range: 30:0..30:20, key_values: {Key { kind: BareKey, value: "workspace", range: 30:0..30:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @750..754 @31:1..31:5 } })} })} })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Table(TableSchema { title: None, description: Some("Cargo is configured to look for dependencies on [crates.io](https://crates.io) by default. Only\nthe name and a version string are required in this case. In [the cargo\nguide](https://doc.rust-lang.org/cargo/guide/index.html), we specified a dependency on the `time` crate:\n\n```toml\n[dependencies]\ntime = \"0.1.12\"\n```\n\nThe string `\"0.1.12\"` is a [semver](https://github.com/steveklabnik/semver#requirements) version requirement. Since this\nstring does not have any operators in it, it is interpreted the same way as\nif we had specified `\"^0.1.12\"`, which is called a caret requirement.\n\nA dependency can also be defined by a table with additional options:\n\n```toml\n[dependencies]\ntime = { path = \"../time\", version = \"0.1.12\" }\n```"), range: 2022:20..2034:5, properties: RwLock { data: {} }, pattern_properties: None, additional_properties: Some(true), additional_property_schema: Some((2025:30..2027:7, RwLock { data: Ref { reference: "#/definitions/Dependency", title: None, description: None, deprecated: None } })), required: None, min_properties: None, max_properties: None, keys_order: Some(Ascending), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table { kind: Table, range: 13:0..31:0, symbol_range: 13:0..31:0, key_values: {Key { kind: BareKey, value: "clap", range: 14:0..14:4 }: Table(Table { kind: KeyValue, range: 14:0..14:21, symbol_range: 14:0..14:21, key_values: {Key { kind: BareKey, value: "workspace", range: 14:0..14:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @283..287 @15:1..15:5 } })} }), Key { kind: BareKey, value: "clap-verbosity-flag", range: 15:0..15:19 }: Table(Table { kind: KeyValue, range: 15:0..15:36, symbol_range: 15:0..15:36, key_values: {Key { kind: BareKey, value: "workspace", range: 15:0..15:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @320..324 @16:1..16:5 } })} }), Key { kind: BareKey, value: "glob", range: 16:0..16:4 }: Table(Table { kind: KeyValue, range: 16:0..16:21, symbol_range: 16:0..16:21, key_values: {Key { kind: BareKey, value: "workspace", range: 16:0..16:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @342..346 @17:1..17:5 } })} }), Key { kind: BareKey, value: "itertools", range: 17:0..17:9 }: Table(Table { kind: KeyValue, range: 17:0..17:26, symbol_range: 17:0..17:26, key_values: {Key { kind: BareKey, value: "workspace", range: 17:0..17:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @369..373 @18:1..18:5 } })} }), Key { kind: BareKey, value: "nu-ansi-term", range: 18:0..18:12 }: Table(Table { kind: KeyValue, range: 18:0..18:29, symbol_range: 18:0..18:29, key_values: {Key { kind: BareKey, value: "workspace", range: 18:0..18:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @399..403 @19:1..19:5 } })} }), Key { kind: BareKey, value: "serde_tombi", range: 19:0..19:11 }: Table(Table { kind: KeyValue, range: 19:0..19:28, symbol_range: 19:0..19:28, key_values: {Key { kind: BareKey, value: "workspace", range: 19:0..19:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @428..432 @20:1..20:5 } })} }), Key { kind: BareKey, value: "thiserror", range: 20:0..20:9 }: Table(Table { kind: KeyValue, range: 20:0..20:26, symbol_range: 20:0..20:26, key_values: {Key { kind: BareKey, value: "workspace", range: 20:0..20:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @455..459 @21:1..21:5 } })} }), Key { kind: BareKey, value: "tokio", range: 21:0..21:5 }: Table(Table { kind: KeyValue, range: 21:0..21:22, symbol_range: 21:0..21:22, key_values: {Key { kind: BareKey, value: "workspace", range: 21:0..21:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @478..482 @22:1..22:5 } })} }), Key { kind: BareKey, value: "tombi-config", range: 22:0..22:12 }: Table(Table { kind: KeyValue, range: 22:0..22:29, symbol_range: 22:0..22:29, key_values: {Key { kind: BareKey, value: "workspace", range: 22:0..22:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @508..512 @23:1..23:5 } })} }), Key { kind: BareKey, value: "tombi-diagnostic", range: 23:0..23:16 }: Table(Table { kind: KeyValue, range: 23:0..23:33, symbol_range: 23:0..23:33, key_values: {Key { kind: BareKey, value: "workspace", range: 23:0..23:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @542..546 @24:1..24:5 } })} }), Key { kind: BareKey, value: "tombi-formatter", range: 24:0..24:15 }: Table(Table { kind: KeyValue, range: 24:0..24:32, symbol_range: 24:0..24:32, key_values: {Key { kind: BareKey, value: "workspace", range: 24:0..24:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @575..579 @25:1..25:5 } })} }), Key { kind: BareKey, value: "tombi-linter", range: 25:0..25:12 }: Table(Table { kind: KeyValue, range: 25:0..25:29, symbol_range: 25:0..25:29, key_values: {Key { kind: BareKey, value: "workspace", range: 25:0..25:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @605..609 @26:1..26:5 } })} }), Key { kind: BareKey, value: "tombi-lsp", range: 26:0..26:9 }: Table(Table { kind: KeyValue, range: 26:0..26:26, symbol_range: 26:0..26:26, key_values: {Key { kind: BareKey, value: "workspace", range: 26:0..26:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @632..636 @27:1..27:5 } })} }), Key { kind: BareKey, value: "tombi-schema-store", range: 27:0..27:18 }: Table(Table { kind: KeyValue, range: 27:0..27:35, symbol_range: 27:0..27:35, key_values: {Key { kind: BareKey, value: "workspace", range: 27:0..27:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @668..672 @28:1..28:5 } })} }), Key { kind: BareKey, value: "tracing", range: 28:0..28:7 }: Table(Table { kind: KeyValue, range: 28:0..28:24, symbol_range: 28:0..28:24, key_values: {Key { kind: BareKey, value: "workspace", range: 28:0..28:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @693..697 @29:1..29:5 } })} }), Key { kind: BareKey, value: "tracing-subscriber", range: 29:0..29:18 }: Table(Table { kind: KeyValue, range: 29:0..29:35, symbol_range: 29:0..29:35, key_values: {Key { kind: BareKey, value: "workspace", range: 29:0..29:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @729..733 @30:1..30:5 } })} }), Key { kind: BareKey, value: "url", range: 30:0..30:3 }: Table(Table { kind: KeyValue, range: 30:0..30:20, symbol_range: 30:0..30:20, key_values: {Key { kind: BareKey, value: "workspace", range: 30:0..30:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @750..754 @31:1..31:5 } })} })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("dependencies")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Table(TableSchema { title: None, description: Some("Cargo is configured to look for dependencies on [crates.io](https://crates.io) by default. Only\nthe name and a version string are required in this case. In [the cargo\nguide](https://doc.rust-lang.org/cargo/guide/index.html), we specified a dependency on the `time` crate:\n\n```toml\n[dependencies]\ntime = \"0.1.12\"\n```\n\nThe string `\"0.1.12\"` is a [semver](https://github.com/steveklabnik/semver#requirements) version requirement. Since this\nstring does not have any operators in it, it is interpreted the same way as\nif we had specified `\"^0.1.12\"`, which is called a caret requirement.\n\nA dependency can also be defined by a table with additional options:\n\n```toml\n[dependencies]\ntime = { path = \"../time\", version = \"0.1.12\" }\n```"), range: 2022:20..2034:5, properties: RwLock { data: {} }, pattern_properties: None, additional_properties: Some(true), additional_property_schema: Some((2025:30..2027:7, RwLock { data: Ref { reference: "#/definitions/Dependency", title: None, description: None, deprecated: None } })), required: None, min_properties: None, max_properties: None, keys_order: Some(Ascending), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: self = Table(Table { kind: KeyValue, range: 14:0..14:21, symbol_range: 14:0..14:21, key_values: {Key { kind: BareKey, value: "workspace", range: 14:0..14:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @283..287 @15:1..15:5 } })} })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: AnyOf(AnyOfSchema { title: Some("Dependency"), description: None, range: 74:18..84:5, schemas: RwLock { data: [Resolved { schema_url: None, value: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 14:0..14:21, symbol_range: 14:0..14:21, key_values: {Key { kind: BareKey, value: "workspace", range: 14:0..14:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @283..287 @15:1..15:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("dependencies"), Key("clap")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: AnyOf(AnyOfSchema { title: Some("Dependency"), description: None, range: 74:18..84:5, schemas: RwLock { data: [Resolved { schema_url: None, value: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: value = Table { kind: KeyValue, range: 14:0..14:21, symbol_range: 14:0..14:21, key_values: {Key { kind: BareKey, value: "workspace", range: 14:0..14:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @283..287 @15:1..15:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/any_of.rs:21[0m
[1;35m  Trace[0m: any_of_schema = AnyOfSchema { title: Some("Dependency"), description: None, range: 74:18..84:5, schemas: RwLock { data: [Resolved { schema_url: None, value: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }
    [90mat[0m [36mcrates/tombi-validator/src/validate/any_of.rs:22[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 14:0..14:21, symbol_range: 14:0..14:21, key_values: {Key { kind: BareKey, value: "workspace", range: 14:0..14:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @283..287 @15:1..15:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("dependencies"), Key("clap")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: property_schema = Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:133[0m
[1;35m  Trace[0m: self = Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @283..287 @15:1..15:5 } })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table(Table { kind: KeyValue, range: 15:0..15:36, symbol_range: 15:0..15:36, key_values: {Key { kind: BareKey, value: "workspace", range: 15:0..15:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @320..324 @16:1..16:5 } })} })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: AnyOf(AnyOfSchema { title: Some("Dependency"), description: None, range: 74:18..84:5, schemas: RwLock { data: [Resolved { schema_url: None, value: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 15:0..15:36, symbol_range: 15:0..15:36, key_values: {Key { kind: BareKey, value: "workspace", range: 15:0..15:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @320..324 @16:1..16:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("dependencies"), Key("clap-verbosity-flag")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: AnyOf(AnyOfSchema { title: Some("Dependency"), description: None, range: 74:18..84:5, schemas: RwLock { data: [Resolved { schema_url: None, value: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: value = Table { kind: KeyValue, range: 15:0..15:36, symbol_range: 15:0..15:36, key_values: {Key { kind: BareKey, value: "workspace", range: 15:0..15:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @320..324 @16:1..16:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/any_of.rs:21[0m
[1;35m  Trace[0m: any_of_schema = AnyOfSchema { title: Some("Dependency"), description: None, range: 74:18..84:5, schemas: RwLock { data: [Resolved { schema_url: None, value: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }
    [90mat[0m [36mcrates/tombi-validator/src/validate/any_of.rs:22[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 15:0..15:36, symbol_range: 15:0..15:36, key_values: {Key { kind: BareKey, value: "workspace", range: 15:0..15:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @320..324 @16:1..16:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("dependencies"), Key("clap-verbosity-flag")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: property_schema = Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:133[0m
[1;35m  Trace[0m: self = Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @320..324 @16:1..16:5 } })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table(Table { kind: KeyValue, range: 16:0..16:21, symbol_range: 16:0..16:21, key_values: {Key { kind: BareKey, value: "workspace", range: 16:0..16:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @342..346 @17:1..17:5 } })} })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: AnyOf(AnyOfSchema { title: Some("Dependency"), description: None, range: 74:18..84:5, schemas: RwLock { data: [Resolved { schema_url: None, value: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 16:0..16:21, symbol_range: 16:0..16:21, key_values: {Key { kind: BareKey, value: "workspace", range: 16:0..16:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @342..346 @17:1..17:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("dependencies"), Key("glob")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: AnyOf(AnyOfSchema { title: Some("Dependency"), description: None, range: 74:18..84:5, schemas: RwLock { data: [Resolved { schema_url: None, value: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: value = Table { kind: KeyValue, range: 16:0..16:21, symbol_range: 16:0..16:21, key_values: {Key { kind: BareKey, value: "workspace", range: 16:0..16:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @342..346 @17:1..17:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/any_of.rs:21[0m
[1;35m  Trace[0m: any_of_schema = AnyOfSchema { title: Some("Dependency"), description: None, range: 74:18..84:5, schemas: RwLock { data: [Resolved { schema_url: None, value: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }
    [90mat[0m [36mcrates/tombi-validator/src/validate/any_of.rs:22[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 16:0..16:21, symbol_range: 16:0..16:21, key_values: {Key { kind: BareKey, value: "workspace", range: 16:0..16:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @342..346 @17:1..17:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("dependencies"), Key("glob")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: property_schema = Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:133[0m
[1;35m  Trace[0m: self = Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @342..346 @17:1..17:5 } })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table(Table { kind: KeyValue, range: 17:0..17:26, symbol_range: 17:0..17:26, key_values: {Key { kind: BareKey, value: "workspace", range: 17:0..17:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @369..373 @18:1..18:5 } })} })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: AnyOf(AnyOfSchema { title: Some("Dependency"), description: None, range: 74:18..84:5, schemas: RwLock { data: [Resolved { schema_url: None, value: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 17:0..17:26, symbol_range: 17:0..17:26, key_values: {Key { kind: BareKey, value: "workspace", range: 17:0..17:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @369..373 @18:1..18:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("dependencies"), Key("itertools")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: AnyOf(AnyOfSchema { title: Some("Dependency"), description: None, range: 74:18..84:5, schemas: RwLock { data: [Resolved { schema_url: None, value: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: value = Table { kind: KeyValue, range: 17:0..17:26, symbol_range: 17:0..17:26, key_values: {Key { kind: BareKey, value: "workspace", range: 17:0..17:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @369..373 @18:1..18:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/any_of.rs:21[0m
[1;35m  Trace[0m: any_of_schema = AnyOfSchema { title: Some("Dependency"), description: None, range: 74:18..84:5, schemas: RwLock { data: [Resolved { schema_url: None, value: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }
    [90mat[0m [36mcrates/tombi-validator/src/validate/any_of.rs:22[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 17:0..17:26, symbol_range: 17:0..17:26, key_values: {Key { kind: BareKey, value: "workspace", range: 17:0..17:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @369..373 @18:1..18:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("dependencies"), Key("itertools")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: property_schema = Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:133[0m
[1;35m  Trace[0m: self = Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @369..373 @18:1..18:5 } })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table(Table { kind: KeyValue, range: 18:0..18:29, symbol_range: 18:0..18:29, key_values: {Key { kind: BareKey, value: "workspace", range: 18:0..18:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @399..403 @19:1..19:5 } })} })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: AnyOf(AnyOfSchema { title: Some("Dependency"), description: None, range: 74:18..84:5, schemas: RwLock { data: [Resolved { schema_url: None, value: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 18:0..18:29, symbol_range: 18:0..18:29, key_values: {Key { kind: BareKey, value: "workspace", range: 18:0..18:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @399..403 @19:1..19:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("dependencies"), Key("nu-ansi-term")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: AnyOf(AnyOfSchema { title: Some("Dependency"), description: None, range: 74:18..84:5, schemas: RwLock { data: [Resolved { schema_url: None, value: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: value = Table { kind: KeyValue, range: 18:0..18:29, symbol_range: 18:0..18:29, key_values: {Key { kind: BareKey, value: "workspace", range: 18:0..18:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @399..403 @19:1..19:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/any_of.rs:21[0m
[1;35m  Trace[0m: any_of_schema = AnyOfSchema { title: Some("Dependency"), description: None, range: 74:18..84:5, schemas: RwLock { data: [Resolved { schema_url: None, value: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }
    [90mat[0m [36mcrates/tombi-validator/src/validate/any_of.rs:22[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 18:0..18:29, symbol_range: 18:0..18:29, key_values: {Key { kind: BareKey, value: "workspace", range: 18:0..18:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @399..403 @19:1..19:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("dependencies"), Key("nu-ansi-term")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: property_schema = Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:133[0m
[1;35m  Trace[0m: self = Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @399..403 @19:1..19:5 } })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table(Table { kind: KeyValue, range: 19:0..19:28, symbol_range: 19:0..19:28, key_values: {Key { kind: BareKey, value: "workspace", range: 19:0..19:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @428..432 @20:1..20:5 } })} })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: AnyOf(AnyOfSchema { title: Some("Dependency"), description: None, range: 74:18..84:5, schemas: RwLock { data: [Resolved { schema_url: None, value: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 19:0..19:28, symbol_range: 19:0..19:28, key_values: {Key { kind: BareKey, value: "workspace", range: 19:0..19:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @428..432 @20:1..20:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("dependencies"), Key("serde_tombi")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: AnyOf(AnyOfSchema { title: Some("Dependency"), description: None, range: 74:18..84:5, schemas: RwLock { data: [Resolved { schema_url: None, value: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: value = Table { kind: KeyValue, range: 19:0..19:28, symbol_range: 19:0..19:28, key_values: {Key { kind: BareKey, value: "workspace", range: 19:0..19:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @428..432 @20:1..20:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/any_of.rs:21[0m
[1;35m  Trace[0m: any_of_schema = AnyOfSchema { title: Some("Dependency"), description: None, range: 74:18..84:5, schemas: RwLock { data: [Resolved { schema_url: None, value: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }
    [90mat[0m [36mcrates/tombi-validator/src/validate/any_of.rs:22[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 19:0..19:28, symbol_range: 19:0..19:28, key_values: {Key { kind: BareKey, value: "workspace", range: 19:0..19:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @428..432 @20:1..20:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("dependencies"), Key("serde_tombi")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: property_schema = Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:133[0m
[1;35m  Trace[0m: self = Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @428..432 @20:1..20:5 } })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table(Table { kind: KeyValue, range: 20:0..20:26, symbol_range: 20:0..20:26, key_values: {Key { kind: BareKey, value: "workspace", range: 20:0..20:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @455..459 @21:1..21:5 } })} })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: AnyOf(AnyOfSchema { title: Some("Dependency"), description: None, range: 74:18..84:5, schemas: RwLock { data: [Resolved { schema_url: None, value: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 20:0..20:26, symbol_range: 20:0..20:26, key_values: {Key { kind: BareKey, value: "workspace", range: 20:0..20:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @455..459 @21:1..21:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("dependencies"), Key("thiserror")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: AnyOf(AnyOfSchema { title: Some("Dependency"), description: None, range: 74:18..84:5, schemas: RwLock { data: [Resolved { schema_url: None, value: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: value = Table { kind: KeyValue, range: 20:0..20:26, symbol_range: 20:0..20:26, key_values: {Key { kind: BareKey, value: "workspace", range: 20:0..20:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @455..459 @21:1..21:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/any_of.rs:21[0m
[1;35m  Trace[0m: any_of_schema = AnyOfSchema { title: Some("Dependency"), description: None, range: 74:18..84:5, schemas: RwLock { data: [Resolved { schema_url: None, value: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }
    [90mat[0m [36mcrates/tombi-validator/src/validate/any_of.rs:22[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 20:0..20:26, symbol_range: 20:0..20:26, key_values: {Key { kind: BareKey, value: "workspace", range: 20:0..20:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @455..459 @21:1..21:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("dependencies"), Key("thiserror")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: property_schema = Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:133[0m
[1;35m  Trace[0m: self = Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @455..459 @21:1..21:5 } })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table(Table { kind: KeyValue, range: 21:0..21:22, symbol_range: 21:0..21:22, key_values: {Key { kind: BareKey, value: "workspace", range: 21:0..21:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @478..482 @22:1..22:5 } })} })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: AnyOf(AnyOfSchema { title: Some("Dependency"), description: None, range: 74:18..84:5, schemas: RwLock { data: [Resolved { schema_url: None, value: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 21:0..21:22, symbol_range: 21:0..21:22, key_values: {Key { kind: BareKey, value: "workspace", range: 21:0..21:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @478..482 @22:1..22:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("dependencies"), Key("tokio")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: AnyOf(AnyOfSchema { title: Some("Dependency"), description: None, range: 74:18..84:5, schemas: RwLock { data: [Resolved { schema_url: None, value: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: value = Table { kind: KeyValue, range: 21:0..21:22, symbol_range: 21:0..21:22, key_values: {Key { kind: BareKey, value: "workspace", range: 21:0..21:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @478..482 @22:1..22:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/any_of.rs:21[0m
[1;35m  Trace[0m: any_of_schema = AnyOfSchema { title: Some("Dependency"), description: None, range: 74:18..84:5, schemas: RwLock { data: [Resolved { schema_url: None, value: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }
    [90mat[0m [36mcrates/tombi-validator/src/validate/any_of.rs:22[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 21:0..21:22, symbol_range: 21:0..21:22, key_values: {Key { kind: BareKey, value: "workspace", range: 21:0..21:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @478..482 @22:1..22:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("dependencies"), Key("tokio")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: property_schema = Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:133[0m
[1;35m  Trace[0m: self = Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @478..482 @22:1..22:5 } })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table(Table { kind: KeyValue, range: 22:0..22:29, symbol_range: 22:0..22:29, key_values: {Key { kind: BareKey, value: "workspace", range: 22:0..22:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @508..512 @23:1..23:5 } })} })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: AnyOf(AnyOfSchema { title: Some("Dependency"), description: None, range: 74:18..84:5, schemas: RwLock { data: [Resolved { schema_url: None, value: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 22:0..22:29, symbol_range: 22:0..22:29, key_values: {Key { kind: BareKey, value: "workspace", range: 22:0..22:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @508..512 @23:1..23:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("dependencies"), Key("tombi-config")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: AnyOf(AnyOfSchema { title: Some("Dependency"), description: None, range: 74:18..84:5, schemas: RwLock { data: [Resolved { schema_url: None, value: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: value = Table { kind: KeyValue, range: 22:0..22:29, symbol_range: 22:0..22:29, key_values: {Key { kind: BareKey, value: "workspace", range: 22:0..22:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @508..512 @23:1..23:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/any_of.rs:21[0m
[1;35m  Trace[0m: any_of_schema = AnyOfSchema { title: Some("Dependency"), description: None, range: 74:18..84:5, schemas: RwLock { data: [Resolved { schema_url: None, value: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }
    [90mat[0m [36mcrates/tombi-validator/src/validate/any_of.rs:22[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 22:0..22:29, symbol_range: 22:0..22:29, key_values: {Key { kind: BareKey, value: "workspace", range: 22:0..22:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @508..512 @23:1..23:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("dependencies"), Key("tombi-config")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: property_schema = Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:133[0m
[1;35m  Trace[0m: self = Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @508..512 @23:1..23:5 } })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table(Table { kind: KeyValue, range: 23:0..23:33, symbol_range: 23:0..23:33, key_values: {Key { kind: BareKey, value: "workspace", range: 23:0..23:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @542..546 @24:1..24:5 } })} })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: AnyOf(AnyOfSchema { title: Some("Dependency"), description: None, range: 74:18..84:5, schemas: RwLock { data: [Resolved { schema_url: None, value: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 23:0..23:33, symbol_range: 23:0..23:33, key_values: {Key { kind: BareKey, value: "workspace", range: 23:0..23:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @542..546 @24:1..24:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("dependencies"), Key("tombi-diagnostic")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: AnyOf(AnyOfSchema { title: Some("Dependency"), description: None, range: 74:18..84:5, schemas: RwLock { data: [Resolved { schema_url: None, value: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: value = Table { kind: KeyValue, range: 23:0..23:33, symbol_range: 23:0..23:33, key_values: {Key { kind: BareKey, value: "workspace", range: 23:0..23:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @542..546 @24:1..24:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/any_of.rs:21[0m
[1;35m  Trace[0m: any_of_schema = AnyOfSchema { title: Some("Dependency"), description: None, range: 74:18..84:5, schemas: RwLock { data: [Resolved { schema_url: None, value: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }
    [90mat[0m [36mcrates/tombi-validator/src/validate/any_of.rs:22[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 23:0..23:33, symbol_range: 23:0..23:33, key_values: {Key { kind: BareKey, value: "workspace", range: 23:0..23:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @542..546 @24:1..24:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("dependencies"), Key("tombi-diagnostic")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: property_schema = Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:133[0m
[1;35m  Trace[0m: self = Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @542..546 @24:1..24:5 } })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table(Table { kind: KeyValue, range: 24:0..24:32, symbol_range: 24:0..24:32, key_values: {Key { kind: BareKey, value: "workspace", range: 24:0..24:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @575..579 @25:1..25:5 } })} })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: AnyOf(AnyOfSchema { title: Some("Dependency"), description: None, range: 74:18..84:5, schemas: RwLock { data: [Resolved { schema_url: None, value: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 24:0..24:32, symbol_range: 24:0..24:32, key_values: {Key { kind: BareKey, value: "workspace", range: 24:0..24:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @575..579 @25:1..25:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("dependencies"), Key("tombi-formatter")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: AnyOf(AnyOfSchema { title: Some("Dependency"), description: None, range: 74:18..84:5, schemas: RwLock { data: [Resolved { schema_url: None, value: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: value = Table { kind: KeyValue, range: 24:0..24:32, symbol_range: 24:0..24:32, key_values: {Key { kind: BareKey, value: "workspace", range: 24:0..24:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @575..579 @25:1..25:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/any_of.rs:21[0m
[1;35m  Trace[0m: any_of_schema = AnyOfSchema { title: Some("Dependency"), description: None, range: 74:18..84:5, schemas: RwLock { data: [Resolved { schema_url: None, value: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }
    [90mat[0m [36mcrates/tombi-validator/src/validate/any_of.rs:22[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 24:0..24:32, symbol_range: 24:0..24:32, key_values: {Key { kind: BareKey, value: "workspace", range: 24:0..24:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @575..579 @25:1..25:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("dependencies"), Key("tombi-formatter")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: property_schema = Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:133[0m
[1;35m  Trace[0m: self = Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @575..579 @25:1..25:5 } })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table(Table { kind: KeyValue, range: 25:0..25:29, symbol_range: 25:0..25:29, key_values: {Key { kind: BareKey, value: "workspace", range: 25:0..25:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @605..609 @26:1..26:5 } })} })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: AnyOf(AnyOfSchema { title: Some("Dependency"), description: None, range: 74:18..84:5, schemas: RwLock { data: [Resolved { schema_url: None, value: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 25:0..25:29, symbol_range: 25:0..25:29, key_values: {Key { kind: BareKey, value: "workspace", range: 25:0..25:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @605..609 @26:1..26:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("dependencies"), Key("tombi-linter")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: AnyOf(AnyOfSchema { title: Some("Dependency"), description: None, range: 74:18..84:5, schemas: RwLock { data: [Resolved { schema_url: None, value: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: value = Table { kind: KeyValue, range: 25:0..25:29, symbol_range: 25:0..25:29, key_values: {Key { kind: BareKey, value: "workspace", range: 25:0..25:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @605..609 @26:1..26:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/any_of.rs:21[0m
[1;35m  Trace[0m: any_of_schema = AnyOfSchema { title: Some("Dependency"), description: None, range: 74:18..84:5, schemas: RwLock { data: [Resolved { schema_url: None, value: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }
    [90mat[0m [36mcrates/tombi-validator/src/validate/any_of.rs:22[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 25:0..25:29, symbol_range: 25:0..25:29, key_values: {Key { kind: BareKey, value: "workspace", range: 25:0..25:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @605..609 @26:1..26:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("dependencies"), Key("tombi-linter")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: property_schema = Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:133[0m
[1;35m  Trace[0m: self = Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @605..609 @26:1..26:5 } })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table(Table { kind: KeyValue, range: 26:0..26:26, symbol_range: 26:0..26:26, key_values: {Key { kind: BareKey, value: "workspace", range: 26:0..26:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @632..636 @27:1..27:5 } })} })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: AnyOf(AnyOfSchema { title: Some("Dependency"), description: None, range: 74:18..84:5, schemas: RwLock { data: [Resolved { schema_url: None, value: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 26:0..26:26, symbol_range: 26:0..26:26, key_values: {Key { kind: BareKey, value: "workspace", range: 26:0..26:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @632..636 @27:1..27:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("dependencies"), Key("tombi-lsp")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: AnyOf(AnyOfSchema { title: Some("Dependency"), description: None, range: 74:18..84:5, schemas: RwLock { data: [Resolved { schema_url: None, value: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: value = Table { kind: KeyValue, range: 26:0..26:26, symbol_range: 26:0..26:26, key_values: {Key { kind: BareKey, value: "workspace", range: 26:0..26:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @632..636 @27:1..27:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/any_of.rs:21[0m
[1;35m  Trace[0m: any_of_schema = AnyOfSchema { title: Some("Dependency"), description: None, range: 74:18..84:5, schemas: RwLock { data: [Resolved { schema_url: None, value: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }
    [90mat[0m [36mcrates/tombi-validator/src/validate/any_of.rs:22[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 26:0..26:26, symbol_range: 26:0..26:26, key_values: {Key { kind: BareKey, value: "workspace", range: 26:0..26:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @632..636 @27:1..27:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("dependencies"), Key("tombi-lsp")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: property_schema = Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:133[0m
[1;35m  Trace[0m: self = Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @632..636 @27:1..27:5 } })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table(Table { kind: KeyValue, range: 27:0..27:35, symbol_range: 27:0..27:35, key_values: {Key { kind: BareKey, value: "workspace", range: 27:0..27:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @668..672 @28:1..28:5 } })} })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: AnyOf(AnyOfSchema { title: Some("Dependency"), description: None, range: 74:18..84:5, schemas: RwLock { data: [Resolved { schema_url: None, value: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 27:0..27:35, symbol_range: 27:0..27:35, key_values: {Key { kind: BareKey, value: "workspace", range: 27:0..27:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @668..672 @28:1..28:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("dependencies"), Key("tombi-schema-store")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: AnyOf(AnyOfSchema { title: Some("Dependency"), description: None, range: 74:18..84:5, schemas: RwLock { data: [Resolved { schema_url: None, value: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: value = Table { kind: KeyValue, range: 27:0..27:35, symbol_range: 27:0..27:35, key_values: {Key { kind: BareKey, value: "workspace", range: 27:0..27:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @668..672 @28:1..28:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/any_of.rs:21[0m
[1;35m  Trace[0m: any_of_schema = AnyOfSchema { title: Some("Dependency"), description: None, range: 74:18..84:5, schemas: RwLock { data: [Resolved { schema_url: None, value: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }
    [90mat[0m [36mcrates/tombi-validator/src/validate/any_of.rs:22[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 27:0..27:35, symbol_range: 27:0..27:35, key_values: {Key { kind: BareKey, value: "workspace", range: 27:0..27:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @668..672 @28:1..28:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("dependencies"), Key("tombi-schema-store")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: property_schema = Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:133[0m
[1;35m  Trace[0m: self = Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @668..672 @28:1..28:5 } })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table(Table { kind: KeyValue, range: 28:0..28:24, symbol_range: 28:0..28:24, key_values: {Key { kind: BareKey, value: "workspace", range: 28:0..28:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @693..697 @29:1..29:5 } })} })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: AnyOf(AnyOfSchema { title: Some("Dependency"), description: None, range: 74:18..84:5, schemas: RwLock { data: [Resolved { schema_url: None, value: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 28:0..28:24, symbol_range: 28:0..28:24, key_values: {Key { kind: BareKey, value: "workspace", range: 28:0..28:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @693..697 @29:1..29:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("dependencies"), Key("tracing")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: AnyOf(AnyOfSchema { title: Some("Dependency"), description: None, range: 74:18..84:5, schemas: RwLock { data: [Resolved { schema_url: None, value: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: value = Table { kind: KeyValue, range: 28:0..28:24, symbol_range: 28:0..28:24, key_values: {Key { kind: BareKey, value: "workspace", range: 28:0..28:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @693..697 @29:1..29:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/any_of.rs:21[0m
[1;35m  Trace[0m: any_of_schema = AnyOfSchema { title: Some("Dependency"), description: None, range: 74:18..84:5, schemas: RwLock { data: [Resolved { schema_url: None, value: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }
    [90mat[0m [36mcrates/tombi-validator/src/validate/any_of.rs:22[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 28:0..28:24, symbol_range: 28:0..28:24, key_values: {Key { kind: BareKey, value: "workspace", range: 28:0..28:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @693..697 @29:1..29:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("dependencies"), Key("tracing")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: property_schema = Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:133[0m
[1;35m  Trace[0m: self = Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @693..697 @29:1..29:5 } })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table(Table { kind: KeyValue, range: 29:0..29:35, symbol_range: 29:0..29:35, key_values: {Key { kind: BareKey, value: "workspace", range: 29:0..29:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @729..733 @30:1..30:5 } })} })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: AnyOf(AnyOfSchema { title: Some("Dependency"), description: None, range: 74:18..84:5, schemas: RwLock { data: [Resolved { schema_url: None, value: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 29:0..29:35, symbol_range: 29:0..29:35, key_values: {Key { kind: BareKey, value: "workspace", range: 29:0..29:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @729..733 @30:1..30:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("dependencies"), Key("tracing-subscriber")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: AnyOf(AnyOfSchema { title: Some("Dependency"), description: None, range: 74:18..84:5, schemas: RwLock { data: [Resolved { schema_url: None, value: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: value = Table { kind: KeyValue, range: 29:0..29:35, symbol_range: 29:0..29:35, key_values: {Key { kind: BareKey, value: "workspace", range: 29:0..29:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @729..733 @30:1..30:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/any_of.rs:21[0m
[1;35m  Trace[0m: any_of_schema = AnyOfSchema { title: Some("Dependency"), description: None, range: 74:18..84:5, schemas: RwLock { data: [Resolved { schema_url: None, value: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }
    [90mat[0m [36mcrates/tombi-validator/src/validate/any_of.rs:22[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 29:0..29:35, symbol_range: 29:0..29:35, key_values: {Key { kind: BareKey, value: "workspace", range: 29:0..29:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @729..733 @30:1..30:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("dependencies"), Key("tracing-subscriber")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: property_schema = Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:133[0m
[1;35m  Trace[0m: self = Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @729..733 @30:1..30:5 } })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table(Table { kind: KeyValue, range: 30:0..30:20, symbol_range: 30:0..30:20, key_values: {Key { kind: BareKey, value: "workspace", range: 30:0..30:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @750..754 @31:1..31:5 } })} })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: AnyOf(AnyOfSchema { title: Some("Dependency"), description: None, range: 74:18..84:5, schemas: RwLock { data: [Resolved { schema_url: None, value: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 30:0..30:20, symbol_range: 30:0..30:20, key_values: {Key { kind: BareKey, value: "workspace", range: 30:0..30:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @750..754 @31:1..31:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("dependencies"), Key("url")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: AnyOf(AnyOfSchema { title: Some("Dependency"), description: None, range: 74:18..84:5, schemas: RwLock { data: [Resolved { schema_url: None, value: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: value = Table { kind: KeyValue, range: 30:0..30:20, symbol_range: 30:0..30:20, key_values: {Key { kind: BareKey, value: "workspace", range: 30:0..30:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @750..754 @31:1..31:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/any_of.rs:21[0m
[1;35m  Trace[0m: any_of_schema = AnyOfSchema { title: Some("Dependency"), description: None, range: 74:18..84:5, schemas: RwLock { data: [Resolved { schema_url: None, value: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }) }, Resolved { schema_url: None, value: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }) }] }, default: None, deprecated: None }
    [90mat[0m [36mcrates/tombi-validator/src/validate/any_of.rs:22[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 30:0..30:20, symbol_range: 30:0..30:20, key_values: {Key { kind: BareKey, value: "workspace", range: 30:0..30:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @750..754 @31:1..31:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("dependencies"), Key("url")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: property_schema = Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:133[0m
[1;35m  Trace[0m: self = Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @750..754 @31:1..31:5 } })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table(Table { kind: KeyValue, range: 14:0..14:21, symbol_range: 14:0..14:21, key_values: {Key { kind: BareKey, value: "workspace", range: 14:0..14:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @283..287 @15:1..15:5 } })} })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 14:0..14:21, symbol_range: 14:0..14:21, key_values: {Key { kind: BareKey, value: "workspace", range: 14:0..14:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @283..287 @15:1..15:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("clap")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: self = Table(Table { kind: KeyValue, range: 14:0..14:21, symbol_range: 14:0..14:21, key_values: {Key { kind: BareKey, value: "workspace", range: 14:0..14:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @283..287 @15:1..15:5 } })} })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 14:0..14:21, symbol_range: 14:0..14:21, key_values: {Key { kind: BareKey, value: "workspace", range: 14:0..14:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @283..287 @15:1..15:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("clap")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: property_schema = Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:133[0m
[1;35m  Trace[0m: self = Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @283..287 @15:1..15:5 } })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table(Table { kind: KeyValue, range: 15:0..15:36, symbol_range: 15:0..15:36, key_values: {Key { kind: BareKey, value: "workspace", range: 15:0..15:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @320..324 @16:1..16:5 } })} })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 15:0..15:36, symbol_range: 15:0..15:36, key_values: {Key { kind: BareKey, value: "workspace", range: 15:0..15:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @320..324 @16:1..16:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("clap-verbosity-flag")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: self = Table(Table { kind: KeyValue, range: 15:0..15:36, symbol_range: 15:0..15:36, key_values: {Key { kind: BareKey, value: "workspace", range: 15:0..15:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @320..324 @16:1..16:5 } })} })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 15:0..15:36, symbol_range: 15:0..15:36, key_values: {Key { kind: BareKey, value: "workspace", range: 15:0..15:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @320..324 @16:1..16:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("clap-verbosity-flag")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: property_schema = Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:133[0m
[1;35m  Trace[0m: self = Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @320..324 @16:1..16:5 } })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table(Table { kind: KeyValue, range: 16:0..16:21, symbol_range: 16:0..16:21, key_values: {Key { kind: BareKey, value: "workspace", range: 16:0..16:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @342..346 @17:1..17:5 } })} })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 16:0..16:21, symbol_range: 16:0..16:21, key_values: {Key { kind: BareKey, value: "workspace", range: 16:0..16:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @342..346 @17:1..17:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("glob")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: self = Table(Table { kind: KeyValue, range: 16:0..16:21, symbol_range: 16:0..16:21, key_values: {Key { kind: BareKey, value: "workspace", range: 16:0..16:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @342..346 @17:1..17:5 } })} })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 16:0..16:21, symbol_range: 16:0..16:21, key_values: {Key { kind: BareKey, value: "workspace", range: 16:0..16:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @342..346 @17:1..17:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("glob")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: property_schema = Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:133[0m
[1;35m  Trace[0m: self = Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @342..346 @17:1..17:5 } })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table(Table { kind: KeyValue, range: 17:0..17:26, symbol_range: 17:0..17:26, key_values: {Key { kind: BareKey, value: "workspace", range: 17:0..17:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @369..373 @18:1..18:5 } })} })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 17:0..17:26, symbol_range: 17:0..17:26, key_values: {Key { kind: BareKey, value: "workspace", range: 17:0..17:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @369..373 @18:1..18:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("itertools")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: self = Table(Table { kind: KeyValue, range: 17:0..17:26, symbol_range: 17:0..17:26, key_values: {Key { kind: BareKey, value: "workspace", range: 17:0..17:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @369..373 @18:1..18:5 } })} })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 17:0..17:26, symbol_range: 17:0..17:26, key_values: {Key { kind: BareKey, value: "workspace", range: 17:0..17:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @369..373 @18:1..18:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("itertools")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: property_schema = Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:133[0m
[1;35m  Trace[0m: self = Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @369..373 @18:1..18:5 } })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table(Table { kind: KeyValue, range: 18:0..18:29, symbol_range: 18:0..18:29, key_values: {Key { kind: BareKey, value: "workspace", range: 18:0..18:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @399..403 @19:1..19:5 } })} })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 18:0..18:29, symbol_range: 18:0..18:29, key_values: {Key { kind: BareKey, value: "workspace", range: 18:0..18:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @399..403 @19:1..19:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("nu-ansi-term")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: self = Table(Table { kind: KeyValue, range: 18:0..18:29, symbol_range: 18:0..18:29, key_values: {Key { kind: BareKey, value: "workspace", range: 18:0..18:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @399..403 @19:1..19:5 } })} })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 18:0..18:29, symbol_range: 18:0..18:29, key_values: {Key { kind: BareKey, value: "workspace", range: 18:0..18:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @399..403 @19:1..19:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("nu-ansi-term")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: property_schema = Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:133[0m
[1;35m  Trace[0m: self = Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @399..403 @19:1..19:5 } })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table(Table { kind: KeyValue, range: 19:0..19:28, symbol_range: 19:0..19:28, key_values: {Key { kind: BareKey, value: "workspace", range: 19:0..19:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @428..432 @20:1..20:5 } })} })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 19:0..19:28, symbol_range: 19:0..19:28, key_values: {Key { kind: BareKey, value: "workspace", range: 19:0..19:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @428..432 @20:1..20:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("serde_tombi")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: self = Table(Table { kind: KeyValue, range: 19:0..19:28, symbol_range: 19:0..19:28, key_values: {Key { kind: BareKey, value: "workspace", range: 19:0..19:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @428..432 @20:1..20:5 } })} })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 19:0..19:28, symbol_range: 19:0..19:28, key_values: {Key { kind: BareKey, value: "workspace", range: 19:0..19:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @428..432 @20:1..20:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("serde_tombi")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: property_schema = Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:133[0m
[1;35m  Trace[0m: self = Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @428..432 @20:1..20:5 } })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table(Table { kind: KeyValue, range: 20:0..20:26, symbol_range: 20:0..20:26, key_values: {Key { kind: BareKey, value: "workspace", range: 20:0..20:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @455..459 @21:1..21:5 } })} })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 20:0..20:26, symbol_range: 20:0..20:26, key_values: {Key { kind: BareKey, value: "workspace", range: 20:0..20:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @455..459 @21:1..21:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("thiserror")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: self = Table(Table { kind: KeyValue, range: 20:0..20:26, symbol_range: 20:0..20:26, key_values: {Key { kind: BareKey, value: "workspace", range: 20:0..20:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @455..459 @21:1..21:5 } })} })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 20:0..20:26, symbol_range: 20:0..20:26, key_values: {Key { kind: BareKey, value: "workspace", range: 20:0..20:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @455..459 @21:1..21:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("thiserror")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: property_schema = Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:133[0m
[1;35m  Trace[0m: self = Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @455..459 @21:1..21:5 } })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table(Table { kind: KeyValue, range: 21:0..21:22, symbol_range: 21:0..21:22, key_values: {Key { kind: BareKey, value: "workspace", range: 21:0..21:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @478..482 @22:1..22:5 } })} })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 21:0..21:22, symbol_range: 21:0..21:22, key_values: {Key { kind: BareKey, value: "workspace", range: 21:0..21:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @478..482 @22:1..22:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("tokio")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: self = Table(Table { kind: KeyValue, range: 21:0..21:22, symbol_range: 21:0..21:22, key_values: {Key { kind: BareKey, value: "workspace", range: 21:0..21:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @478..482 @22:1..22:5 } })} })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 21:0..21:22, symbol_range: 21:0..21:22, key_values: {Key { kind: BareKey, value: "workspace", range: 21:0..21:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @478..482 @22:1..22:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("tokio")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: property_schema = Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:133[0m
[1;35m  Trace[0m: self = Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @478..482 @22:1..22:5 } })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table(Table { kind: KeyValue, range: 22:0..22:29, symbol_range: 22:0..22:29, key_values: {Key { kind: BareKey, value: "workspace", range: 22:0..22:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @508..512 @23:1..23:5 } })} })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 22:0..22:29, symbol_range: 22:0..22:29, key_values: {Key { kind: BareKey, value: "workspace", range: 22:0..22:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @508..512 @23:1..23:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("tombi-config")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: self = Table(Table { kind: KeyValue, range: 22:0..22:29, symbol_range: 22:0..22:29, key_values: {Key { kind: BareKey, value: "workspace", range: 22:0..22:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @508..512 @23:1..23:5 } })} })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 22:0..22:29, symbol_range: 22:0..22:29, key_values: {Key { kind: BareKey, value: "workspace", range: 22:0..22:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @508..512 @23:1..23:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("tombi-config")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: property_schema = Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:133[0m
[1;35m  Trace[0m: self = Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @508..512 @23:1..23:5 } })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table(Table { kind: KeyValue, range: 23:0..23:33, symbol_range: 23:0..23:33, key_values: {Key { kind: BareKey, value: "workspace", range: 23:0..23:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @542..546 @24:1..24:5 } })} })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 23:0..23:33, symbol_range: 23:0..23:33, key_values: {Key { kind: BareKey, value: "workspace", range: 23:0..23:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @542..546 @24:1..24:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("tombi-diagnostic")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: self = Table(Table { kind: KeyValue, range: 23:0..23:33, symbol_range: 23:0..23:33, key_values: {Key { kind: BareKey, value: "workspace", range: 23:0..23:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @542..546 @24:1..24:5 } })} })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 23:0..23:33, symbol_range: 23:0..23:33, key_values: {Key { kind: BareKey, value: "workspace", range: 23:0..23:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @542..546 @24:1..24:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("tombi-diagnostic")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: property_schema = Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:133[0m
[1;35m  Trace[0m: self = Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @542..546 @24:1..24:5 } })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table(Table { kind: KeyValue, range: 24:0..24:32, symbol_range: 24:0..24:32, key_values: {Key { kind: BareKey, value: "workspace", range: 24:0..24:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @575..579 @25:1..25:5 } })} })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 24:0..24:32, symbol_range: 24:0..24:32, key_values: {Key { kind: BareKey, value: "workspace", range: 24:0..24:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @575..579 @25:1..25:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("tombi-formatter")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: self = Table(Table { kind: KeyValue, range: 24:0..24:32, symbol_range: 24:0..24:32, key_values: {Key { kind: BareKey, value: "workspace", range: 24:0..24:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @575..579 @25:1..25:5 } })} })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 24:0..24:32, symbol_range: 24:0..24:32, key_values: {Key { kind: BareKey, value: "workspace", range: 24:0..24:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @575..579 @25:1..25:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("tombi-formatter")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: property_schema = Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:133[0m
[1;35m  Trace[0m: self = Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @575..579 @25:1..25:5 } })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table(Table { kind: KeyValue, range: 25:0..25:29, symbol_range: 25:0..25:29, key_values: {Key { kind: BareKey, value: "workspace", range: 25:0..25:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @605..609 @26:1..26:5 } })} })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 25:0..25:29, symbol_range: 25:0..25:29, key_values: {Key { kind: BareKey, value: "workspace", range: 25:0..25:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @605..609 @26:1..26:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("tombi-linter")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: self = Table(Table { kind: KeyValue, range: 25:0..25:29, symbol_range: 25:0..25:29, key_values: {Key { kind: BareKey, value: "workspace", range: 25:0..25:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @605..609 @26:1..26:5 } })} })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 25:0..25:29, symbol_range: 25:0..25:29, key_values: {Key { kind: BareKey, value: "workspace", range: 25:0..25:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @605..609 @26:1..26:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("tombi-linter")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: property_schema = Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:133[0m
[1;35m  Trace[0m: self = Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @605..609 @26:1..26:5 } })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table(Table { kind: KeyValue, range: 26:0..26:26, symbol_range: 26:0..26:26, key_values: {Key { kind: BareKey, value: "workspace", range: 26:0..26:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @632..636 @27:1..27:5 } })} })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 26:0..26:26, symbol_range: 26:0..26:26, key_values: {Key { kind: BareKey, value: "workspace", range: 26:0..26:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @632..636 @27:1..27:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("tombi-lsp")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: self = Table(Table { kind: KeyValue, range: 26:0..26:26, symbol_range: 26:0..26:26, key_values: {Key { kind: BareKey, value: "workspace", range: 26:0..26:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @632..636 @27:1..27:5 } })} })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 26:0..26:26, symbol_range: 26:0..26:26, key_values: {Key { kind: BareKey, value: "workspace", range: 26:0..26:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @632..636 @27:1..27:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("tombi-lsp")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: property_schema = Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:133[0m
[1;35m  Trace[0m: self = Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @632..636 @27:1..27:5 } })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table(Table { kind: KeyValue, range: 27:0..27:35, symbol_range: 27:0..27:35, key_values: {Key { kind: BareKey, value: "workspace", range: 27:0..27:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @668..672 @28:1..28:5 } })} })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 27:0..27:35, symbol_range: 27:0..27:35, key_values: {Key { kind: BareKey, value: "workspace", range: 27:0..27:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @668..672 @28:1..28:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("tombi-schema-store")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: self = Table(Table { kind: KeyValue, range: 27:0..27:35, symbol_range: 27:0..27:35, key_values: {Key { kind: BareKey, value: "workspace", range: 27:0..27:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @668..672 @28:1..28:5 } })} })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 27:0..27:35, symbol_range: 27:0..27:35, key_values: {Key { kind: BareKey, value: "workspace", range: 27:0..27:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @668..672 @28:1..28:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("tombi-schema-store")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: property_schema = Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:133[0m
[1;35m  Trace[0m: self = Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @668..672 @28:1..28:5 } })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table(Table { kind: KeyValue, range: 28:0..28:24, symbol_range: 28:0..28:24, key_values: {Key { kind: BareKey, value: "workspace", range: 28:0..28:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @693..697 @29:1..29:5 } })} })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 28:0..28:24, symbol_range: 28:0..28:24, key_values: {Key { kind: BareKey, value: "workspace", range: 28:0..28:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @693..697 @29:1..29:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("tracing")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: self = Table(Table { kind: KeyValue, range: 28:0..28:24, symbol_range: 28:0..28:24, key_values: {Key { kind: BareKey, value: "workspace", range: 28:0..28:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @693..697 @29:1..29:5 } })} })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 28:0..28:24, symbol_range: 28:0..28:24, key_values: {Key { kind: BareKey, value: "workspace", range: 28:0..28:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @693..697 @29:1..29:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("tracing")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: property_schema = Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:133[0m
[1;35m  Trace[0m: self = Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @693..697 @29:1..29:5 } })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table(Table { kind: KeyValue, range: 29:0..29:35, symbol_range: 29:0..29:35, key_values: {Key { kind: BareKey, value: "workspace", range: 29:0..29:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @729..733 @30:1..30:5 } })} })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 29:0..29:35, symbol_range: 29:0..29:35, key_values: {Key { kind: BareKey, value: "workspace", range: 29:0..29:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @729..733 @30:1..30:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("tracing-subscriber")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: self = Table(Table { kind: KeyValue, range: 29:0..29:35, symbol_range: 29:0..29:35, key_values: {Key { kind: BareKey, value: "workspace", range: 29:0..29:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @729..733 @30:1..30:5 } })} })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 29:0..29:35, symbol_range: 29:0..29:35, key_values: {Key { kind: BareKey, value: "workspace", range: 29:0..29:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @729..733 @30:1..30:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("tracing-subscriber")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: property_schema = Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:133[0m
[1;35m  Trace[0m: self = Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @729..733 @30:1..30:5 } })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table(Table { kind: KeyValue, range: 30:0..30:20, symbol_range: 30:0..30:20, key_values: {Key { kind: BareKey, value: "workspace", range: 30:0..30:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @750..754 @31:1..31:5 } })} })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 30:0..30:20, symbol_range: 30:0..30:20, key_values: {Key { kind: BareKey, value: "workspace", range: 30:0..30:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @750..754 @31:1..31:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("url")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: String(StringSchema { title: Some("Semantic Version Requirement"), description: Some("The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency."), range: 1145:25..1160:5, min_length: None, max_length: None, pattern: None, enumerate: None, default: Some("*"), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: self = Table(Table { kind: KeyValue, range: 30:0..30:20, symbol_range: 30:0..30:20, key_values: {Key { kind: BareKey, value: "workspace", range: 30:0..30:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @750..754 @31:1..31:5 } })} })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: self = Table { kind: KeyValue, range: 30:0..30:20, symbol_range: 30:0..30:20, key_values: {Key { kind: BareKey, value: "workspace", range: 30:0..30:9 }: Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @750..754 @31:1..31:5 } })} }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:21[0m
[1;35m  Trace[0m: accessors = [Key("url")]
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:22[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Table(TableSchema { title: Some("Detailed Dependency"), description: None, range: 85:26..232:5, properties: RwLock { data: {Key("workspace"): PropertySchema { key_range: 89:8..89:19, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) } }, Key("version"): PropertySchema { key_range: 98:8..98:17, property_schema: Ref { reference: "#/definitions/SemVerRequirement", title: None, description: None, deprecated: None } }, Key("branch"): PropertySchema { key_range: 101:8..101:16, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 101:18..109:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("default-features"): PropertySchema { key_range: 110:8..110:26, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Use the default features of the dependency."), range: 110:28..118:9, default: None, enumerate: None, deprecated: None }) } }, Key("features"): PropertySchema { key_range: 127:8..127:18, property_schema: Resolved { schema_url: None, value: Array(ArraySchema { title: None, description: Some("List of features to activate in the dependency."), range: 127:20..149:9, items: Some(RwLock { data: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("List of features to activate in the dependency."), range: 130:19..142:11, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }), min_items: None, max_items: None, unique_items: None, values_order: Some(Ascending), deprecated: None }) } }, Key("git"): PropertySchema { key_range: 150:8..150:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven't specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n"), range: 150:15..158:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("optional"): PropertySchema { key_range: 159:8..159:18, property_schema: Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Mark the dependency as optional.\n\nOptional dependencies can be activated through features."), range: 159:20..167:9, default: None, enumerate: None, deprecated: None }) } }, Key("package"): PropertySchema { key_range: 168:8..168:17, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n"), range: 168:19..176:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("path"): PropertySchema { key_range: 177:8..177:14, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it's written in)."), range: 177:16..185:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("registry"): PropertySchema { key_range: 192:8..192:18, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n"), range: 192:20..200:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("rev"): PropertySchema { key_range: 207:8..207:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choice-of-commit).\n\nThis can be a commit hash, or a named reference exposed by the remote repository. GitHub Pull Requests may be specified using the `refs/pull/ID/head` format."), range: 207:15..215:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }, Key("tag"): PropertySchema { key_range: 216:8..216:13, property_schema: Resolved { schema_url: None, value: String(StringSchema { title: None, description: Some("Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)."), range: 216:15..224:9, min_length: None, max_length: None, pattern: None, enumerate: None, default: None, deprecated: None }) } }} }, pattern_properties: None, additional_properties: Some(false), additional_property_schema: None, required: None, min_properties: Some(1), max_properties: None, keys_order: Some(Schema), deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:23[0m
[1;35m  Trace[0m: property_schema = Resolved { schema_url: None, value: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }) }
    [90mat[0m [36mcrates/tombi-validator/src/validate/table.rs:133[0m
[1;35m  Trace[0m: self = Boolean(Boolean { value: true, node: Boolean { syntax: BOOLEAN @750..754 @31:1..31:5 } })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:12[0m
[1;35m  Trace[0m: current_schema = Some(CurrentSchema { value_schema: Boolean(BooleanSchema { title: None, description: Some("Inherit this dependency from the workspace manifest."), range: 89:21..97:9, default: None, enumerate: None, deprecated: None }), schema_url: "file:///home/nahco314/RustroverProjects/tombi/schemas/cargo.schema.json" })
    [90mat[0m [36mcrates/tombi-validator/src/validate/value.rs:13[0m
[1;35m  Trace[0m: TOML AST after editing: Root {
    syntax: ROOT @0..733 @1:1..10:1
      TABLE @0..200 @1:1..4:1
        BRACKET_START @0..1 @1:1..1:2 "["
        KEYS @1..8 @1:2..1:9
          BARE_KEY @1..8 @1:2..1:9
            BARE_KEY @1..8 @1:2..1:9 "package"
        BRACKET_END @8..9 @1:9..1:10 "]"
        LINE_BREAK @9..10 @1:10..2:1 "\n"
        KEY_VALUE @10..28 @2:1..2:19
          KEYS @10..14 @2:1..2:5
            BARE_KEY @10..14 @2:1..2:5
              BARE_KEY @10..14 @2:1..2:5 "name"
          WHITESPACE @14..15 @2:1..2:2 " "
          EQUAL @15..16 @2:1..2:2 "="
          WHITESPACE @16..17 @2:1..2:2 " "
          BASIC_STRING @17..28 @2:1..2:12
            BASIC_STRING @17..28 @2:1..2:12 "\"tombi-cli\""
        KEY_VALUE @28..52 @2:19..2:43
          KEYS @28..45 @2:19..2:36
            BARE_KEY @28..35 @2:19..2:26
              BARE_KEY @28..35 @2:19..2:26 "version"
            DOT @35..36 @2:19..2:20 "."
            BARE_KEY @36..45 @2:19..2:28
              BARE_KEY @36..45 @2:19..2:28 "workspace"
          WHITESPACE @45..46 @2:19..2:20 " "
          EQUAL @46..47 @2:19..2:20 "="
          WHITESPACE @47..48 @2:19..2:20 " "
          BOOLEAN @48..52 @2:19..2:23
            BOOLEAN @48..52 @2:19..2:23 "true"
        KEY_VALUE @52..76 @2:43..2:67
          KEYS @52..69 @2:43..2:60
            BARE_KEY @52..59 @2:43..2:50
              BARE_KEY @52..59 @2:43..2:50 "authors"
            DOT @59..60 @2:43..2:44 "."
            BARE_KEY @60..69 @2:43..2:52
              BARE_KEY @60..69 @2:43..2:52 "workspace"
          WHITESPACE @69..70 @2:43..2:44 " "
          EQUAL @70..71 @2:43..2:44 "="
          WHITESPACE @71..72 @2:43..2:44 " "
          BOOLEAN @72..76 @2:43..2:47
            BOOLEAN @72..76 @2:43..2:47 "true"
        KEY_VALUE @76..100 @2:67..2:91
          KEYS @76..93 @2:67..2:84
            BARE_KEY @76..83 @2:67..2:74
              BARE_KEY @76..83 @2:67..2:74 "edition"
            DOT @83..84 @2:67..2:68 "."
            BARE_KEY @84..93 @2:67..2:76
              BARE_KEY @84..93 @2:67..2:76 "workspace"
          WHITESPACE @93..94 @2:67..2:68 " "
          EQUAL @94..95 @2:67..2:68 "="
          WHITESPACE @95..96 @2:67..2:68 " "
          BOOLEAN @96..100 @2:67..2:71
            BOOLEAN @96..100 @2:67..2:71 "true"
        KEY_VALUE @100..147 @2:91..2:138
          KEYS @100..111 @2:91..2:102
            BARE_KEY @100..111 @2:91..2:102
              BARE_KEY @100..111 @2:91..2:102 "description"
          WHITESPACE @111..112 @2:91..2:92 " "
          EQUAL @112..113 @2:91..2:92 "="
          WHITESPACE @113..114 @2:91..2:92 " "
          BASIC_STRING @114..147 @2:91..2:124
            BASIC_STRING @114..147 @2:91..2:124 "\"TOML Formatter/Linte ..."
        KEY_VALUE @147..174 @2:138..2:165
          KEYS @147..167 @2:138..2:158
            BARE_KEY @147..157 @2:138..2:148
              BARE_KEY @147..157 @2:138..2:148 "repository"
            DOT @157..158 @2:138..2:139 "."
            BARE_KEY @158..167 @2:138..2:147
              BARE_KEY @158..167 @2:138..2:147 "workspace"
          WHITESPACE @167..168 @2:138..2:139 " "
          EQUAL @168..169 @2:138..2:139 "="
          WHITESPACE @169..170 @2:138..2:139 " "
          BOOLEAN @170..174 @2:138..2:142
            BOOLEAN @170..174 @2:138..2:142 "true"
        KEY_VALUE @174..198 @2:165..2:189
          KEYS @174..191 @2:165..2:182
            BARE_KEY @174..181 @2:165..2:172
              BARE_KEY @174..181 @2:165..2:172 "license"
            DOT @181..182 @2:165..2:166 "."
            BARE_KEY @182..191 @2:165..2:174
              BARE_KEY @182..191 @2:165..2:174 "workspace"
          WHITESPACE @191..192 @2:165..2:166 " "
          EQUAL @192..193 @2:165..2:166 "="
          WHITESPACE @193..194 @2:165..2:166 " "
          BOOLEAN @194..198 @2:165..2:169
            BOOLEAN @194..198 @2:165..2:169 "true"
        LINE_BREAK @198..199 @2:189..3:1 "\n"
        LINE_BREAK @199..200 @3:1..4:1 "\n"
      ARRAY_OF_TABLE @200..245 @4:1..8:1
        DOUBLE_BRACKET_START @200..202 @4:1..4:3 "[["
        KEYS @202..205 @4:1..4:4
          BARE_KEY @202..205 @4:1..4:4
            BARE_KEY @202..205 @4:1..4:4 "bin"
        DOUBLE_BRACKET_END @205..207 @4:1..4:3 "]]"
        LINE_BREAK @207..208 @4:1..5:1 "\n"
        KEY_VALUE @208..222 @5:1..5:15
          KEYS @208..212 @5:1..5:5
            BARE_KEY @208..212 @5:1..5:5
              BARE_KEY @208..212 @5:1..5:5 "name"
          WHITESPACE @212..213 @5:1..5:2 " "
          EQUAL @213..214 @5:1..5:2 "="
          WHITESPACE @214..215 @5:1..5:2 " "
          BASIC_STRING @215..222 @5:1..5:8
            BASIC_STRING @215..222 @5:1..5:8 "\"tombi\""
        KEY_VALUE @222..243 @5:1..6:21
          LINE_BREAK @222..223 @5:1..6:1 "\n"
          KEYS @223..227 @6:1..6:5
            BARE_KEY @223..227 @6:1..6:5
              BARE_KEY @223..227 @6:1..6:5 "path"
          WHITESPACE @227..228 @6:1..6:2 " "
          EQUAL @228..229 @6:1..6:2 "="
          WHITESPACE @229..230 @6:1..6:2 " "
          BASIC_STRING @230..243 @6:1..6:14
            BASIC_STRING @230..243 @6:1..6:14 "\"src/main.rs\""
        LINE_BREAK @243..244 @6:1..7:1 "\n"
        LINE_BREAK @244..245 @7:1..8:1 "\n"
      TABLE @245..733 @8:1..10:1
        BRACKET_START @245..246 @8:1..8:2 "["
        KEYS @246..258 @8:1..8:13
          BARE_KEY @246..258 @8:1..8:13
            BARE_KEY @246..258 @8:1..8:13 "dependencies"
        BRACKET_END @258..259 @8:1..8:2 "]"
        LINE_BREAK @259..260 @8:1..9:1 "\n"
        KEY_VALUE @260..281 @9:1..9:22
          KEYS @260..274 @9:1..9:15
            BARE_KEY @260..264 @9:1..9:5
              BARE_KEY @260..264 @9:1..9:5 "clap"
            DOT @264..265 @9:1..9:2 "."
            BARE_KEY @265..274 @9:1..9:10
              BARE_KEY @265..274 @9:1..9:10 "workspace"
          WHITESPACE @274..275 @9:1..9:2 " "
          EQUAL @275..276 @9:1..9:2 "="
          WHITESPACE @276..277 @9:1..9:2 " "
          BOOLEAN @277..281 @9:1..9:5
            BOOLEAN @277..281 @9:1..9:5 "true"
        KEY_VALUE @281..317 @9:1..9:37
          KEYS @281..310 @9:1..9:30
            BARE_KEY @281..300 @9:1..9:20
              BARE_KEY @281..300 @9:1..9:20 "clap-verbosity-flag"
            DOT @300..301 @9:1..9:2 "."
            BARE_KEY @301..310 @9:1..9:10
              BARE_KEY @301..310 @9:1..9:10 "workspace"
          WHITESPACE @310..311 @9:1..9:2 " "
          EQUAL @311..312 @9:1..9:2 "="
          WHITESPACE @312..313 @9:1..9:2 " "
          BOOLEAN @313..317 @9:1..9:5
            BOOLEAN @313..317 @9:1..9:5 "true"
        KEY_VALUE @317..338 @9:1..9:22
          KEYS @317..331 @9:1..9:15
            BARE_KEY @317..321 @9:1..9:5
              BARE_KEY @317..321 @9:1..9:5 "glob"
            DOT @321..322 @9:1..9:2 "."
            BARE_KEY @322..331 @9:1..9:10
              BARE_KEY @322..331 @9:1..9:10 "workspace"
          WHITESPACE @331..332 @9:1..9:2 " "
          EQUAL @332..333 @9:1..9:2 "="
          WHITESPACE @333..334 @9:1..9:2 " "
          BOOLEAN @334..338 @9:1..9:5
            BOOLEAN @334..338 @9:1..9:5 "true"
        KEY_VALUE @338..364 @9:1..9:27
          KEYS @338..357 @9:1..9:20
            BARE_KEY @338..347 @9:1..9:10
              BARE_KEY @338..347 @9:1..9:10 "itertools"
            DOT @347..348 @9:1..9:2 "."
            BARE_KEY @348..357 @9:1..9:10
              BARE_KEY @348..357 @9:1..9:10 "workspace"
          WHITESPACE @357..358 @9:1..9:2 " "
          EQUAL @358..359 @9:1..9:2 "="
          WHITESPACE @359..360 @9:1..9:2 " "
          BOOLEAN @360..364 @9:1..9:5
            BOOLEAN @360..364 @9:1..9:5 "true"
        KEY_VALUE @364..393 @9:1..9:30
          KEYS @364..386 @9:1..9:23
            BARE_KEY @364..376 @9:1..9:13
              BARE_KEY @364..376 @9:1..9:13 "nu-ansi-term"
            DOT @376..377 @9:1..9:2 "."
            BARE_KEY @377..386 @9:1..9:10
              BARE_KEY @377..386 @9:1..9:10 "workspace"
          WHITESPACE @386..387 @9:1..9:2 " "
          EQUAL @387..388 @9:1..9:2 "="
          WHITESPACE @388..389 @9:1..9:2 " "
          BOOLEAN @389..393 @9:1..9:5
            BOOLEAN @389..393 @9:1..9:5 "true"
        KEY_VALUE @393..421 @9:1..9:29
          KEYS @393..414 @9:1..9:22
            BARE_KEY @393..404 @9:1..9:12
              BARE_KEY @393..404 @9:1..9:12 "serde_tombi"
            DOT @404..405 @9:1..9:2 "."
            BARE_KEY @405..414 @9:1..9:10
              BARE_KEY @405..414 @9:1..9:10 "workspace"
          WHITESPACE @414..415 @9:1..9:2 " "
          EQUAL @415..416 @9:1..9:2 "="
          WHITESPACE @416..417 @9:1..9:2 " "
          BOOLEAN @417..421 @9:1..9:5
            BOOLEAN @417..421 @9:1..9:5 "true"
        KEY_VALUE @421..447 @9:1..9:27
          KEYS @421..440 @9:1..9:20
            BARE_KEY @421..430 @9:1..9:10
              BARE_KEY @421..430 @9:1..9:10 "thiserror"
            DOT @430..431 @9:1..9:2 "."
            BARE_KEY @431..440 @9:1..9:10
              BARE_KEY @431..440 @9:1..9:10 "workspace"
          WHITESPACE @440..441 @9:1..9:2 " "
          EQUAL @441..442 @9:1..9:2 "="
          WHITESPACE @442..443 @9:1..9:2 " "
          BOOLEAN @443..447 @9:1..9:5
            BOOLEAN @443..447 @9:1..9:5 "true"
        KEY_VALUE @447..469 @9:1..9:23
          KEYS @447..462 @9:1..9:16
            BARE_KEY @447..452 @9:1..9:6
              BARE_KEY @447..452 @9:1..9:6 "tokio"
            DOT @452..453 @9:1..9:2 "."
            BARE_KEY @453..462 @9:1..9:10
              BARE_KEY @453..462 @9:1..9:10 "workspace"
          WHITESPACE @462..463 @9:1..9:2 " "
          EQUAL @463..464 @9:1..9:2 "="
          WHITESPACE @464..465 @9:1..9:2 " "
          BOOLEAN @465..469 @9:1..9:5
            BOOLEAN @465..469 @9:1..9:5 "true"
        KEY_VALUE @469..498 @9:1..9:30
          KEYS @469..491 @9:1..9:23
            BARE_KEY @469..481 @9:1..9:13
              BARE_KEY @469..481 @9:1..9:13 "tombi-config"
            DOT @481..482 @9:1..9:2 "."
            BARE_KEY @482..491 @9:1..9:10
              BARE_KEY @482..491 @9:1..9:10 "workspace"
          WHITESPACE @491..492 @9:1..9:2 " "
          EQUAL @492..493 @9:1..9:2 "="
          WHITESPACE @493..494 @9:1..9:2 " "
          BOOLEAN @494..498 @9:1..9:5
            BOOLEAN @494..498 @9:1..9:5 "true"
        KEY_VALUE @498..531 @9:1..9:34
          KEYS @498..524 @9:1..9:27
            BARE_KEY @498..514 @9:1..9:17
              BARE_KEY @498..514 @9:1..9:17 "tombi-diagnostic"
            DOT @514..515 @9:1..9:2 "."
            BARE_KEY @515..524 @9:1..9:10
              BARE_KEY @515..524 @9:1..9:10 "workspace"
          WHITESPACE @524..525 @9:1..9:2 " "
          EQUAL @525..526 @9:1..9:2 "="
          WHITESPACE @526..527 @9:1..9:2 " "
          BOOLEAN @527..531 @9:1..9:5
            BOOLEAN @527..531 @9:1..9:5 "true"
        KEY_VALUE @531..563 @9:1..9:33
          KEYS @531..556 @9:1..9:26
            BARE_KEY @531..546 @9:1..9:16
              BARE_KEY @531..546 @9:1..9:16 "tombi-formatter"
            DOT @546..547 @9:1..9:2 "."
            BARE_KEY @547..556 @9:1..9:10
              BARE_KEY @547..556 @9:1..9:10 "workspace"
          WHITESPACE @556..557 @9:1..9:2 " "
          EQUAL @557..558 @9:1..9:2 "="
          WHITESPACE @558..559 @9:1..9:2 " "
          BOOLEAN @559..563 @9:1..9:5
            BOOLEAN @559..563 @9:1..9:5 "true"
        KEY_VALUE @563..592 @9:1..9:30
          KEYS @563..585 @9:1..9:23
            BARE_KEY @563..575 @9:1..9:13
              BARE_KEY @563..575 @9:1..9:13 "tombi-linter"
            DOT @575..576 @9:1..9:2 "."
            BARE_KEY @576..585 @9:1..9:10
              BARE_KEY @576..585 @9:1..9:10 "workspace"
          WHITESPACE @585..586 @9:1..9:2 " "
          EQUAL @586..587 @9:1..9:2 "="
          WHITESPACE @587..588 @9:1..9:2 " "
          BOOLEAN @588..592 @9:1..9:5
            BOOLEAN @588..592 @9:1..9:5 "true"
        KEY_VALUE @592..618 @9:1..9:27
          KEYS @592..611 @9:1..9:20
            BARE_KEY @592..601 @9:1..9:10
              BARE_KEY @592..601 @9:1..9:10 "tombi-lsp"
            DOT @601..602 @9:1..9:2 "."
            BARE_KEY @602..611 @9:1..9:10
              BARE_KEY @602..611 @9:1..9:10 "workspace"
          WHITESPACE @611..612 @9:1..9:2 " "
          EQUAL @612..613 @9:1..9:2 "="
          WHITESPACE @613..614 @9:1..9:2 " "
          BOOLEAN @614..618 @9:1..9:5
            BOOLEAN @614..618 @9:1..9:5 "true"
        KEY_VALUE @618..653 @9:1..9:36
          KEYS @618..646 @9:1..9:29
            BARE_KEY @618..636 @9:1..9:19
              BARE_KEY @618..636 @9:1..9:19 "tombi-schema-store"
            DOT @636..637 @9:1..9:2 "."
            BARE_KEY @637..646 @9:1..9:10
              BARE_KEY @637..646 @9:1..9:10 "workspace"
          WHITESPACE @646..647 @9:1..9:2 " "
          EQUAL @647..648 @9:1..9:2 "="
          WHITESPACE @648..649 @9:1..9:2 " "
          BOOLEAN @649..653 @9:1..9:5
            BOOLEAN @649..653 @9:1..9:5 "true"
        KEY_VALUE @653..677 @9:1..9:25
          KEYS @653..670 @9:1..9:18
            BARE_KEY @653..660 @9:1..9:8
              BARE_KEY @653..660 @9:1..9:8 "tracing"
            DOT @660..661 @9:1..9:2 "."
            BARE_KEY @661..670 @9:1..9:10
              BARE_KEY @661..670 @9:1..9:10 "workspace"
          WHITESPACE @670..671 @9:1..9:2 " "
          EQUAL @671..672 @9:1..9:2 "="
          WHITESPACE @672..673 @9:1..9:2 " "
          BOOLEAN @673..677 @9:1..9:5
            BOOLEAN @673..677 @9:1..9:5 "true"
        KEY_VALUE @677..712 @9:1..9:36
          KEYS @677..705 @9:1..9:29
            BARE_KEY @677..695 @9:1..9:19
              BARE_KEY @677..695 @9:1..9:19 "tracing-subscriber"
            DOT @695..696 @9:1..9:2 "."
            BARE_KEY @696..705 @9:1..9:10
              BARE_KEY @696..705 @9:1..9:10 "workspace"
          WHITESPACE @705..706 @9:1..9:2 " "
          EQUAL @706..707 @9:1..9:2 "="
          WHITESPACE @707..708 @9:1..9:2 " "
          BOOLEAN @708..712 @9:1..9:5
            BOOLEAN @708..712 @9:1..9:5 "true"
        KEY_VALUE @712..732 @9:1..9:21
          KEYS @712..725 @9:1..9:14
            BARE_KEY @712..715 @9:1..9:4
              BARE_KEY @712..715 @9:1..9:4 "url"
            DOT @715..716 @9:1..9:2 "."
            BARE_KEY @716..725 @9:1..9:10
              BARE_KEY @716..725 @9:1..9:10 "workspace"
          WHITESPACE @725..726 @9:1..9:2 " "
          EQUAL @726..727 @9:1..9:2 "="
          WHITESPACE @727..728 @9:1..9:2 " "
          BOOLEAN @728..732 @9:1..9:5
            BOOLEAN @728..732 @9:1..9:5 "true"
        LINE_BREAK @732..733 @9:1..10:1 "\n"
    ,
}
    [90mat[0m [36mcrates/tombi-formatter/src/formatter.rs:92[0m
1 file did not need formatting
